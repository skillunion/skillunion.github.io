Ext.data.JsonP.__inline_examples__([{"id":"Ext.app.ViewController-0","name":"Ext.app.ViewController example #1","href":"#!/api/Ext.app.ViewController","code":"Ext.define('MyViewController', {\n    extend : 'Ext.app.ViewController',\n    alias: 'controller.myview',\n\n    // This method is called as a \"handler\" for the Add button in our view\n    onAddClick: function() {\n        Ext.Msg.alert('Add', 'The Add button was clicked');\n    }\n});\n\nExt.define('MyView', {\n    extend: 'Ext.Panel',\n    controller: 'myview',\n\n    items: [{\n        xtype: 'button',\n        text: 'Add',\n        handler: 'onAddClick',  // calls MyViewController's onAddClick method\n    }]\n});\n\nExt.onReady(function() {\n    new MyView({\n        renderTo: Ext.getBody(),\n        width: 400,\n        height: 200\n    });\n});\n","options":{}},{"id":"Ext.data.field.Boolean-0","name":"Ext.data.field.Boolean example #1","href":"#!/api/Ext.data.field.Boolean","code":"Ext.define('Task', {\n    extend: 'Ext.data.Model',\n    fields: [\n        { name: 'completed', type: 'boolean' }\n    ]\n});\n\nvar record = Ext.create('Task', { completed: true }),\n    value = record.get('completed');\n\nExt.toast(\"completed is \" + value);\n","options":{}},{"id":"Ext.data.field.Date-0","name":"Ext.data.field.Date example #1","href":"#!/api/Ext.data.field.Date","code":"Ext.define('User', {\n    extend: 'Ext.data.Model',\n    fields: [\n        { name: 'birthDate', type: 'date' }\n    ]\n});\n\nvar record = Ext.create('User', { birthDate: 'Tuesday, June 27, 2017' }),\n    value = record.get('birthDate');\n\nExt.toast(\"birthDate is \" + value);\n","options":{}},{"id":"Ext.data.field.Integer-0","name":"Ext.data.field.Integer example #1","href":"#!/api/Ext.data.field.Integer","code":"Ext.define('User', {\n    extend: 'Ext.data.Model',\n    fields: [\n        { name: 'age', type: 'integer' }\n    ]\n});\n\nvar record = Ext.create('User', { age: \"5.1\" }),\n    value = record.get('age');\n\nExt.toast(\"age is \" + value);\n","options":{}},{"id":"Ext.data.field.Number-0","name":"Ext.data.field.Number example #1","href":"#!/api/Ext.data.field.Number","code":"Ext.define('Product', {\n    extend: 'Ext.data.Model',\n    fields: [\n        { name: 'price', type: 'number' }\n    ]\n});\n\nvar record = Ext.create('Product', { price: \"5.1\" }),\n    value = record.get('price');\n\nExt.toast(\"price is \" + value);\n","options":{}},{"id":"Ext.data.field.String-0","name":"Ext.data.field.String example #1","href":"#!/api/Ext.data.field.String","code":"Ext.define('User', {\n    extend: 'Ext.data.Model',\n    fields: [\n        { name: 'firstName', type: 'string' }\n    ]\n});\n\nvar record = Ext.create('User', { firstName: \"Phil\" }),\n    value = record.get('firstName');\n\nExt.toast(\"firstName is \" + value);\n","options":{}},{"id":"Ext.data.NodeInterface-0","name":"Ext.data.NodeInterface example #1","href":"#!/api/Ext.data.NodeInterface","code":"Ext.tip.QuickTipManager.init(); // not required when using Ext.application()\n\nvar root = {\n    expanded: true,\n    children: [{\n        text: \"Leaf node (<i>no folder/arrow icon</i>)\",\n        leaf: true,\n        qtitle: 'Sample Tip Title',\n        qtip: 'Tip body'\n    }, {\n        text: \"Parent node expanded\",\n        expanded: true,\n        children: [{\n            text: \"Expanded leaf node 1\",\n            leaf: true\n        }, {\n            text: \"Expanded leaf node 2\",\n            leaf: true\n        }]\n    }, {\n        text: \"Parent node collapsed\",\n        children: [{\n            text: \"Collapsed leaf node 1\",\n            leaf: true\n        }, {\n            text: \"Collapsed leaf node 2\",\n            leaf: true\n        }]\n    }]\n};\n\nvar tree = Ext.create('Ext.tree.Panel', {\n    title: 'TreePanel',\n    width: 260,\n    height: 200,\n    root: root,\n    rootVisible: false,\n    renderTo: document.body,\n    bbar: ['The first node ', {\n        text: 'is a leaf?',\n        handler: function () {\n            var firstChild = tree.getRootNode().getChildAt(0);\n            Ext.Msg.alert('Is Leaf?', firstChild.isLeaf());\n        }\n    }, {\n        text: 'has text?',\n        handler: function () {\n            var firstChild = tree.getRootNode().getChildAt(0);\n            Ext.Msg.alert('Has Text:', firstChild.get('text'));\n        }\n    }]\n});\n","options":{}},{"id":"Ext.event.Event-0","name":"Ext.event.Event example #1","href":"#!/api/Ext.event.Event","code":"var container = Ext.create('Ext.Container', {\n    layout: 'fit',\n    renderTo: Ext.getBody(),\n    items: [{\n        id: 'logger',\n        html: 'Click somewhere!',\n        padding: 5\n    }]\n});\n\ncontainer.getEl().on({\n    click: function(e, node) {\n        var string = '';\n\n        string += 'You clicked at: <strong>{ x: ' + e.pageX + ', y: ' + e.pageY + ' }</strong> <i>(e.pageX & e.pageY)</i>';\n        string += '<hr />';\n        string += 'The HTMLElement you clicked has the className of: <strong>' + e.target.className + '</strong> <i>(e.target)</i>';\n        string += '<hr />';\n        string += 'The HTMLElement which has the listener has a className of: <strong>' + e.currentTarget.className + '</strong> <i>(e.currentTarget)</i>';\n\n        Ext.getCmp('logger').setHtml(string);\n    }\n});\n","options":{}},{"id":"Ext.field.InputMask-0","name":"Ext.field.InputMask example #1","href":"#!/api/Ext.field.InputMask","code":"Ext.create({\n    fullscreen: true,\n    xtype: 'formpanel',\n\n    items: [{\n        xtype: 'textfield',\n        label: 'Phone Number',\n        placeholder: '(xxx) xxx-xxxx',\n        inputMask: '(999) 999-9999'\n    }]\n});\n","options":{"toolkit=modern":true}},{"id":"Ext.list.Tree-0","name":"Ext.list.Tree example #1","href":"#!/api/Ext.list.Tree","code":"Ext.create({\n    xtype: 'treelist',\n    store: {\n        root: {\n        expanded: true,\n            children: [{\n                text: 'detention',\n                leaf: true,\n                iconCls: 'x-fa fa-frown-o'\n            }, {\n                text: 'homework',\n                expanded: true,\n                iconCls: 'x-fa fa-folder',\n                children: [{\n                    text: 'book report',\n                    leaf: true,\n                    iconCls: 'x-fa fa-book'\n                }, {\n                    text: 'algebra',\n                    leaf: true,\n                    iconCls: 'x-fa fa-graduation-cap'\n                }]\n            }, {\n                text: 'buy lottery tickets',\n                leaf: true,\n                iconCls: 'x-fa fa-usd'\n            }]\n        }\n    },\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.sparkline.Base-0","name":"Ext.sparkline.Base example #1","href":"#!/api/Ext.sparkline.Base","code":"new Ext.Panel({\n    height: 300,\n    width: 600,\n    frame: true,\n    title: 'Test Sparklines',\n    renderTo:document.body,\n    bodyPadding: 10,\n\n    // Named listeners will resolve to methods in this Panel\n    defaultListenerScope: true,\n\n    // Named references will be collected, and can be access from this Panel\n    referenceHolder: true,\n\n    items: [{\n        reference: 'values',\n        xtype: 'textfield',\n        fieldLabel: 'Values',\n        validator: function(v) {\n            var result = [];\n\n            v = v.replace(/\\s/g, '');\n            v = v.replace(/,$/, '');\n            v = v.split(',');\n            for (var i = 0; i < v.length; i++) {\n                if (!Ext.isNumeric(v[i])) {\n                    return 'Value must be a comma separated array of numbers';\n                }\n                result.push(parseInt(v[i], 10));\n            }\n            this.values = result;\n            return true;\n        },\n        listeners: {\n            change: 'onTypeChange',\n            buffer: 500,\n            afterrender: {\n                fn: 'afterTypeRender',\n                single: true\n            }\n        }\n    }, {\n        reference: 'type',\n        xtype: 'combobox',\n        fieldLabel: 'Type',\n        store: [\n            ['sparklineline',     'Line'],\n            ['sparklinebox',      'Box'],\n            ['sparklinebullet',   'Bullet'],\n            ['sparklinediscrete', 'Discrete'],\n            ['sparklinepie',      'Pie'],\n            ['sparklinetristate', 'TriState']\n        ],\n        value: 'sparklineline',\n        listeners: {\n            change: 'onTypeChange',\n            buffer: 500\n        }\n    }],\n\n    // Start with a line plot. \n    afterTypeRender: function(typeField) {\n        typeField.setValue('6,10,4,-3,7,2');\n    },\n\n    onTypeChange: function() {\n        var me = this,\n            refs = me.getReferences(),\n            config;\n\n        if (me.sparkLine) {\n            me.remove(me.sparkLine, true);\n        }\n        config = {\n            xtype: refs.type.getValue(),\n            values: refs.values.values,\n            height: 25,\n            width: 100                    \n        };\n       me.sparkLine = Ext.create(config);\n        me.add(me.sparkLine);\n\n        // Put under fields\n        me.sparkLine.el.dom.style.marginLeft = refs.type.labelEl.getWidth() + 'px';\n    }\n});\n","options":{}},{"id":"Ext.util.Sorter-0","name":"Ext.util.Sorter example #1","href":"#!/api/Ext.util.Sorter","code":"var store = Ext.create('Ext.data.Store', {\n      fields: ['firstName', 'level'],\n      sorters: 'level',\n\n      data: [\n          { firstName: 'Mitch',  level: 9000},\n          { firstName: 'Seth',   level: 42},\n          { firstName: 'Fred',   level: 510},\n          { firstName: 'Israel', level: 690},\n          { firstName: 'Greg',   level: 101},\n          { firstName: 'Pat',    level: 0},              \n          { firstName: 'Kevin',  level: 17},\n          { firstName: 'Brandon',level: 690},\n          { firstName: 'Gary',   level: 409},\n          { firstName: 'Scott',  level: 789}\n      ]\n   });\n\n   Ext.create('Ext.grid.Panel', {\n       title: 'Support',\n       store: store,\n       columns: [\n           { text: 'Name',  dataIndex: 'firstName' },\n           { text: 'Level', dataIndex: 'level' }\n       ],\n       height: 300,\n       width: 200,\n       renderTo: Ext.getBody()\n   });  \n","options":{}},{"id":"Ext.util.Sorter-1","name":"Ext.util.Sorter example #2","href":"#!/api/Ext.util.Sorter","code":"var store = Ext.create('Ext.data.Store', {\n      fields: ['firstName', 'spiritAnimal'],\n       sorters: [\n           {\n               // Sort by first letter of second word of spirit animal, in\n               // descending order\n               sorterFn: function(record1, record2) {\n                   var name1 = record1.data.spiritAnimal.split(' ')[1].substr(0,1),\n                       name2 = record2.data.spiritAnimal.split(' ')[1].substr(0,1);\n\n                   return name1 > name2 ? 1 : (name1 === name2) ? 0 : -1;\n               },\n               direction: 'DESC'\n           }\n       ],\n\n      data: [\n          { firstName: 'Mitch',  spiritAnimal: \"Panda Bear\"},\n          { firstName: 'Seth',   spiritAnimal: \"Rascally Rabbit\"},\n          { firstName: 'Fred',   spiritAnimal: \"Honey Badger\"},\n          { firstName: 'Israel', spiritAnimal: \"Mysterious Capybara\"},\n          { firstName: 'Greg',   spiritAnimal: \"Majestic Platypus\"},\n          { firstName: 'Kevin',  spiritAnimal: \"Sparkling Unicorn\"},\n          { firstName: 'Brandon',spiritAnimal: \"Pygmy Goat\"},\n          { firstName: 'Gary',   spiritAnimal: \"Suri Alpaca\"},\n          { firstName: 'Scott',  spiritAnimal: \"Ripe Armadillo\"},\n          { firstName: 'Pat',    spiritAnimal: \"Wiley Coyote\"}\n      ]\n   });\n\n   Ext.create('Ext.grid.Panel', {\n       title: 'Support',\n       store: store,\n       columns: [\n           { text: 'Name',          dataIndex: 'firstName' },\n           { text: 'Spirit Animal', dataIndex: 'spiritAnimal', flex: 1 }\n       ],\n       height: 310,\n       renderTo: Ext.getBody()\n   });\n","options":{}},{"id":"Ext.util.TaskManager-0","name":"Ext.util.TaskManager example #1","href":"#!/api/Ext.util.TaskManager","code":"var task, clock;\n\nclock = Ext.getBody().appendChild({\n    id: 'clock'\n});\n\n// Start a simple clock task that updates a div once per second \ntask = {\n    run: function() {\n        clock.setHtml(Ext.Date.format(new Date(), 'g:i:s A'));\n    },\n    interval: 1000\n};\n\nExt.TaskManager.start(task);\n","options":{}},{"id":"Ext.util.TaskRunner-0","name":"Ext.util.TaskRunner example #1","href":"#!/api/Ext.util.TaskRunner","code":"var runner = new Ext.util.TaskRunner(),\n    clock, updateClock, task;\n\nclock = Ext.getBody().appendChild({\n    id: 'clock'\n});\n\n// Start a simple clock task that updates a div once per second\nupdateClock = function() {\n    clock.setHtml(Ext.Date.format(new Date(), 'g:i:s A'));\n};\n\ntask = runner.start({\n    run: updateClock,\n    interval: 1000\n});\n","options":{}},{"id":"Ext.util.TaskRunner-1","name":"Ext.util.TaskRunner example #2","href":"#!/api/Ext.util.TaskRunner","code":"var clock, updateClock, task;\n\nclock = Ext.getBody().appendChild({\n    id: 'clock'\n});\n\n// Start a simple clock task that updates a div once per second\nupdateClock = function() {\n    clock.setHtml(Ext.Date.format(new Date(), 'g:i:s A'));\n};\n\nvar task = Ext.TaskManager.start({\n    run: updateClock,\n    interval: 1000\n});\n","options":{}},{"id":"Ext.ActionSheet-0","name":"Ext.ActionSheet example #1","href":"#!/api/Ext.ActionSheet","code":"var actionSheet = Ext.create('Ext.ActionSheet', {\n    items: [\n        {\n            text: 'Delete draft',\n            ui  : 'decline'\n        },\n        {\n            text: 'Save draft'\n        },\n        {\n            text: 'Cancel',\n            ui  : 'confirm'\n        }\n    ]\n});\n\nExt.Viewport.add(actionSheet);\nactionSheet.show();\n","options":{"preview":true,"miniphone":true}},{"id":"Ext.ActionSheet-1","name":"Ext.ActionSheet example #2","href":"#!/api/Ext.ActionSheet","code":"var menu = Ext.create({\n     xtype: 'actionsheet',\n     items: [{\n         text: 'Settings',\n         iconCls: 'settings'\n     }, {\n         text: 'New Item',\n         iconCls: 'compose'\n     }, {\n         text: 'Star',\n         iconCls: 'star'\n     }]\n });\n\n Ext.Viewport.add({\n     xtype: 'panel',\n     html: 'Main View Content'\n });\n\n Ext.Viewport.setMenu(menu, {\n     side: 'left',\n     // omitting the reveal config defaults the animation to 'cover'\n     reveal: true\n });\n\n Ext.Viewport.showMenu('left');\n","options":{}},{"id":"Ext.Audio-0","name":"Ext.Audio example #1","href":"#!/api/Ext.Audio","code":"Ext.create('Ext.Container', {\n    fullscreen: true,\n    layout: {\n        type : 'vbox',\n        pack : 'center',\n        align: 'stretch'\n    },\n    items: [\n        {\n            xtype : 'toolbar',\n            docked: 'top',\n            title : 'Ext.Audio'\n        },\n        {\n            xtype: 'audio',\n            url  : 'touch-build/examples/audio/crash.mp3'\n        }\n    ]\n});\n","options":{}},{"id":"Ext.Audio-1","name":"Ext.Audio example #2","href":"#!/api/Ext.Audio","code":"Ext.create('Ext.Container', {\n    fullscreen: true,\n    layout: {\n        type: 'vbox',\n        pack: 'center'\n    },\n    items: [\n        {\n            xtype : 'toolbar',\n            docked: 'top',\n            title : 'Ext.Audio'\n        },\n        {\n            xtype: 'toolbar',\n            docked: 'bottom',\n            defaults: {\n                xtype: 'button',\n                handler: function() {\n                    var container = this.getParent().getParent(),\n                        // use ComponentQuery to get the audio component (using its xtype)\n                        audio = container.down('audio');\n\n                    audio.toggle();\n                    this.setText(audio.isPlaying() ? 'Pause' : 'Play');\n                }\n            },\n            items: [\n                { text: 'Play', flex: 1 }\n            ]\n        },\n        {\n            html: 'Hidden audio!'\n        },\n        {\n            xtype : 'audio',\n            hidden: true,\n            url   : 'touch-build/examples/audio/crash.mp3'\n        }\n    ]\n});\n","options":{}},{"id":"Ext.Button-0","name":"Ext.Button example #1","href":"#!/api/Ext.Button","code":"var button = Ext.create('Ext.Button', {\n    text: 'Button'\n});\nExt.Viewport.add({ xtype: 'container', padding: 10, items: [button] });\n","options":{}},{"id":"Ext.Button-1","name":"Ext.Button example #2","href":"#!/api/Ext.Button","code":"var button = Ext.create('Ext.Button', {\n    iconCls: 'refresh'\n});\nExt.Viewport.add({ xtype: 'container', padding: 10, items: [button] });\n","options":{}},{"id":"Ext.Button-2","name":"Ext.Button example #3","href":"#!/api/Ext.Button","code":"Ext.create('Ext.Container', {\n    fullscreen: true,\n    padding: 10,\n    items: {\n        xtype: 'button',\n        text: 'My Button',\n        badgeText: '2'\n    }\n});\n","options":{}},{"id":"Ext.Button-3","name":"Ext.Button example #4","href":"#!/api/Ext.Button","code":"Ext.create('Ext.Button', {\n    text: 'Menu button',\n    renderTo: Ext.getBody(),\n    arrowAlign: 'bottom',\n    menu: [\n        { text: 'Item 1' },\n        { text: 'Item 2' },\n        { text: 'Item 3' },\n        { text: 'Item 4' }\n    ]\n});\n","options":{}},{"id":"Ext.Button-4","name":"Ext.Button example #5","href":"#!/api/Ext.Button","code":"Ext.create('Ext.Container', {\n    fullscreen: true,\n    padding: 4,\n    defaults: {\n        xtype: 'button',\n        margin: 5\n    },\n    layout: {\n        type: 'vbox',\n        align: 'center'\n    },\n    items: [\n        { ui: 'normal', text: 'normal' },\n        { ui: 'round', text: 'round' },\n        { ui: 'action', text: 'action' },\n        { ui: 'decline', text: 'decline' },\n        { ui: 'confirm', text: 'confirm' }\n    ]\n});\n","options":{}},{"id":"Ext.Button-5","name":"Ext.Button example #6","href":"#!/api/Ext.Button","code":"Ext.createWidget('container', {\n    fullscreen: true,\n    layout: {\n        type: 'vbox',\n        pack:'center',\n        align: 'center'\n    },\n    items: [\n        {\n            xtype: 'button',\n            text: 'Change iconCls',\n            handler: function() {\n                // classes for all the icons to loop through.\n                var availableIconCls = [\n                    'action', 'add', 'arrow_down', 'arrow_left',\n                    'arrow_right', 'arrow_up', 'compose', 'delete',\n                    'organize', 'refresh', 'reply', 'search',\n                    'settings', 'star', 'trash', 'maps', 'locate',\n                    'home'\n                ];\n                // get the text of this button,\n                // so we know which button we don't want to change\n                var text = this.getText();\n\n                // use ComponentQuery to find all buttons on the page\n                // and loop through all of them\n                Ext.Array.forEach(Ext.ComponentQuery.query('button'), function(button) {\n                    // if the button is the change iconCls button, continue\n                    if (button.getText() === text) {\n                        return;\n                    }\n\n                    // get the index of the new available iconCls\n                    var index = availableIconCls.indexOf(button.getIconCls()) + 1;\n\n                    // update the iconCls of the button with the next iconCls, if one exists.\n                    // if not, use the first one\n                    button.setIconCls(availableIconCls[(index === availableIconCls.length) ? 0 : index]);\n                });\n            }\n        },\n        {\n            xtype: 'toolbar',\n            docked: 'top',\n            items: [\n                { xtype: 'spacer' },\n                { iconCls: 'action' },\n                { iconCls: 'add' },\n                { iconCls: 'arrow_down' },\n                { iconCls: 'arrow_left' },\n                { iconCls: 'arrow_up' },\n                { iconCls: 'compose' },\n                { iconCls: 'delete' },\n                { iconCls: 'organize' },\n                { iconCls: 'refresh' },\n                { xtype: 'spacer' }\n            ]\n        },\n        {\n            xtype: 'toolbar',\n            docked: 'bottom',\n            ui: 'light',\n            items: [\n                { xtype: 'spacer' },\n                { iconCls: 'reply' },\n                { iconCls: 'search' },\n                { iconCls: 'settings' },\n                { iconCls: 'star' },\n                { iconCls: 'trash' },\n                { iconCls: 'maps' },\n                { iconCls: 'locate' },\n                { iconCls: 'home' },\n                { xtype: 'spacer' }\n            ]\n        }\n    ]\n});\n","options":{}},{"id":"Ext.carousel.Carousel-0","name":"Ext.carousel.Carousel example #1","href":"#!/api/Ext.carousel.Carousel","code":"Ext.create('Ext.Carousel', {\n    fullscreen: true,\n\n    items: [\n        {\n            html : 'Item 1',\n            style: 'background-color: #5E99CC'\n        },\n        {\n            html : 'Item 2',\n            style: 'background-color: #759E60'\n        },\n        {\n            html : 'Item 3'\n        }\n    ]\n});\n","options":{}},{"id":"Ext.carousel.Carousel-1","name":"Ext.carousel.Carousel example #2","href":"#!/api/Ext.carousel.Carousel","code":"Ext.create('Ext.Carousel', {\n    fullscreen: true,\n    direction: 'vertical',\n\n    items: [\n        {\n            html : 'Item 1',\n            style: 'background-color: #759E60'\n        },\n        {\n            html : 'Item 2',\n            style: 'background-color: #5E99CC'\n        }\n    ]\n});\n","options":{}},{"id":"Ext.Component-0","name":"Ext.Component example #1","href":"#!/api/Ext.Component","code":"var panel = Ext.create('Ext.Panel', {\n    layout: 'hbox',\n\n    items: [\n        {\n            xtype: 'panel',\n            flex: 1,\n            html: 'Left Panel, 1/3rd of total size',\n             style: 'background-color: #5E99CC;'\n        },\n        {\n            xtype: 'panel',\n            flex: 2,\n            html: 'Right Panel, 2/3rds of total size',\n            style: 'background-color: #759E60;'\n        }\n    ]\n});\n\nExt.Viewport.add(panel);\n","options":{}},{"id":"Ext.Component-1","name":"Ext.Component example #2","href":"#!/api/Ext.Component","code":"Ext.create('Ext.Container', {\n    fullscreen: true,\n    layout: 'fit',\n\n    items: [\n        {\n            xtype: 'panel',\n            html: 'This panel is created by xtype'\n        },\n        {\n            xtype: 'toolbar',\n            title: 'So is the toolbar',\n            docked: 'top'\n        }\n    ]\n});\n","options":{}},{"id":"Ext.Component-2","name":"Ext.Component example #3","href":"#!/api/Ext.Component","code":"// we can configure the HTML when we instantiate the Component\nvar panel = Ext.create('Ext.Panel', {\n    fullscreen: true,\n    html: 'This is a Panel'\n});\n\n// we can update the HTML later using the setHtml method:\npanel.setHtml('Some new HTML');\n\n// we can retrieve the current HTML using the getHtml method:\nExt.Msg.alert(panel.getHtml()); // displays \"Some new HTML\"\n","options":{}},{"id":"Ext.Container-0","name":"Ext.Container example #1","href":"#!/api/Ext.Container","code":"var mainPanel = Ext.create({\n    xtype: 'panel',\n    fullscreen: true,\n    layout: 'hbox',\n    defaults: {\n        flex: 1\n    },\n    items: [{\n        html: 'First Panel',\n        style: 'background-color: #5E99CC'\n    }]\n});\n\nmainPanel.add({\n    xtype: 'panel',\n    html: 'About this App'\n});\n","options":{}},{"id":"Ext.dataview.DataItem-0","name":"Ext.dataview.DataItem example #1","href":"#!/api/Ext.dataview.DataItem","code":"Ext.create({\n     xtype: 'componentdataview',\n\n     store: [\n         { name: 'Peter', age: 26 },\n         { name: 'Ray', age: 28 },\n         { name: 'Egon', age: 24 },\n         { name: 'Winston', age: 29 }\n     ],\n\n     itemConfig: {\n         layout: 'hbox',\n         padding: 10,\n\n         items: [{\n             xtype: 'component',\n             reference: 'textCmp'\n         }, {\n             xtype: 'button',\n             margin: '0 0 0 5',\n             reference: 'checkBtn',\n             text: 'Check'\n         }]\n     },\n\n     itemDataMap: {\n         textCmp: {\n             html: 'name'\n         }\n     }\n });\n","options":{}},{"id":"Ext.dataview.DataItem-1","name":"Ext.dataview.DataItem example #2","href":"#!/api/Ext.dataview.DataItem","code":"Ext.create({\n     xtype: 'componentdataview',\n\n     store: [\n         { name: 'Peter', age: 26 },\n         { name: 'Ray', age: 28 },\n         { name: 'Egon', age: 24 },\n         { name: 'Winston', age: 29 }\n     ],\n\n     itemConfig: {\n         layout: 'hbox',\n         padding: 10,\n         viewModel: true, // enable per-item record binding\n\n         items: [{\n             xtype: 'component',\n             bind: 'Greetings {record.name}!'\n         }, {\n             xtype: 'button',\n             margin: '0 0 0 5',\n             text: 'Check'\n         }]\n     }\n });\n","options":{}},{"id":"Ext.dataview.DataView-0","name":"Ext.dataview.DataView example #1","href":"#!/api/Ext.dataview.DataView","code":"var team = Ext.create({\n     xtype: 'dataview',\n     fullscreen: true,\n\n     store: [\n         { name: 'Peter',  age: 26 },\n         { name: 'Ray',   age: 21 },\n         { name: 'Egon', age: 24 },\n         { name: 'Winston', age: 24 }\n     ],\n\n     itemTpl: '<div>{name} is {age} years old</div>'\n });\n","options":{}},{"id":"Ext.dataview.DataView-1","name":"Ext.dataview.DataView example #2","href":"#!/api/Ext.dataview.DataView","code":"var team = Ext.create({\n     xtype: 'dataview',\n     fullscreen: true,\n\n     store: {\n        fields: ['name', 'age'],\n        data: [\n            {name: 'Peter',  age: 26},\n            {name: 'Ray',   age: 21},\n            {name: 'Egon', age: 24},\n            {name: 'Winston', age: 24}\n        ]\n     },\n\n     itemTpl: '<div>{name} is {age} years old</div>'\n });\n\n team.getStore().add({\n     name: 'Gozer',\n     age: 21\n });\n\n team.getStore().getAt(0).set('age', 42);\n","options":{}},{"id":"Ext.dataview.DataView-2","name":"Ext.dataview.DataView example #3","href":"#!/api/Ext.dataview.DataView","code":"Ext.create({\n     xtype: 'dataview',\n     fullscreen: true,\n\n     store: {\n         autoLoad: true,\n         proxy: {\n             type: 'jsonp',\n             url: 'https://itunes.apple.com/search?term=Pink+Floyd&entity=album',\n\n             reader: {\n                 type: 'json',\n                 rootProperty: 'results'\n             }\n         }\n     },\n\n     itemTpl: '<h2>{collectionName}</h2><p><img src=\"{artworkUrl100}\" /></p>'\n });\n","options":{}},{"id":"Ext.dataview.IndexBar-0","name":"Ext.dataview.IndexBar example #1","href":"#!/api/Ext.dataview.IndexBar","code":"Ext.define('Contact', {\n    extend: 'Ext.data.Model',\n    config: {\n        fields: ['firstName', 'lastName']\n    }\n});\n\nvar store = new Ext.data.JsonStore({\n   model: 'Contact',\n   sorters: 'lastName',\n\n   grouper: {\n       groupFn: function(record) {\n           return record.get('lastName')[0];\n       }\n   },\n\n   data: [\n       {firstName: 'Screech', lastName: 'Powers'},\n       {firstName: 'Kelly',   lastName: 'Kapowski'},\n       {firstName: 'Zach',    lastName: 'Morris'},\n       {firstName: 'Jessie',  lastName: 'Spano'},\n       {firstName: 'Lisa',    lastName: 'Turtle'},\n       {firstName: 'A.C.',    lastName: 'Slater'},\n       {firstName: 'Richard', lastName: 'Belding'}\n   ]\n});\n\nvar list = new Ext.List({\n   fullscreen: true,\n   itemTpl: '<div class=\"contact\">{firstName} <strong>{lastName}</strong></div>',\n\n   grouped: true,\n   indexBar: true,\n   store: store,\n   hideOnMaskTap: false\n});\n","options":{}},{"id":"Ext.dataview.List-0","name":"Ext.dataview.List example #1","href":"#!/api/Ext.dataview.List","code":"Ext.create({\n     xtype: 'list',\n     fullscreen: true,\n     itemTpl: '{title}',\n     data: [\n         { title: 'Item 1' },\n         { title: 'Item 2' },\n         { title: 'Item 3' },\n         { title: 'Item 4' }\n     ]\n });\n","options":{}},{"id":"Ext.dataview.List-1","name":"Ext.dataview.List example #2","href":"#!/api/Ext.dataview.List","code":"Ext.create({\n     xtype: 'list',\n     fullscreen: true,\n     itemTpl: '<div class=\"contact\">{firstName} <b>{lastName}</b></div>',\n     grouped: true,\n\n     store: {\n         grouper: {\n             property: 'lastName',\n             groupFn: function(record) {\n                 return record.get('lastName')[0];\n             }\n         },\n\n         data: [\n             { firstName: 'Peter',   lastName: 'Venkman'  },\n             { firstName: 'Raymond', lastName: 'Stantz'   },\n             { firstName: 'Egon',    lastName: 'Spengler' },\n             { firstName: 'Winston', lastName: 'Zeddemore'}\n         ]\n     }\n });\n","options":{}},{"id":"Ext.dataview.List-2","name":"Ext.dataview.List example #3","href":"#!/api/Ext.dataview.List","code":"Ext.create({\n     xtype: 'list',\n     fullscreen: true,\n\n     store: [\n         { firstName: 'Peter',   lastName: 'Venkman'  },\n         { firstName: 'Raymond', lastName: 'Stantz'   },\n         { firstName: 'Egon',    lastName: 'Spengler' },\n         { firstName: 'Winston', lastName: 'Zeddemore'}\n     ],\n\n     itemTpl: '<div class=\"contact\">{firstName} <b>{lastName}</b></div>',\n\n     items: [{\n         xtype: 'button',\n         scrollDock: 'end',\n         text: 'Load More...'\n     }]\n });\n","options":{}},{"id":"Ext.dataview.NestedList-0","name":"Ext.dataview.NestedList example #1","href":"#!/api/Ext.dataview.NestedList","code":"var data = {\n     text: 'Groceries',\n     items: [{\n         text: 'Drinks',\n         items: [{\n             text: 'Water',\n             items: [{\n                 text: 'Sparkling',\n                 leaf: true\n             }, {\n                 text: 'Still',\n                 leaf: true\n             }]\n         }, {\n             text: 'Coffee',\n             leaf: true\n         }, {\n             text: 'Espresso',\n             leaf: true\n         }, {\n             text: 'Redbull',\n             leaf: true\n         }, {\n             text: 'Coke',\n             leaf: true\n         }, {\n             text: 'Diet Coke',\n             leaf: true\n         }]\n     }, {\n         text: 'Fruit',\n         items: [{\n             text: 'Bananas',\n             leaf: true\n         }, {\n             text: 'Lemon',\n             leaf: true\n         }]\n     }, {\n         text: 'Snacks',\n         items: [{\n             text: 'Nuts',\n             leaf: true\n         }, {\n             text: 'Pretzels',\n             leaf: true\n         }, {\n             text: 'Wasabi Peas',\n             leaf: true\n         }]\n     }]\n };\n\n Ext.define('ListItem', {\n     extend: 'Ext.data.Model',\n     config: {\n         fields: [{\n             name: 'text',\n             type: 'string'\n         }]\n     }\n });\n\n var store = Ext.create('Ext.data.TreeStore', {\n     model: 'ListItem',\n     defaultRootProperty: 'items',\n     root: data\n });\n\n var nestedList = Ext.create('Ext.NestedList', {\n     fullscreen: true,\n     title: 'Groceries',\n     displayField: 'text',\n     store: store\n });\n","options":{}},{"id":"Ext.dataview.pullrefresh.PullRefresh-0","name":"Ext.dataview.pullrefresh.PullRefresh example #1","href":"#!/api/Ext.dataview.pullrefresh.PullRefresh","code":"Ext.create({\n     xtype: 'list',\n     fullscreen: true,\n\n     plugins: {\n         pullrefresh: {\n             pullText: 'Pull down for more new Tweets!'\n         }\n     },\n\n     itemTpl: [\n         '<img src=\"{img}\" alt=\"{name} photo\" />',\n         '<div class=\"tweet\"><b>{name}:</b> {text}</div>'\n     ],\n\n     store: [{\n         name: 'Bill',\n         img: 'https://www.sencha.com/forum/images/statusicon/forum_new-48.png',\n         text: 'JavaScript development'\n     }]\n });\n","options":{}},{"id":"Ext.Editor-0","name":"Ext.Editor example #1","href":"#!/api/Ext.Editor","code":"var form = Ext.create('Ext.form.Panel', {\n    renderTo: Ext.getBody(),\n    width: 380,\n    height: 400,\n    title: 'User Details',\n    bodyPadding: 10,\n    items: [{\n        html: 'Double-Click on the header title, this, or the field label to edit',\n        height:30\n    },{\n        label: 'First Name',\n        name: 'firstname',\n        xtype: 'textfield'\n    }]\n});\n\nvar editor = new Ext.Editor({\n    // update the innerHTML of the bound element \n    // when editing completes\n    updateEl: true,\n    alignment: 'l-l',\n    autoSize: {\n        width: 'boundEl'\n    },\n    field: {\n        xtype: 'textfield'\n    }\n});\n\nform.header.getTitle().textEl.on('dblclick', function(e, t) {\n    editor.startEdit(t);\n});\n\nform.getTargetEl().on('dblclick', function(e, t) {\n    editor.startEdit(t);\n    // Manually focus, since clicking on the label will focus the text field\n    editor.getField().focus(50, true);\n});\n","options":{}},{"id":"Ext.field.Checkbox-0","name":"Ext.field.Checkbox example #1","href":"#!/api/Ext.field.Checkbox","code":"var form = Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'checkboxfield',\n            name : 'tomato',\n            label: 'Tomato',\n            value: 'tomato',\n            checked: true\n        },\n        {\n            xtype: 'checkboxfield',\n            name : 'salami',\n            label: 'Salami'\n        },\n        {\n            xtype: 'toolbar',\n            docked: 'bottom',\n            items: [\n                { xtype: 'spacer' },\n                {\n                    text: 'getValues',\n                    handler: function() {\n                        var form = Ext.ComponentQuery.query('formpanel')[0],\n                            values = form.getValues();\n\n                        Ext.Msg.alert(null,\n                            \"Tomato: \" + ((values.tomato) ? \"yes\" : \"no\") +\n                            \"<br />Salami: \" + ((values.salami) ? \"yes\" : \"no\")\n                        );\n                    }\n                },\n                { xtype: 'spacer' }\n            ]\n        }\n    ]\n});\n","options":{}},{"id":"Ext.field.ComboBox-0","name":"Ext.field.ComboBox example #1","href":"#!/api/Ext.field.ComboBox","code":"Ext.create({\n     fullscreen: true,\n     xtype: 'container',\n     padding: 50,\n     layout: 'vbox',\n     items: [{\n         xtype: 'combobox',\n         label: 'Choose State',\n         queryMode: 'local',\n         displayField: 'name',\n         valueField: 'abbr',\n\n         store: [\n             { abbr: 'AL', name: 'Alabama' },\n             { abbr: 'AK', name: 'Alaska' },\n             { abbr: 'AZ', name: 'Arizona' }\n         ]\n     }]\n });\n","options":{}},{"id":"Ext.field.ComboBox-1","name":"Ext.field.ComboBox example #2","href":"#!/api/Ext.field.ComboBox","code":"Ext.create({\n     fullscreen: true,\n     xtype: 'container',\n     padding: 50,\n     layout: 'vbox',\n     items: [{\n         xtype: 'combobox',\n         label: 'Choose State',\n         queryMode: 'local',\n         displayField: 'name',\n         valueField: 'abbr',\n\n         // For the dropdown list\n         itemTpl: '<span role=\"option\" class=\"x-boundlist-item\">{abbr} - {name}</span>',\n\n         // For the content of the text field\n         displayTpl: '{abbr} - {name}',\n\n         editable: false,  // disable typing in the text field\n\n         store: [\n             { abbr: 'AL', name: 'Alabama' },\n             { abbr: 'AK', name: 'Alaska' },\n             { abbr: 'AZ', name: 'Arizona' }\n         ]\n     }]\n });\n","options":{}},{"id":"Ext.field.Container-0","name":"Ext.field.Container example #1","href":"#!/api/Ext.field.Container","code":"Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    title: 'FieldContainer Example',\n    bodyPadding: 10,\n\n    items: [{\n        xtype: 'containerfield',\n        label: 'Name',\n        name: 'name',\n        items: [{\n            flex: 1,\n            name: 'first',\n            placeholder: 'First'\n        }, {\n            margin: '0 10',\n            name: 'middle',\n            placeholder: 'MI',\n            width: 50\n        }, {\n            flex: 1,\n            name: 'last',\n            placeholder: 'Last'\n        }]\n    }]\n});\n","options":{}},{"id":"Ext.field.Date-0","name":"Ext.field.Date example #1","href":"#!/api/Ext.field.Date","code":"var form = Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    referenceHolder: true,\n    items: [{\n        xtype: 'fieldset',\n        items: [{\n            xtype: 'datefield',\n            label: 'Birthday',\n            reference: 'birthday',\n            value: new Date()\n        }]\n    }, {\n        xtype: 'toolbar',\n        docked: 'bottom',\n        items: [{\n            text: 'setValue',\n            handler: function() {\n                var field = form.lookup('birthday'),\n                    y = Ext.Number.randomInt(1980, 2011),\n                    m = Ext.Number.randomInt(0, 11),\n                    d = Ext.Number.randomInt(1, 28);\n\n                field.setValue(new Date(y, m, d));\n            }\n        }]\n    }]\n});\n","options":{}},{"id":"Ext.field.Date-1","name":"Ext.field.Date example #2","href":"#!/api/Ext.field.Date","code":"var form = Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    referenceHolder: true,\n    items: [{\n        xtype: 'fieldset',\n        items: [{\n            xtype: 'datefield',\n            label: 'Birthday',\n            reference: 'birthday',\n            value: new Date()\n        }]\n    }, {\n        xtype: 'toolbar',\n        docked: 'bottom',\n        items: [{\n            text: 'getValue',\n            handler: function() {\n                var field = form.lookup('birthday');\n                console.log(field.getValue());\n            }\n        }, {\n            text: 'getFormattedValue',\n            handler: function() {\n                var field = form.lookup('birthday');\n                console.log(field.getFormattedValue());\n            }\n        }]\n    }]\n});\n","options":{}},{"id":"Ext.field.Display-0","name":"Ext.field.Display example #1","href":"#!/api/Ext.field.Display","code":"Ext.create('Ext.form.Panel', {\n    renderTo: Ext.getBody(),\n    width: 175,\n    height: 150,\n    bodyPadding: 10,\n    title: 'Final Score',\n    items: [{\n        xtype: 'displayfield',\n        fieldLabel: 'Home',\n        name: 'home_score',\n        value: '10'\n    }, {\n        xtype: 'displayfield',\n        fieldLabel: 'Visitor',\n        name: 'visitor_score',\n        value: '11'\n    }],\n    buttons: [{\n        text: 'Update'\n    }]\n});\n","options":{}},{"id":"Ext.field.Email-0","name":"Ext.field.Email example #1","href":"#!/api/Ext.field.Email","code":"Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'fieldset',\n            title: 'Register',\n            items: [\n                {\n                    xtype: 'emailfield',\n                    label: 'Email',\n                    name: 'email'\n                },\n                {\n                    xtype: 'passwordfield',\n                    label: 'Password',\n                    name: 'password'\n                }\n            ]\n        }\n    ]\n});\n","options":{}},{"id":"Ext.field.File-0","name":"Ext.field.File example #1","href":"#!/api/Ext.field.File","code":"Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'fieldset',\n            title: 'My Uploader',\n            items: [\n                {\n                    xtype: 'filefield',\n                    label: \"MyPhoto:\",\n                    name: 'photo',\n                    accept: 'image'\n                }\n            ]\n        }\n    ]\n});\n","options":{}},{"id":"Ext.field.Hidden-0","name":"Ext.field.Hidden example #1","href":"#!/api/Ext.field.Hidden","code":"var form = Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'fieldset',\n            title: 'Enter your name',\n            items: [\n                {\n                    xtype: 'hiddenfield',\n                    name: 'userId',\n                    value: 123\n                },\n                {\n                    xtype: 'checkboxfield',\n                    label: 'Enable notifications',\n                    name: 'notifications'\n                }\n            ]\n        }\n    ]\n});\n","options":{}},{"id":"Ext.field.Number-0","name":"Ext.field.Number example #1","href":"#!/api/Ext.field.Number","code":"Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'fieldset',\n            title: 'How old are you?',\n            items: [\n                {\n                    xtype: 'numberfield',\n                    label: 'Age',\n                    minValue: 18,\n                    maxValue: 150,\n                    name: 'age'\n                }\n            ]\n        }\n    ]\n});\n","options":{}},{"id":"Ext.field.Number-1","name":"Ext.field.Number example #2","href":"#!/api/Ext.field.Number","code":"Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'fieldset',\n            title: 'Are you rich yet?',\n            items: [\n                {\n                    xtype: 'numberfield',\n                    label: 'Salary',\n                    value: 30000,\n                    minValue: 25000,\n                    maxValue: 50000\n                }\n            ]\n        }\n    ]\n});\n","options":{}},{"id":"Ext.field.Panel-0","name":"Ext.field.Panel example #1","href":"#!/api/Ext.field.Panel","code":"var panel = Ext.create({\n     xtype: 'fieldpanel',\n     fullscreen: true,\n\n     items: [{\n         xtype: 'textfield',\n         name: 'name',\n         label: 'Name'\n     }, {\n         xtype: 'emailfield',\n         name: 'email',\n         label: 'Email'\n     }, {\n         xtype: 'passwordfield',\n         name: 'password',\n         label: 'Password'\n     }]\n });\n","options":{}},{"id":"Ext.field.Password-0","name":"Ext.field.Password example #1","href":"#!/api/Ext.field.Password","code":"Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'fieldset',\n            title: 'Register',\n            items: [\n                {\n                    xtype: 'emailfield',\n                    label: 'Email',\n                    name: 'email'\n                },\n                {\n                    xtype: 'passwordfield',\n                    label: 'Password',\n                    name: 'password'\n                }\n            ]\n        }\n    ]\n});\n","options":{}},{"id":"Ext.field.Radio-0","name":"Ext.field.Radio example #1","href":"#!/api/Ext.field.Radio","code":"var form = Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'radiofield',\n            name : 'color',\n            value: 'red',\n            label: 'Red',\n            checked: true\n        },\n        {\n            xtype: 'radiofield',\n            name : 'color',\n            value: 'green',\n            label: 'Green'\n        },\n        {\n            xtype: 'radiofield',\n            name : 'color',\n            value: 'blue',\n            label: 'Blue'\n        }\n    ]\n});\n","options":{}},{"id":"Ext.field.Search-0","name":"Ext.field.Search example #1","href":"#!/api/Ext.field.Search","code":"Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'fieldset',\n            title: 'Search',\n            items: [\n                {\n                    xtype: 'searchfield',\n                    label: 'Query',\n                    name: 'query'\n                }\n            ]\n        }\n    ]\n});\n","options":{}},{"id":"Ext.field.Select-0","name":"Ext.field.Select example #1","href":"#!/api/Ext.field.Select","code":"Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [{\n        xtype: 'fieldset',\n        title: 'Select',\n        items: [{\n            xtype: 'selectfield',\n            label: 'Choose one',\n            options: [{\n                text: 'First Option',\n                value: 'first'\n            }, {\n                text: 'Second Option',\n                value: 'second'\n            }, {\n                text: 'Third Option',\n                value: 'third'\n            }]\n        }]\n    }]\n});\n","options":{}},{"id":"Ext.field.Slider-0","name":"Ext.field.Slider example #1","href":"#!/api/Ext.field.Slider","code":"Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'sliderfield',\n            label: 'Percentage',\n            value: 50,\n            minValue: 0,\n            maxValue: 100\n        }\n    ]\n});\n","options":{}},{"id":"Ext.field.Slider-1","name":"Ext.field.Slider example #2","href":"#!/api/Ext.field.Slider","code":"Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'sliderfield',\n            label: 'Waist Measurement',\n            minValue: 24,\n            maxValue: 60,\n            increment: 2,\n            value: 32\n        }\n    ]\n});\n","options":{}},{"id":"Ext.field.Spinner-0","name":"Ext.field.Spinner example #1","href":"#!/api/Ext.field.Spinner","code":"var spinner = Ext.create('Ext.field.Spinner', {\n    label: 'Spinner Field',\n    minValue: 0,\n    maxValue: 100,\n    stepValue: 2,\n    cycle: true\n});\nExt.Viewport.add({ xtype: 'container', items: [spinner] });\n","options":{}},{"id":"Ext.field.Text-0","name":"Ext.field.Text example #1","href":"#!/api/Ext.field.Text","code":"Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'fieldset',\n            title: 'Enter your name',\n            items: [\n                {\n                    xtype: 'textfield',\n                    label: 'First Name',\n                    name: 'firstName'\n                },\n                {\n                    xtype: 'textfield',\n                    label: 'Last Name',\n                    name: 'lastName'\n                }\n            ]\n        }\n    ]\n});\n","options":{}},{"id":"Ext.field.TextArea-0","name":"Ext.field.TextArea example #1","href":"#!/api/Ext.field.TextArea","code":"Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'fieldset',\n            title: 'About you',\n            items: [\n                {\n                    xtype: 'textfield',\n                    label: 'Name',\n                    name: 'name'\n                },\n                {\n                    xtype: 'textareafield',\n                    label: 'Bio',\n                    maxRows: 4,\n                    name: 'bio'\n                }\n            ]\n        }\n    ]\n});\n","options":{}},{"id":"Ext.field.Toggle-0","name":"Ext.field.Toggle example #1","href":"#!/api/Ext.field.Toggle","code":"Ext.Viewport.add({\n    xtype: 'togglefield',\n    name: 'awesome',\n    label: 'Are you awesome?',\n    labelWidth: '40%'\n});\n","options":{}},{"id":"Ext.field.Toggle-1","name":"Ext.field.Toggle example #2","href":"#!/api/Ext.field.Toggle","code":"Ext.Viewport.add({\n    xtype: 'togglefield',\n    name: 'awesome',\n    value: 1,\n    label: 'Are you awesome?',\n    labelWidth: '40%'\n});\n","options":{}},{"id":"Ext.field.Toggle-2","name":"Ext.field.Toggle example #3","href":"#!/api/Ext.field.Toggle","code":"Ext.Viewport.add([\n    {\n        xtype: 'togglefield',\n        name: 'awesome',\n        value: 1,\n        label: 'Are you awesome?',\n        labelWidth: '40%'\n    },\n    {\n        xtype: 'toolbar',\n        docked: 'top',\n        items: [\n            {\n                xtype: 'button',\n                text: 'Toggle',\n                flex: 1,\n                handler: function() {\n                    Ext.ComponentQuery.query('togglefield')[0].toggle();\n                }\n            }\n        ]\n    }\n]);\n","options":{}},{"id":"Ext.field.Url-0","name":"Ext.field.Url example #1","href":"#!/api/Ext.field.Url","code":"Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'fieldset',\n            title: 'Add Bookmark',\n            items: [\n                {\n                    xtype: 'urlfield',\n                    label: 'Url',\n                    name: 'url'\n                }\n            ]\n        }\n    ]\n});\n","options":{}},{"id":"Ext.form.FieldSet-0","name":"Ext.form.FieldSet example #1","href":"#!/api/Ext.form.FieldSet","code":"Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'fieldset',\n            title: 'About You',\n            instructions: 'Tell us all about yourself',\n            items: [\n                {\n                    xtype: 'textfield',\n                    name : 'firstName',\n                    label: 'First Name'\n                },\n                {\n                    xtype: 'textfield',\n                    name : 'lastName',\n                    label: 'Last Name'\n                }\n            ]\n        }\n    ]\n});\n","options":{}},{"id":"Ext.grid.column.Boolean-0","name":"Ext.grid.column.Boolean example #1","href":"#!/api/Ext.grid.column.Boolean","code":"Ext.create('Ext.data.Store', {\n   storeId:'sampleStore',\n   fields:[\n       {name: 'framework', type: 'string'},\n       {name: 'rocks', type: 'boolean'}\n   ],\n   data:[\n       { framework: \"Ext JS\",     rocks: true  },\n       { framework: \"Ext GWT\",    rocks: true  },\n       { framework: \"Other Guys\", rocks: false }\n   ]\n});\n\nExt.create('Ext.grid.Grid', {\n    fullscreen: true,\n    store: Ext.data.StoreManager.lookup('sampleStore'),\n    columns: [\n        { text: 'Framework',  dataIndex: 'framework', flex: 1 },\n        {\n            xtype: 'booleancolumn',\n            text: 'Rocks',\n            trueText: 'Yes',\n            falseText: 'No',\n            dataIndex: 'rocks'\n        }\n    ],\n    height: 200,\n    width: 400\n});\n","options":{}},{"id":"Ext.grid.column.Column-0","name":"Ext.grid.column.Column example #1","href":"#!/api/Ext.grid.column.Column","code":"Ext.create({\n    xtype: 'grid',\n    title: 'Tree Grid Demo',\n    itemConfig: {\n        viewModel: true\n    },\n    store: {\n         data: [\n             {firstname:\"Michael\", lastname:\"Scott\", seniority:7, department:\"Management\", hired:\"01/10/2004\"},\n             {firstname:\"Dwight\", lastname:\"Schrute\", seniority:2, department:\"Sales\", hired:\"04/01/2004\"},\n             {firstname:\"Jim\", lastname:\"Halpert\", seniority:3, department:\"Sales\", hired:\"02/22/2006\"},\n             {firstname:\"Kevin\", lastname:\"Malone\", seniority:4, department:\"Accounting\", hired:\"06/10/2007\"},\n             {firstname:\"Angela\", lastname:\"Martin\", seniority:5, department:\"Accounting\", hired:\"10/21/2008\"}\n         ]\n    },\n    columns: [\n        {text: 'First Name',  dataIndex:'firstname'},\n        {text: 'Last Name',  dataIndex:'lastname'},\n        {text: 'Hired Month',  dataIndex:'hired'},\n        {\n            text: 'Department',\n            width: 200,\n            cell: {\n               bind: '{record.department} ({record.seniority})'\n            }\n        }\n    ],\n    width: 500,\n    fullscreen: true\n});\n","options":{}},{"id":"Ext.grid.column.Date-0","name":"Ext.grid.column.Date example #1","href":"#!/api/Ext.grid.column.Date","code":"var store = Ext.create('Ext.data.Store', {\n    fields:[\n        { name: 'symbol', type: 'string' },\n        { name: 'date',   type: 'date' },\n        { name: 'change', type: 'number' },\n        { name: 'volume', type: 'number' },\n        { name: 'topday', type: 'date' }\n    ],\n    data:[\n        { symbol: \"msft\",   date: '2011/04/22', change: 2.43, volume: 61606325, topday: '04/01/2010' },\n        { symbol: \"goog\",   date: '2011/04/22', change: 0.81, volume: 3053782,  topday: '04/11/2010' },\n        { symbol: \"apple\",  date: '2011/04/22', change: 1.35, volume: 24484858, topday: '04/28/2010' },\n        { symbol: \"sencha\", date: '2011/04/22', change: 8.85, volume: 5556351,  topday: '04/22/2010' }\n    ]\n});\n\nExt.create('Ext.grid.Grid', {\n    title: 'Date Column Demo',\n    store: store,\n    columns: [\n        { text: 'Symbol',   dataIndex: 'symbol', flex: 1 },\n        { text: 'Date',     dataIndex: 'date',   xtype: 'datecolumn',   format:'Y-m-d' },\n        { text: 'Change',   dataIndex: 'change', xtype: 'numbercolumn', format:'0.00' },\n        { text: 'Volume',   dataIndex: 'volume', xtype: 'numbercolumn', format:'0,000' },\n        { text: 'Top Day',  dataIndex: 'topday', xtype: 'datecolumn',   format:'l' }\n    ],\n    height: 200,\n    width: 450\n});\n","options":{}},{"id":"Ext.grid.column.Number-0","name":"Ext.grid.column.Number example #1","href":"#!/api/Ext.grid.column.Number","code":"Ext.create('Ext.data.Store', {\n   storeId:'sampleStore',\n   fields:[\n       { name: 'symbol', type: 'string' },\n       { name: 'price',  type: 'number' },\n       { name: 'change', type: 'number' },\n       { name: 'volume', type: 'number' }\n   ],\n   data:[\n       { symbol: \"msft\",   price: 25.76,  change: 2.43, volume: 61606325 },\n       { symbol: \"goog\",   price: 525.73, change: 0.81, volume: 3053782  },\n       { symbol: \"apple\",  price: 342.41, change: 1.35, volume: 24484858 },\n       { symbol: \"sencha\", price: 142.08, change: 8.85, volume: 5556351  }\n   ]\n});\n\nExt.create('Ext.grid.Grid', {\n    title: 'Number Column Demo',\n    store: Ext.data.StoreManager.lookup('sampleStore'),\n    columns: [\n        { text: 'Symbol', dataIndex: 'symbol', width: 100},\n        { text: 'Price',  dataIndex: 'price',  formatter: 'usMoney' },\n        { text: 'Change', dataIndex: 'change', xtype: 'numbercolumn', format:'0.00' },\n        { text: 'Volume', dataIndex: 'volume', xtype: 'numbercolumn', format:'0,000' }\n    ],\n    height: 200,\n    width: 400\n});\n","options":{}},{"id":"Ext.grid.plugin.CellEditing-0","name":"Ext.grid.plugin.CellEditing example #1","href":"#!/api/Ext.grid.plugin.CellEditing","code":"var store = Ext.create('Ext.data.Store', {\n    fields: ['fname', 'lname', 'talent'],\n    data: [\n        { 'fname': 'Barry',  'lname': 'Allen', 'talent': 'Speedster'},\n        { 'fname': 'Oliver', 'lname': 'Queen', 'talent': 'Archery'},\n        { 'fname': 'Kara',   'lname': 'Zor-El', 'talent': 'All'},\n        { 'fname': 'Helena', 'lname': 'Bertinelli', 'talent': 'Weapons Expert'},\n        { 'fname': 'Hal',    'lname': 'Jordan', 'talent': 'Willpower'  },\n    ]\n});\n\nExt.create('Ext.grid.Grid', {\n    title: 'DC Personnel',\n\n    store: store,\n    plugins: {\n        cellediting: true\n    },\n    columns: [\n        { text: 'First Name', dataIndex: 'fname',  flex: 1, editable: true },\n        { text: 'Last Name',  dataIndex: 'lname',  flex: 1 },\n        { text: 'Talent',     dataIndex: 'talent', flex: 1 }\n    ],\n    fullscreen: true\n});\n","options":{}},{"id":"Ext.grid.plugin.ColumnResizing-0","name":"Ext.grid.plugin.ColumnResizing example #1","href":"#!/api/Ext.grid.plugin.ColumnResizing","code":"var store = Ext.create('Ext.data.Store', {\n    data: [\n        { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n        { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n        { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n        { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n    ]\n});\n\nExt.create('Ext.grid.Grid', {\n    fullscreen: true,\n    layout: 'fit',\n    store: store,\n    plugins: {\n        columnresizing: true\n    },\n    columns: [{\n        text: \"Name\",\n        dataIndex: \"name\",\n        flex: 1\n    },\n    {\n        text: \"Email\",\n        dataIndex: \"email\",\n        flex: 1\n    },\n    {\n        text: \"Phone\",\n        dataIndex: \"phone\",\n        flex: 1\n    }]\n});\n","options":{}},{"id":"Ext.grid.plugin.Editable-0","name":"Ext.grid.plugin.Editable example #1","href":"#!/api/Ext.grid.plugin.Editable","code":"Ext.create({\n    xtype: 'grid',\n    fullscreen: true,\n    plugins: {\n        grideditable: true\n    },\n    store: {\n        fields: [],\n        data: [{\n            name: 'Jake'\n        }, {\n            name: 'Finn'\n        }]\n    },\n    columns: [{\n        text: 'Name',\n        dataIndex: 'name',\n        flex: 1,\n        editable: true\n    }]\n});\n","options":{}},{"id":"Ext.grid.plugin.Editable-1","name":"Ext.grid.plugin.Editable example #2","href":"#!/api/Ext.grid.plugin.Editable","code":"Ext.create({\n    xtype: 'grid',\n    fullscreen: true,\n    plugins: {\n        grideditable: {\n            triggerEvent: 'childdoubletap',\n            enableDeleteButton: true,\n            formConfig: null, // See more below\n\n            defaultFormConfig: {\n                xtype: 'formpanel',\n                scrollable: true,\n                items: [{\n                    xtype: 'fieldset'\n                }]\n            },\n\n            toolbarConfig: {\n                xtype: 'titlebar',\n                docked: 'top',\n                items: [{\n                    xtype: 'button',\n                    ui: 'decline',\n                    text: 'Cancel',\n                    align: 'left',\n                    action: 'cancel'\n                }, {\n                    xtype: 'button',\n                    ui: 'confirm',\n                    text: 'Submit',\n                    align: 'right',\n                    action: 'submit'\n                }]\n            },\n        }\n    },\n    store: {\n        fields: [],\n        data: [{\n            name: 'Jake'\n        }, {\n            name: 'Finn'\n        }]\n    },\n    columns: [{\n        text: 'Name',\n        dataIndex: 'name',\n        flex: 1,\n        editable: true\n    }]\n});\n","options":{}},{"id":"Ext.grid.plugin.PagingToolbar-0","name":"Ext.grid.plugin.PagingToolbar example #1","href":"#!/api/Ext.grid.plugin.PagingToolbar","code":"var store = Ext.create('Ext.data.Store', {\n    fields: ['fname', 'lname', 'talent'],\n    pageSize: 3,\n    data: [\n        { 'fname': 'Barry',  'lname': 'Allen',      'talent': 'Speedster' },\n        { 'fname': 'Oliver', 'lname': 'Queen',      'talent': 'Archery'  },\n        { 'fname': 'Kara',   'lname': 'Zor-El',     'talent': 'All'  },\n        { 'fname': 'Helena', 'lname': 'Bertinelli', 'talent': 'Weapons Expert'  },\n        { 'fname': 'Hal',    'lname': 'Jordan',     'talent': 'Willpower'  },\n    ]\n});\n\nExt.create('Ext.grid.Grid', {\n    title: 'DC Personnel',\n\n    store: store,\n    plugins: {\n        pagingtoolbar: true\n    },\n\n    columns: [\n        { text: 'First Name', dataIndex: 'fname',  flex: 1 },\n        { text: 'Last Name',  dataIndex: 'lname',  flex: 1 },\n        { text: 'Talent',     dataIndex: 'talent', flex: 1 }\n    ],\n\n    height: 230,\n    layout: 'fit',\n    fullscreen: true\n});\n","options":{}},{"id":"Ext.grid.plugin.RowExpander-0","name":"Ext.grid.plugin.RowExpander example #1","href":"#!/api/Ext.grid.plugin.RowExpander","code":"var store = Ext.create('Ext.data.Store', {\n    fields: ['fname', 'lname', 'talent', 'powers'],\n    groupField: 'powers',\n    data: [\n        { 'fname': 'Barry',  'lname': 'Allen', 'talent': 'Speedster', 'powers': true  },\n        { 'fname': 'Oliver', 'lname': 'Queen', 'talent': 'Archery', 'powers': false  },\n        { 'fname': 'Kara',   'lname': 'Zor-El', 'talent': 'All', 'powers': true  },\n        { 'fname': 'Helena', 'lname': 'Bertinelli', 'talent': 'Weapons Expert', 'powers': false  },\n        { 'fname': 'Hal',    'lname': 'Jordan', 'talent': 'Willpower', 'powers': true  },\n    ]\n});\n\nExt.create('Ext.grid.Grid', {\n    title: 'DC Personnel',\n    grouped: true,\n    store: store,\n    plugins: {\n        rowexpander: true\n    },\n    itemConfig: {\n        body: {\n            tpl: '<img height=\"100\" src=\"http://www.sencha.com/assets/images/sencha-avatar-64x64.png\"/>'\n        }\n    },\n    columns: [\n        { text: 'First Name', dataIndex: 'fname',  flex: 1 },\n        { text: 'Last Name',  dataIndex: 'lname',  flex: 1 },\n        { text: 'Talent',     dataIndex: 'talent', flex: 1 },\n        { text: 'Powers?',    dataIndex: 'powers', flex: 1 }\n    ],\n    height: 400,\n    layout: 'fit',\n    fullscreen: true\n});\n","options":{}},{"id":"Ext.grid.plugin.ViewOptions-0","name":"Ext.grid.plugin.ViewOptions example #1","href":"#!/api/Ext.grid.plugin.ViewOptions","code":"var store = Ext.create('Ext.data.Store', {\n    fields: ['name', 'email', 'phone'],\n    data: [{\n        name: 'Lisa',\n        email: 'lisa@simpsons.com',\n        phone: '555-111-1224'\n    }, {\n        name: 'Bart',\n        email: 'bart@simpsons.com',\n        phone: '555-111-1234'\n    }, {\n        name: 'Homer',\n        email: 'homer@simpsons.com',\n        phone: '555-222-1244'\n    }, {\n        name: 'Marge',\n        email: 'marge@simpsons.com',\n        phone: '555-222-1254'\n    }]\n});\n\nExt.create('Ext.grid.Grid', {\n    store: store,\n    plugins: {\n        gridviewoptions: true\n    },\n    columns: [{\n        text: 'Name',\n        dataIndex: 'name',\n        width: 200\n    }, {\n        text: 'Email',\n        dataIndex: 'email',\n        width: 250\n    }, {\n        text: 'Phone',\n        dataIndex: 'phone',\n        width: 120\n    }],\n    fullscreen: true\n});\n","options":{}},{"id":"Ext.grid.selection.Model-0","name":"Ext.grid.selection.Model example #1","href":"#!/api/Ext.grid.selection.Model","code":"Ext.create({\n    xtype: 'grid',\n    title: 'Simpsons',\n    store: [{\n        name: 'Lisa',\n        email: 'lisa@simpsons.com',\n        phone: '555-111-1224'\n    }, {\n        name: 'Bart',\n        email: 'bart@simpsons.com',\n        phone: '555-222-1234'\n    }, {\n        name: 'Homer',\n        email: 'homer@simpsons.com',\n        phone: '555-222-1244'\n    }],\n    width: 400,\n    height: 300,\n    renderTo: Ext.getBody(),\n    columns: [{\n        text: 'Name',\n        dataIndex: 'name'\n    }, {\n        text: 'Email',\n        dataIndex: 'email',\n        flex: 1\n    }, {\n        text: 'Phone',\n        dataIndex: 'phone'\n    }],\n    selectable: {\n        columns: false, // Can select cells and rows, but not columns\n        extensible: true // Uses the draggable selection extender\n    }\n});\n","options":{}},{"id":"Ext.Img-0","name":"Ext.Img example #1","href":"#!/api/Ext.Img","code":"var img = Ext.create('Ext.Img', {\n    src: 'http://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n    height: 64,\n    width: 64\n});\nExt.Viewport.add(img);\n","options":{}},{"id":"Ext.Img-1","name":"Ext.Img example #2","href":"#!/api/Ext.Img","code":"Ext.create('Ext.Panel', {\n    fullscreen: true,\n    layout: 'hbox',\n    items: [\n        {\n            xtype: 'image',\n            src: 'http://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n            flex: 1\n        },\n        {\n            xtype: 'panel',\n            flex: 2,\n            html: 'Sencha Inc.<br/>1700 Seaport Boulevard Suite 120, Redwood City, CA'\n        }\n    ]\n});\n","options":{}},{"id":"Ext.Label-0","name":"Ext.Label example #1","href":"#!/api/Ext.Label","code":"Ext.Viewport.add({\n    xtype: 'label',\n    html: 'My label!'\n});\n","options":{}},{"id":"Ext.layout.Fit-0","name":"Ext.layout.Fit example #1","href":"#!/api/Ext.layout.Fit","code":"var panel = Ext.create('Ext.Panel', {\n    title: 'Fit Layout',\n    width: 300,\n    height: 150,\n    layout:'fit',\n    items: {\n        title: 'Inner Panel',\n        html: 'This is the inner panel content',\n        bodyPadding: 20,\n        border: false\n    }\n});\n\nExt.Viewport.add(panel);\n","options":{}},{"id":"Ext.layout.Form-0","name":"Ext.layout.Form example #1","href":"#!/api/Ext.layout.Form","code":"Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    layout: 'form',\n    items: [\n        {\n            xtype: 'textfield',\n            label: 'First Name'\n        },\n        {\n            xtype: 'textfield',\n            label: 'Last Name'\n        },\n        {\n            xtype: 'textfield',\n            label: 'Bank Account Number'\n        },\n        {\n            xtype: 'checkboxfield',\n            label: 'Approved'\n        }\n    ]\n});\n","options":{}},{"id":"Ext.layout.HBox-0","name":"Ext.layout.HBox example #1","href":"#!/api/Ext.layout.HBox","code":"Ext.create('Ext.Container', {\n    fullscreen: true,\n    layout: 'hbox',\n    items: [\n        {\n            html: 'message list',\n            style: 'background-color: #5E99CC;',\n            flex: 1\n        },\n        {\n            html: 'message preview',\n            style: 'background-color: #759E60;',\n            flex: 2\n        }\n    ]\n});\n","options":{}},{"id":"Ext.layout.HBox-1","name":"Ext.layout.HBox example #2","href":"#!/api/Ext.layout.HBox","code":"Ext.create('Ext.Container', {\n    fullscreen: true,\n    layout: 'hbox',\n    items: [\n        {\n            html: 'Left item',\n            style: 'background-color: #759E60;',\n            flex: 1\n        },\n        {\n            html: 'Center item',\n            width: 100\n        },\n        {\n            html: 'Right item',\n            style: 'background-color: #5E99CC;',\n            flex: 1\n        }\n    ]\n});\n","options":{}},{"id":"Ext.layout.VBox-0","name":"Ext.layout.VBox example #1","href":"#!/api/Ext.layout.VBox","code":"Ext.create('Ext.Container', {\n    fullscreen: true,\n    layout: 'vbox',\n    items: [\n        {\n            html: 'Awesome banner',\n            style: 'background-color: #759E60;',\n            flex: 1\n        },\n        {\n            html: 'Some wonderful information',\n            style: 'background-color: #5E99CC;',\n            flex: 2\n        }\n    ]\n});\n","options":{}},{"id":"Ext.layout.VBox-1","name":"Ext.layout.VBox example #2","href":"#!/api/Ext.layout.VBox","code":"Ext.create('Ext.Container', {\n    fullscreen: true,\n    layout: 'vbox',\n    items: [\n        {\n            html: 'Top item',\n            style: 'background-color: #5E99CC;',\n            flex: 1\n        },\n        {\n            html: 'Center item',\n            height: 100\n        },\n        {\n            html: 'Bottom item',\n            style: 'background-color: #759E60;',\n            flex: 1\n        }\n    ]\n});\n","options":{}},{"id":"Ext.LoadMask-0","name":"Ext.LoadMask example #1","href":"#!/api/Ext.LoadMask","code":"Ext.Viewport.add({\n    masked: {\n       xtype: 'loadmask'\n    }\n});\n","options":{}},{"id":"Ext.LoadMask-1","name":"Ext.LoadMask example #2","href":"#!/api/Ext.LoadMask","code":"Ext.Viewport.add({\n    masked: {\n       xtype: 'loadmask',\n       message: 'A message..',\n       indicator: false\n    }\n});\n","options":{}},{"id":"Ext.Mask-0","name":"Ext.Mask example #1","href":"#!/api/Ext.Mask","code":"// Create our container\nvar container = Ext.create('Ext.Container', {\n    html: 'My container!'\n});\n\n// Add the container to the Viewport\nExt.Viewport.add(container);\n\n// Mask the container\ncontainer.setMasked(true);\n","options":{}},{"id":"Ext.menu.CheckItem-0","name":"Ext.menu.CheckItem example #1","href":"#!/api/Ext.menu.CheckItem","code":"Ext.create({\n     xtype: 'menu',\n     renderTo: Ext.getBody(),\n     width: 100,\n     items: [{\n         xtype: 'menucheckitem',\n         text: 'select all'\n     },{\n         xtype: 'menucheckitem',\n         text: 'select specific'\n     },{\n         iconCls: 'add16',\n         text: 'icon item'\n     },{\n         text: 'regular item'\n     }]\n });\n","options":{}},{"id":"Ext.menu.Item-0","name":"Ext.menu.Item example #1","href":"#!/api/Ext.menu.Item","code":"var mainPanel = Ext.create('Ext.Panel', {\n    fullscreen: true,\n\n    items: {\n        xtype: 'menu',\n        floated: false,\n        docked: 'left',\n        items: [{\n            text: 'regular item 1'\n        },{\n            text: 'regular item 2'\n        },{\n            text: 'regular item 3'\n        }]\n    }\n});\n","options":{}},{"id":"Ext.menu.Menu-0","name":"Ext.menu.Menu example #1","href":"#!/api/Ext.menu.Menu","code":"var mainPanel = Ext.create('Ext.Panel', {\n    fullscreen: true,\n\n    items: {\n        xtype: 'menu',\n        floated: false,\n        docked: 'left',\n        items: [{\n            text: 'regular item 1'\n        },{\n            text: 'regular item 2'\n        },{\n            text: 'regular item 3'\n        }]\n    }\n});\n","options":{}},{"id":"Ext.menu.RadioItem-0","name":"Ext.menu.RadioItem example #1","href":"#!/api/Ext.menu.RadioItem","code":"Ext.Viewport.add({\n     xtype: 'container',\n     items: [{\n         xtype: 'button',\n         bind: 'Call {menuGroups.option}',\n\n         viewModel: {\n             data: {\n                 menuGroups: {\n                     option: 'home'\n                 }\n             }\n         },\n\n         menu: {\n             bind: {\n                 groups: '{menuGroups}'\n             },\n             items: [{\n                 text: 'Home',\n                 group: 'option',  // causes Menu to create this class of item\n                 value: 'home'\n             }, {\n                 text: 'Work',\n                 group: 'option',\n                 value: 'work'\n             }, {\n                 text: 'Mobile',\n                 group: 'option',\n                 value: 'mobile'\n             }]\n         }\n     }]\n });\n","options":{}},{"id":"Ext.menu.Separator-0","name":"Ext.menu.Separator example #1","href":"#!/api/Ext.menu.Separator","code":"Ext.create('Ext.Panel', {\n    fullscreen: true,\n\n    items: {\n        xtype: 'menu',\n        floated: false,\n        docked: 'top',\n        items: [{\n            text: 'Galactus'\n        },{\n            xtype: 'menuseparator'\n        },{\n            text: 'Darkseid'\n        },{\n            text: 'Thanos'\n        }]\n    }\n});\n","options":{}},{"id":"Ext.MessageBox-0","name":"Ext.MessageBox example #1","href":"#!/api/Ext.MessageBox","code":"Ext.Msg.alert('Title', 'The quick brown fox jumped over the lazy dog.', Ext.emptyFn);\n","options":{}},{"id":"Ext.Msg-0","name":"Ext.Msg example #1","href":"#!/api/Ext.Msg","code":"Ext.Msg.alert('Title', 'The quick brown fox jumped over the lazy dog.', Ext.emptyFn);\n","options":{}},{"id":"Ext.Msg-1","name":"Ext.Msg example #2","href":"#!/api/Ext.Msg","code":"Ext.Msg.prompt('Name', 'Please enter your name:', function(text) {\n    // process text value and close...\n});\n","options":{}},{"id":"Ext.Msg-2","name":"Ext.Msg example #3","href":"#!/api/Ext.Msg","code":"Ext.Msg.confirm(\"Confirmation\", \"Are you sure you want to do that?\", Ext.emptyFn);\n","options":{}},{"id":"Ext.navigation.View-0","name":"Ext.navigation.View example #1","href":"#!/api/Ext.navigation.View","code":"var view = Ext.create('Ext.NavigationView', {\n    fullscreen: true,\n\n    items: [{\n        title: 'First',\n        items: [{\n            xtype: 'button',\n            text: 'Push a new view!',\n            handler: function() {\n                // use the push() method to push another view. It works much like\n                // add() or setActiveItem(). it accepts a view instance, or you can give it\n                // a view config.\n                view.push({\n                    title: 'Second',\n                    html: 'Second view!'\n                });\n            }\n        }]\n    }]\n});\n","options":{}},{"id":"Ext.Panel-0","name":"Ext.Panel example #1","href":"#!/api/Ext.Panel","code":"Ext.create({\n    xtype: 'panel',\n    title: 'Panel Title',\n    iconCls: 'x-fa fa-html5',\n    height: 400,\n    width: 400,\n    bodyPadding: 12,\n    html: 'Sample HTML text',\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.Panel-1","name":"Ext.Panel example #2","href":"#!/api/Ext.Panel","code":"Ext.create({\n    xtype: 'panel',\n    bodyPadding: true, // don't want content to crunch against the borders\n    width: 300,\n    title: 'Filters',\n    items: [{\n        xtype: 'datefield',\n        label: 'Start date'\n    }, {\n        xtype: 'datefield',\n        label: 'End date'\n    }],\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.Panel-2","name":"Ext.Panel example #3","href":"#!/api/Ext.Panel","code":"var panel = Ext.create({\n    xtype: 'panel',\n    title: 'Floated',\n    bodyPadding: true,\n    html: 'context panel text',\n    // the panel will be hidden until shown\n    floated: true,\n    // adds the close tool in the panel header\n    closable: true,\n    // hides, rather than destroys the closed panel\n    closeAction: 'hide',\n    anchor: true\n});\n\nExt.create({\n    xtype: 'button',\n    text: 'Show Popup',\n    margin: 20,\n    // shows the floated panel next to the button\n    handler: function () {\n        panel.showBy(this, 'tl-bl');\n    },\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.picker.Date-0","name":"Ext.picker.Date example #1","href":"#!/api/Ext.picker.Date","code":"var datePicker = Ext.create('Ext.picker.Date');\nExt.Viewport.add(datePicker);\ndatePicker.show();\n","options":{}},{"id":"Ext.picker.Date-1","name":"Ext.picker.Date example #2","href":"#!/api/Ext.picker.Date","code":"var datePicker = Ext.create('Ext.picker.Date', {\n    yearFrom: 2000,\n    yearTo  : 2015\n});\nExt.Viewport.add(datePicker);\ndatePicker.show();\n","options":{}},{"id":"Ext.picker.Date-2","name":"Ext.picker.Date example #3","href":"#!/api/Ext.picker.Date","code":"var datePicker = Ext.create('Ext.picker.Date', {\n    value: new Date()\n});\nExt.Viewport.add(datePicker);\ndatePicker.show();\n","options":{}},{"id":"Ext.picker.Date-3","name":"Ext.picker.Date example #4","href":"#!/api/Ext.picker.Date","code":"var datePicker = Ext.create('Ext.picker.Date', {\n    useTitles: false\n});\nExt.Viewport.add(datePicker);\ndatePicker.show();\n","options":{}},{"id":"Ext.picker.Picker-0","name":"Ext.picker.Picker example #1","href":"#!/api/Ext.picker.Picker","code":"var picker = Ext.create('Ext.Picker', {\n    slots: [\n        {\n            name : 'limit_speed',\n            title: 'Speed',\n            data : [\n                {text: '50 KB/s', value: 50},\n                {text: '100 KB/s', value: 100},\n                {text: '200 KB/s', value: 200},\n                {text: '300 KB/s', value: 300}\n            ]\n        }\n    ]\n});\nExt.Viewport.add(picker);\npicker.show();\n","options":{}},{"id":"Ext.picker.Picker-1","name":"Ext.picker.Picker example #2","href":"#!/api/Ext.picker.Picker","code":"var picker = Ext.create('Ext.Picker', {\n    doneButton: 'I\\'m done!',\n    cancelButton: false,\n    slots: [\n        {\n            name : 'limit_speed',\n            title: 'Speed',\n            data : [\n                {text: '50 KB/s', value: 50},\n                {text: '100 KB/s', value: 100},\n                {text: '200 KB/s', value: 200},\n                {text: '300 KB/s', value: 300}\n            ]\n        }\n    ]\n});\nExt.Viewport.add(picker);\npicker.show();\n","options":{}},{"id":"Ext.picker.Picker-2","name":"Ext.picker.Picker example #3","href":"#!/api/Ext.picker.Picker","code":"var picker = Ext.create('Ext.Picker', {\n    doneButton: false,\n    cancelButton: false,\n    toolbar: {\n        ui: 'light',\n        title: 'My Picker!'\n    },\n    slots: [\n        {\n            name : 'limit_speed',\n            title: 'Speed',\n            data : [\n                {text: '50 KB/s', value: 50},\n                {text: '100 KB/s', value: 100},\n                {text: '200 KB/s', value: 200},\n                {text: '300 KB/s', value: 300}\n            ]\n        }\n    ]\n});\nExt.Viewport.add(picker);\npicker.show();\n","options":{}},{"id":"Ext.SegmentedButton-0","name":"Ext.SegmentedButton example #1","href":"#!/api/Ext.SegmentedButton","code":"var segmentedButton = Ext.create('Ext.SegmentedButton', {\n    allowMultiple: true,\n    items: [\n        {\n            text: 'Option 1'\n        },\n        {\n            text: 'Option 2',\n            pressed: true\n        },\n        {\n            text: 'Option 3'\n        }\n    ],\n    listeners: {\n        toggle: function(container, button, pressed){\n            alert(\"User toggled the '\" + button.getText() + \"' button: \" + (pressed ? 'on' : 'off'));\n        }\n    }\n});\nExt.Viewport.add({ xtype: 'container', padding: 10, items: [segmentedButton] });\n","options":{}},{"id":"Ext.slider.Slider-0","name":"Ext.slider.Slider example #1","href":"#!/api/Ext.slider.Slider","code":"Ext.create({\n    xtype: 'container',\n    fullscreen: true,\n    padding: 20,\n\n    items: [{\n        xtype: 'slider',\n        value: 42\n    }]\n});\n","options":{}},{"id":"Ext.slider.Slider-1","name":"Ext.slider.Slider example #2","href":"#!/api/Ext.slider.Slider","code":"Ext.create({\n    xtype: 'container',\n    fullscreen: true,\n    padding: 20,\n\n    layout: {\n        type: 'hbox',\n        pack: 'center'\n    },\n\n    viewModel: {\n        data: {\n            value: 42\n        }\n    },\n\n    items: [{\n        xtype: 'slider',\n        value: '{value}'\n    }, {\n        xtype: 'label',\n        bind: '{value}'\n    }]\n})\n","options":{}},{"id":"Ext.Spacer-0","name":"Ext.Spacer example #1","href":"#!/api/Ext.Spacer","code":"Ext.create('Ext.Container', {\n    fullscreen: true,\n    items: [\n        {\n            xtype : 'toolbar',\n            docked: 'top',\n            items: [\n                {\n                    xtype: 'button',\n                    text : 'Button One'\n                },\n                {\n                    xtype: 'spacer'\n                },\n                {\n                    xtype: 'button',\n                    text : 'Button Two'\n                }\n            ]\n        }\n    ]\n});\n","options":{}},{"id":"Ext.Spacer-1","name":"Ext.Spacer example #2","href":"#!/api/Ext.Spacer","code":"Ext.create('Ext.Container', {\n    fullscreen: true,\n    layout: {\n        type: 'vbox',\n        pack: 'center',\n        align: 'stretch'\n    },\n    items: [\n        {\n            xtype : 'toolbar',\n            docked: 'top',\n            items: [\n                {\n                    xtype: 'button',\n                    text : 'Button One'\n                },\n                {\n                    xtype: 'spacer',\n                    width: 50\n                },\n                {\n                    xtype: 'button',\n                    text : 'Button Two'\n                }\n            ]\n        },\n        {\n            xtype: 'container',\n            items: [\n                {\n                    xtype: 'button',\n                    text : 'Change Ext.Spacer width',\n                    handler: function() {\n                        //get the spacer using ComponentQuery\n                        var spacer = Ext.ComponentQuery.query('spacer')[0],\n                            from = 10,\n                            to = 250;\n\n                        //set the width to a random number\n                        spacer.setWidth(Math.floor(Math.random() * (to - from + 1) + from));\n                    }\n                }\n            ]\n        }\n    ]\n});\n","options":{}},{"id":"Ext.Spacer-2","name":"Ext.Spacer example #3","href":"#!/api/Ext.Spacer","code":"Ext.create('Ext.Container', {\n    fullscreen: true,\n    items: [\n        {\n            xtype : 'toolbar',\n            docked: 'top',\n            items: [\n                {\n                    xtype: 'button',\n                    text : 'Button One'\n                },\n                {\n                    xtype: 'spacer'\n                },\n                {\n                    xtype: 'button',\n                    text : 'Button Two'\n                },\n                {\n                    xtype: 'spacer',\n                    width: 20\n                },\n                {\n                    xtype: 'button',\n                    text : 'Button Three'\n                }\n            ]\n        }\n    ]\n});\n","options":{}},{"id":"Ext.tab.Panel-0","name":"Ext.tab.Panel example #1","href":"#!/api/Ext.tab.Panel","code":"Ext.create('Ext.TabPanel', {\n    fullscreen: true,\n    tabBarPosition: 'bottom',\n\n    items: [\n        {\n            title: 'Home',\n            iconCls: 'home',\n            html: 'Home Screen'\n        },\n        {\n            title: 'Contact',\n            iconCls: 'user',\n            html: 'Contact Screen'\n        }\n    ]\n});\n","options":{}},{"id":"Ext.tab.Panel-1","name":"Ext.tab.Panel example #2","href":"#!/api/Ext.tab.Panel","code":"Ext.create('Ext.TabPanel', {\n    fullscreen: true,\n\n    items: [\n        {\n            title: 'Home',\n            html: 'Home Screen'\n        },\n        {\n            title: 'Contact',\n            html: 'Contact Screen'\n        }\n    ]\n});\n","options":{}},{"id":"Ext.TitleBar-0","name":"Ext.TitleBar example #1","href":"#!/api/Ext.TitleBar","code":"Ext.Viewport.add({\n    xtype: 'titlebar',\n    docked: 'top',\n    title: 'Navigation',\n    items: [\n        {\n            iconCls: 'add',\n            align: 'left'\n        },\n        {\n            iconCls: 'home',\n            align: 'right'\n        }\n    ]\n});\n\nExt.Viewport.setHtml('This shows the title being centered and buttons using align <i>left</i> and <i>right</i>.');\n","options":{}},{"id":"Ext.TitleBar-1","name":"Ext.TitleBar example #2","href":"#!/api/Ext.TitleBar","code":"Ext.Viewport.add({\n    xtype: 'titlebar',\n    docked: 'top',\n    title: 'Navigation',\n    items: [\n        {\n            align: 'left',\n            text: 'This button has a super long title'\n        },\n        {\n            iconCls: 'home',\n            align: 'right'\n        }\n    ]\n});\n\nExt.Viewport.setHtml('This shows how the title is automatically moved to the right when one of the aligned buttons is very wide.');\n","options":{}},{"id":"Ext.TitleBar-2","name":"Ext.TitleBar example #3","href":"#!/api/Ext.TitleBar","code":"Ext.Viewport.add({\n    xtype: 'titlebar',\n    docked: 'top',\n    title: 'A very long title',\n    items: [\n        {\n            align: 'left',\n            text: 'This button has a super long title'\n        },\n        {\n            align: 'right',\n            text: 'Another button'\n        }\n    ]\n});\n\nExt.Viewport.setHtml('This shows how the title and buttons will automatically adjust their size when the width of the items are too wide..');\n","options":{}},{"id":"Ext.Toast-0","name":"Ext.Toast example #1","href":"#!/api/Ext.Toast","code":"// Toast will close in 1000 milliseconds (default)\n Ext.toast('Hello Sencha!');\n","options":{}},{"id":"Ext.Toast-1","name":"Ext.Toast example #2","href":"#!/api/Ext.Toast","code":"// Toast will close in 5000 milliseconds\n Ext.toast('Hello Sencha!', 5000);\n","options":{}},{"id":"Ext.Toast-2","name":"Ext.Toast example #3","href":"#!/api/Ext.Toast","code":"// Toast will close in 2000 milliseconds\n Ext.toast({message: 'Hello Sencha!', timeout: 2000});\n","options":{}},{"id":"Ext.Toast-3","name":"Ext.Toast example #4","href":"#!/api/Ext.Toast","code":"Ext.toast('Hello Sencha!');\n Ext.toast('Hello Sencha Again!');\n Ext.toast('Hello Sencha One More Time!');\n","options":{}},{"id":"Ext.Tool-0","name":"Ext.Tool example #1","href":"#!/api/Ext.Tool","code":"Ext.create('Ext.Panel', {\n    title: 'A Panel',\n    fullscreen: true,\n\n    tools: [{\n        type: 'help',\n        handler: function() {\n            // show help here\n        }\n    }, {\n        itemId: 'refresh',\n        type: 'refresh',\n        hidden: true,\n        handler: function () {\n            // do refresh\n        }\n    }, {\n        type: 'search',\n        handler: function (panel) {\n            // do search\n            panel.down('#refresh').show();\n        }\n    }]\n});\n","options":{}},{"id":"Ext.Toolbar-0","name":"Ext.Toolbar example #1","href":"#!/api/Ext.Toolbar","code":"Ext.create('Ext.Container', {\n    fullscreen: true,\n    layout: {\n        type: 'vbox',\n        pack: 'center'\n    },\n    items: [\n        {\n            xtype : 'toolbar',\n            docked: 'top',\n            title: 'My Toolbar'\n        },\n        {\n            xtype: 'container',\n            defaults: {\n                xtype: 'button',\n                margin: '10 10 0 10'\n            },\n            items: [\n                {\n                    text: 'Toggle docked',\n                    handler: function() {\n                        var toolbar = Ext.ComponentQuery.query('toolbar')[0],\n                            newDocked = (toolbar.getDocked() === 'top') ? 'bottom' : 'top';\n\n                        toolbar.setDocked(newDocked);\n                    }\n                },\n                {\n                    text: 'Toggle UI',\n                    handler: function() {\n                        var toolbar = Ext.ComponentQuery.query('toolbar')[0],\n                            newUi = (toolbar.getUi() === 'light') ? 'dark' : 'light';\n\n                        toolbar.setUi(newUi);\n                    }\n                },\n                {\n                    text: 'Change title',\n                    handler: function() {\n                        var toolbar = Ext.ComponentQuery.query('toolbar')[0],\n                            titles = ['My Toolbar', 'Ext.Toolbar', 'Configurations are awesome!', 'Beautiful.'],\n                               //internally, the title configuration gets converted into a Ext.Title component,\n                               //so you must get the title configuration of that component\n                            title = toolbar.getTitle().getTitle(),\n                            newTitle = titles[titles.indexOf(title) + 1] || titles[0];\n\n                        toolbar.setTitle(newTitle);\n                    }\n                }\n            ]\n        }\n    ]\n});\n","options":{}},{"id":"Ext.Viewport-0","name":"Ext.Viewport example #1","href":"#!/api/Ext.Viewport","code":"Ext.application({\n    name: 'MyApp',\n\n    launch: function() {\n        Ext.Viewport.add({\n            xtype: 'panel',\n            title: 'New Panel',\n            html: 'My new panel!'\n        });\n    }\n});\n","options":{"raw":true}},{"id":"Ext.Viewport-1","name":"Ext.Viewport example #2","href":"#!/api/Ext.Viewport","code":"Ext.application({\n    name: 'MyApp',\n\n    viewport: {\n        layout: 'vbox'\n    },\n\n    launch: function() {\n        Ext.Viewport.add([{\n            xtype: 'panel',\n            flex: 1,\n            title: 'Top Panel',\n            html: 'The top panel'\n        }, {\n            xtype: 'panel',\n            flex: 1,\n            title: 'Bottom Panel',\n            html: 'The bottom panel'\n        }]);\n    }\n});\n","options":{"raw":true}},{"id":"Ext.grid.Tree-0","name":"Ext.grid.Tree example #1","href":"#!/api/Ext.grid.Tree","code":"var ts = Ext.create('Ext.data.TreeStore', {\n    root: {\n        text: 'Genre',\n        expanded: true,\n        children: [\n            {\n                text: 'Comedy',\n                children: [\n                    { leaf: true, text: '30 Rock' },\n                    { leaf: true, text: 'Arrested Development' },\n                    { leaf: true, text: 'Bob\\'s Burgers' },\n                    { leaf: true, text: 'Curb your Enthusiasm' },\n                    { leaf: true, text: 'Futurama' }\n                ]\n            },\n            {\n                text: 'Drama',\n                children: [\n                    { leaf: true, text: 'Breaking Bad', },\n                    { leaf: true, text: 'Game of Thrones' },\n                    { leaf: true, text: 'Lost' },\n                    { leaf: true, text: 'Preacher' },\n                    { leaf: true, text: 'The Wire' }\n                ]\n            },\n            {\n                text: 'Science Fiction',\n                children: [\n                    { leaf: true, text: 'Black Mirror' },\n                    { leaf: true, text: 'Doctor Who' },\n                    { leaf: true, text: 'Eureka' },\n                    { leaf: true, text: 'Futurama' },\n                    { leaf: true, text: 'The Twilight Zone' },\n                    { leaf: true, text: 'X-Files' }\n                ]\n            }\n        ]\n    }\n});\n\nExt.create({\n    fullscreen: true,\n    xtype: 'panel',\n\n    items: [{\n        xtype: 'tree',\n        height: 600,\n        width: 400,\n        store: ts,\n        title: 'Favorite Shows by Genre'\n    }]\n});\n","options":{}},{"id":"Ext.ux.Gauge-0","name":"Ext.ux.Gauge example #1","href":"#!/api/Ext.ux.Gauge","code":"Ext.create({\n    xtype: 'panel',\n    renderTo: document.body,\n    width: 200,\n    height: 200,\n    layout: 'fit',\n    items: {\n        xtype: 'gauge',\n        padding: 20,\n        value: 55,\n        minValue: 40,\n        maxValue: 80\n    }\n});\n","options":{}},{"id":"Ext.ux.Gauge-1","name":"Ext.ux.Gauge example #2","href":"#!/api/Ext.ux.Gauge","code":"Ext.create({\n    xtype: 'panel',\n    renderTo: document.body,\n    width: 200,\n    height: 200,\n    layout: 'fit',\n    items: {\n        xtype: 'gauge',\n        padding: 20,\n        trackStart: 0,\n        trackLength: 360,\n        value: 20,\n        valueStyle: {\n            round: true\n        },\n        textTpl: 'Loading...',\n        animation: {\n            easing: 'linear',\n            duration: 100000\n        }\n    }\n}).items.first().setAngleOffset(360 * 100);\n","options":{}},{"id":"Ext.ux.rating.Picker-0","name":"Ext.ux.rating.Picker example #1","href":"#!/api/Ext.ux.rating.Picker","code":"Ext.create({\n     xtype: 'rating',\n     renderTo: Ext.getBody(),\n     listeners: {\n         change: function (picker, value) {\n            console.log('Rating ' + value);\n         }\n     }\n });\n","options":{}},{"id":"Ext.chart.axis.Category-0","name":"Ext.chart.axis.Category example #1","href":"#!/api/Ext.chart.axis.Category","code":"Ext.create({\n   xtype: 'cartesian', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   innerPadding: '0 40 0 40',\n   store: {\n       fields: ['name', 'data1', 'data2', 'data3'],\n       data: [{\n           'name': 'metric one',\n           'data1': 10,\n           'data2': 12,\n           'data3': 14\n       }, {\n           'name': 'metric two',\n           'data1': 7,\n           'data2': 8,\n           'data3': 16\n       }, {\n           'name': 'metric three',\n           'data1': 5,\n           'data2': 2,\n           'data3': 14\n       }, {\n           'name': 'metric four',\n           'data1': 2,\n           'data2': 14,\n           'data3': 6\n       }, {\n           'name': 'metric five',\n           'data1': 27,\n           'data2': 38,\n           'data3': 36\n       }]\n   },\n   axes: {\n       type: 'category',\n       position: 'bottom',\n       fields: ['name'],\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       }\n   },\n   series: {\n       type: 'area',\n       subStyle: {\n           fill: ['#0A3F50', '#30BDA7', '#96D4C6']\n       },\n       xField: 'name',\n       yField: ['data1', 'data2', 'data3']\n   }\n});\n","options":{}},{"id":"Ext.chart.axis.layout.CombineByIndex-0","name":"Ext.chart.axis.layout.CombineByIndex example #1","href":"#!/api/Ext.chart.axis.layout.CombineByIndex","code":"Ext.create({\n    xtype: 'cartesian',\n    title: 'Weight vs Calories',\n\n    renderTo: document.body,\n    width: 400,\n    height: 400,\n\n    store: {\n         fields: ['month', 'weight', 'calories'],\n         data: [\n             {\n                 month: 'Jan',\n                 weight: 185,\n                 calories: 2650\n             },\n             {\n                 month: 'Jan',\n                 weight: 188,\n                 calories: 2800\n             },\n             {\n                 month: 'Feb',\n                 weight: 188,\n                 calories: 2800\n             },\n             {\n                 month: 'Mar',\n                 weight: 191,\n                 calories: 2800\n             },\n             {\n                 month: 'Apr',\n                 weight: 189,\n                 calories: 1500\n             },\n             {\n                 month: 'May',\n                 weight: 187,\n                 calories: 1350\n             }\n         ]\n    },\n\n    axes: [{\n        type: 'numeric',\n        position: 'left',\n        fields: ['weight'],\n        minimum: 140\n    }, {\n        type: 'numeric',\n        position: 'right',\n        fields: ['calories'],\n        minimum: 500,\n        maximum: 3500\n    }, {\n        type: 'category',\n        grid: true,\n        layout: 'combineByIndex',\n        fields: 'month',\n        position: 'bottom',\n        label: {\n            rotate: {\n                degrees: -45\n            }\n        }\n    }],\n\n    series: [{\n        type: 'line',\n        title: 'Weight',\n        xField: 'month',\n        yField: 'weight',\n        smooth: true,\n        marker: true\n    }, {\n        type: 'line',\n        title: 'Calories',\n        xField: 'month',\n        yField: 'calories',\n        smooth: true,\n        marker: true\n    }],\n\n    legend: {\n        docked: 'bottom'\n    }\n\n});\n","options":{}},{"id":"Ext.chart.axis.Numeric-0","name":"Ext.chart.axis.Numeric example #1","href":"#!/api/Ext.chart.axis.Numeric","code":"Ext.create({\n   xtype: 'cartesian', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   store: {\n       fields: ['name', 'data1', 'data2', 'data3'],\n       data: [{\n           'name': 1,\n           'data1': 10,\n           'data2': 12,\n           'data3': 14\n       }, {\n           'name': 2,\n           'data1': 7,\n           'data2': 8,\n           'data3': 16\n       }, {\n           'name': 3,\n           'data1': 5,\n           'data2': 2,\n           'data3': 14\n       }, {\n           'name': 4,\n           'data1': 2,\n           'data2': 14,\n           'data3': 6\n       }, {\n           'name': 5,\n           'data1': 27,\n           'data2': 38,\n           'data3': 36\n       }]\n   },\n   axes: {\n       type: 'numeric',\n       position: 'left',\n       minimum: 0,\n       fields: ['data1', 'data2', 'data3'],\n       title: 'Sample Values',\n       grid: {\n           odd: {\n               opacity: 1,\n               fill: '#F2F2F2',\n               stroke: '#DDD',\n               'lineWidth': 1\n           }\n       }\n   },\n   series: {\n       type: 'area',\n       subStyle: {\n           fill: ['#0A3F50', '#30BDA7', '#96D4C6']\n       },\n       xField: 'name',\n       yField: ['data1', 'data2', 'data3']\n   }\n});\n","options":{}},{"id":"Ext.chart.axis.Time-0","name":"Ext.chart.axis.Time example #1","href":"#!/api/Ext.chart.axis.Time","code":"Ext.create({\n   xtype: 'cartesian', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   store: {\n       fields: ['time', 'open', 'high', 'low', 'close'],\n       data: [{\n           'time': new Date('Jan 1 2010').getTime(),\n           'open': 600,\n           'high': 614,\n           'low': 578,\n           'close': 590\n       }, {\n           'time': new Date('Jan 2 2010').getTime(),\n           'open': 590,\n           'high': 609,\n           'low': 580,\n           'close': 580\n       }, {\n           'time': new Date('Jan 3 2010').getTime(),\n           'open': 580,\n           'high': 602,\n           'low': 578,\n           'close': 602\n       }, {\n           'time': new Date('Jan 4 2010').getTime(),\n           'open': 602,\n           'high': 614,\n           'low': 586,\n           'close': 586\n       }]\n   },\n   axes: [{\n       type: 'numeric',\n       position: 'left',\n       fields: ['open', 'high', 'low', 'close'],\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       },\n       grid: true,\n       minimum: 560,\n       maximum: 640\n   }, {\n       type: 'time',\n       position: 'bottom',\n       fields: ['time'],\n       fromDate: new Date('Dec 31 2009'),\n       toDate: new Date('Jan 5 2010'),\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       },\n       style: {\n           axisLine: false\n       }\n   }],\n   series: {\n       type: 'candlestick',\n       xField: 'time',\n       openField: 'open',\n       highField: 'high',\n       lowField: 'low',\n       closeField: 'close',\n       style: {\n           ohlcType: 'ohlc',\n           dropStyle: {\n               fill: 'rgb(255, 128, 128)',\n               stroke: 'rgb(255, 128, 128)',\n               lineWidth: 3\n           },\n           raiseStyle: {\n               fill: 'rgb(48, 189, 167)',\n               stroke: 'rgb(48, 189, 167)',\n               lineWidth: 3\n           }\n       }\n   }\n});\n","options":{}},{"id":"Ext.chart.interactions.Crosshair-0","name":"Ext.chart.interactions.Crosshair example #1","href":"#!/api/Ext.chart.interactions.Crosshair","code":"Ext.create('Ext.Container', {\n    renderTo: Ext.getBody(),\n    width: 600,\n    height: 400,\n    layout: 'fit',\n    items: {\n        xtype: 'cartesian',\n        innerPadding: 20,\n        interactions: {\n            type: 'crosshair',\n            axes: {\n                left: {\n                    label: {\n                        fillStyle: 'white'\n                    },\n                    rect: {\n                        fillStyle: 'brown',\n                        radius: 6\n                    }\n                },\n                bottom: {\n                    label: {\n                        fontSize: '14px',\n                        fontWeight: 'bold'\n                    }\n                }\n            },\n            lines: {\n                horizontal: {\n                    strokeStyle: 'brown',\n                    lineWidth: 2,\n                    lineDash: [20, 2, 2, 2, 2, 2, 2, 2]\n                }\n            }\n        },\n        store: {\n            fields: ['name', 'data'],\n            data: [\n                {name: 'apple', data: 300},\n                {name: 'orange', data: 900},\n                {name: 'banana', data: 800},\n                {name: 'pear', data: 400},\n                {name: 'grape', data: 500}\n            ]\n        },\n        axes: [{\n            type: 'numeric',\n            position: 'left',\n            fields: ['data'],\n            title: {\n                text: 'Value',\n                fontSize: 15\n            },\n            grid: true,\n            label: {\n                rotationRads: -Math.PI / 4\n            }\n        }, {\n            type: 'category',\n            position: 'bottom',\n            fields: ['name'],\n            title: {\n                text: 'Category',\n                fontSize: 15\n            }\n        }],\n        series: {\n            type: 'line',\n            style: {\n                strokeStyle: 'black'\n            },\n            xField: 'name',\n            yField: 'data',\n            marker: {\n                type: 'circle',\n                radius: 5,\n                fillStyle: 'lightblue'\n            }\n        }\n    }\n});\n","options":{}},{"id":"Ext.chart.interactions.CrossZoom-0","name":"Ext.chart.interactions.CrossZoom example #1","href":"#!/api/Ext.chart.interactions.CrossZoom","code":"Ext.create({\n    xtype: 'cartesian',\n    renderTo: Ext.getBody(),\n    width: 600,\n    height: 400,\n    insetPadding: 40,\n    interactions: 'crosszoom',\n    store: {\n        fields: ['name', 'data1', 'data2', 'data3', 'data4', 'data5'],\n        data: [{\n            'name': 'metric one',\n            'data1': 10,\n            'data2': 12,\n            'data3': 14,\n            'data4': 8,\n            'data5': 13\n        }, {\n            'name': 'metric two',\n            'data1': 7,\n            'data2': 8,\n            'data3': 16,\n            'data4': 10,\n            'data5': 3\n        }, {\n            'name': 'metric three',\n            'data1': 5,\n            'data2': 2,\n            'data3': 14,\n            'data4': 12,\n            'data5': 7\n        }, {\n            'name': 'metric four',\n            'data1': 2,\n            'data2': 14,\n            'data3': 6,\n            'data4': 1,\n            'data5': 23\n        }, {\n            'name': 'metric five',\n            'data1': 27,\n            'data2': 38,\n            'data3': 36,\n            'data4': 13,\n            'data5': 33\n        }]\n    },\n    axes: [{\n        type: 'numeric',\n        position: 'left',\n        fields: ['data1'],\n        title: {\n            text: 'Sample Values',\n            fontSize: 15\n        },\n        grid: true,\n        minimum: 0\n    }, {\n        type: 'category',\n        position: 'bottom',\n        fields: ['name'],\n        title: {\n            text: 'Sample Values',\n            fontSize: 15\n        }\n    }],\n    series: [{\n        type: 'line',\n        highlight: {\n            size: 7,\n            radius: 7\n        },\n        style: {\n            stroke: 'rgb(143,203,203)'\n        },\n        xField: 'name',\n        yField: 'data1',\n        marker: {\n            type: 'path',\n            path: ['M', - 2, 0, 0, 2, 2, 0, 0, - 2, 'Z'],\n            stroke: 'blue',\n            lineWidth: 0\n        }\n    }, {\n        type: 'line',\n        highlight: {\n            size: 7,\n            radius: 7\n        },\n        fill: true,\n        xField: 'name',\n        yField: 'data3',\n        marker: {\n            type: 'circle',\n            radius: 4,\n            lineWidth: 0\n        }\n    }]\n});\n","options":{}},{"id":"Ext.chart.interactions.PanZoom-0","name":"Ext.chart.interactions.PanZoom example #1","href":"#!/api/Ext.chart.interactions.PanZoom","code":"Ext.create({\n    renderTo: document.body,\n    xtype: 'cartesian',\n    width: 600,\n    height: 400,\n    insetPadding: 40,            \n    interactions: [{\n        type: 'panzoom',\n        zoomOnPan: true\n    }],\n    store: {\n        fields: ['name', 'data1', 'data2', 'data3', 'data4', 'data5'],\n        data: [{\n            'name': 'metric one',\n            'data1': 10,\n            'data2': 12,\n            'data3': 14,\n            'data4': 8,\n            'data5': 13\n        }, {\n            'name': 'metric two',\n            'data1': 7,\n            'data2': 8,\n            'data3': 16,\n            'data4': 10,\n            'data5': 3\n        }, {\n            'name': 'metric three',\n            'data1': 5,\n            'data2': 2,\n            'data3': 14,\n            'data4': 12,\n            'data5': 7\n        }, {\n            'name': 'metric four',\n            'data1': 2,\n            'data2': 14,\n            'data3': 6,\n            'data4': 1,\n            'data5': 23\n        }, {\n            'name': 'metric five',\n            'data1': 27,\n            'data2': 38,\n            'data3': 36,\n            'data4': 13,\n            'data5': 33\n        }]\n    },\n    axes: [{\n        type: 'numeric',\n        position: 'left',\n        fields: ['data1'],\n        title: {\n            text: 'Sample Values',\n            fontSize: 15\n        },\n        grid: true,\n        minimum: 0\n    }, {\n        type: 'category',\n        position: 'bottom',\n        fields: ['name'],\n        title: {\n            text: 'Sample Values',\n            fontSize: 15\n        }\n    }],\n    series: [{\n        type: 'line',\n        highlight: {\n            size: 7,\n            radius: 7\n        },\n        style: {\n            stroke: 'rgb(143,203,203)'\n        },\n        xField: 'name',\n        yField: 'data1',\n        marker: {\n            type: 'path',\n            path: ['M', - 2, 0, 0, 2, 2, 0, 0, - 2, 'Z'],\n            stroke: 'blue',\n            lineWidth: 0\n        }\n    }, {\n        type: 'line',\n        highlight: {\n            size: 7,\n            radius: 7\n        },\n        fill: true,\n        xField: 'name',\n        yField: 'data3',\n        marker: {\n            type: 'circle',\n            radius: 4,\n            lineWidth: 0\n        }\n    }]\n});\n","options":{}},{"id":"Ext.chart.interactions.Rotate-0","name":"Ext.chart.interactions.Rotate example #1","href":"#!/api/Ext.chart.interactions.Rotate","code":"Ext.create('Ext.Container', {\n    renderTo: Ext.getBody(),\n    width: 600,\n    height: 400,\n    layout: 'fit',\n    items: {\n        xtype: 'polar',\n        interactions: 'rotate',\n        colors: [\"#115fa6\", \"#94ae0a\", \"#a61120\", \"#ff8809\", \"#ffd13e\"],\n        store: {\n            fields: ['name', 'data1', 'data2', 'data3', 'data4', 'data5'],\n            data: [\n                {'name':'metric one', 'data1':10, 'data2':12, 'data3':14, 'data4':8, 'data5':13},\n                {'name':'metric two', 'data1':7, 'data2':8, 'data3':16, 'data4':10, 'data5':3},\n                {'name':'metric three', 'data1':5, 'data2':2, 'data3':14, 'data4':12, 'data5':7},\n                {'name':'metric four', 'data1':2, 'data2':14, 'data3':6, 'data4':1, 'data5':23},\n                {'name':'metric five', 'data1':27, 'data2':38, 'data3':36, 'data4':13, 'data5':33}\n            ]\n        },\n        series: {\n            type: 'pie',\n            label: {\n                field: 'name',\n                display: 'rotate'\n            },\n            xField: 'data3',\n            donut: 30\n        }\n    }\n});\n","options":{}},{"id":"Ext.chart.navigator.Container-0","name":"Ext.chart.navigator.Container example #1","href":"#!/api/Ext.chart.navigator.Container","code":"Ext.create({\n    xtype: 'chartnavigator',\n    renderTo: Ext.getBody(),\n    width: 600,\n    height: 400,\n\n    chart: {\n        xtype: 'cartesian',\n\n        store: {\n            data: (function () {\n                var data = [];\n                for (var i = 0; i < 360; i++) {\n                    data.push({\n                        x: i,\n                        y: Math.sin(i / 45 * Math.PI)\n                    });\n                }\n                return data;\n            })()\n        },\n        axes: [\n            {\n                id: 'navigable-axis',\n\n                type: 'numeric',\n                position: 'bottom'\n            },\n            {\n                type: 'numeric',\n                position: 'left'\n            }\n        ],\n        series: {\n            type: 'line',\n            xField: 'x',\n            yField: 'y'\n        }\n    },\n\n    navigator: {\n        axis: 'navigable-axis'\n    }\n});\n","options":{}},{"id":"Ext.chart.series.Area-0","name":"Ext.chart.series.Area example #1","href":"#!/api/Ext.chart.series.Area","code":"Ext.create({\n   xtype: 'cartesian', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   insetPadding: 40,\n   store: {\n       fields: ['name', 'data1', 'data2', 'data3'],\n       data: [{\n           name: 'metric one',\n           data1: 10,\n           data2: 12,\n           data3: 14\n       }, {\n           name: 'metric two',\n           data1: 7,\n           data2: 8,\n           data3: 16\n       }, {\n           name: 'metric three',\n           data1: 5,\n           data2: 2,\n           data3: 14\n       }, {\n           name: 'metric four',\n           data1: 2,\n           data2: 14,\n           data3: 6\n       }, {\n           name: 'metric five',\n           data1: 27,\n           data2: 38,\n           data3: 36\n       }]\n   },\n   axes: [{\n       type: 'numeric',\n       position: 'left',\n       fields: ['data1'],\n       grid: true,\n       minimum: 0\n   }, {\n       type: 'category',\n       position: 'bottom',\n       fields: ['name']\n   }],\n   series: {\n       type: 'area',\n       subStyle: {\n           fill: ['#0A3F50', '#30BDA7', '#96D4C6']\n       },\n       xField: 'name',\n       yField: ['data1', 'data2', 'data3']\n   }\n});\n","options":{}},{"id":"Ext.chart.series.Bar-0","name":"Ext.chart.series.Bar example #1","href":"#!/api/Ext.chart.series.Bar","code":"Ext.create({\n   xtype: 'cartesian', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   store: {\n       fields: ['name', 'value'],\n       data: [{\n           name: 'metric one',\n           value: 10\n       }, {\n           name: 'metric two',\n           value: 7\n       }, {\n           name: 'metric three',\n           value: 5\n       }, {\n           name: 'metric four',\n           value: 2\n       }, {\n           name: 'metric five',\n           value: 27\n       }]\n   },\n   axes: [{\n       type: 'numeric',\n       position: 'left',\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       },\n       fields: 'value'\n   }, {\n       type: 'category',\n       position: 'bottom',\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       },\n       fields: 'name'\n   }],\n   series: {\n       type: 'bar',\n       subStyle: {\n           fill: ['#388FAD'],\n           stroke: '#1F6D91'\n       },\n       xField: 'name',\n       yField: 'value'\n   }\n});\n","options":{}},{"id":"Ext.chart.series.Bar3D-0","name":"Ext.chart.series.Bar3D example #1","href":"#!/api/Ext.chart.series.Bar3D","code":"Ext.create({\n   xtype: 'cartesian', \n   renderTo: Ext.getBody(),\n   width: 600,\n   height: 400,\n   innerPadding: '0 10 0 10',\n   store: {\n       fields: ['name', 'apples', 'oranges'],\n       data: [{\n           name: 'Eric',\n           apples: 10,\n           oranges: 3\n       }, {\n           name: 'Mary',\n           apples: 7,\n           oranges: 2\n       }, {\n           name: 'John',\n           apples: 5,\n           oranges: 2\n       }, {\n           name: 'Bob',\n           apples: 2,\n           oranges: 3\n       }, {\n           name: 'Joe',\n           apples: 19,\n           oranges: 1\n       }, {\n           name: 'Macy',\n           apples: 13,\n           oranges: 4\n       }]\n   },\n   axes: [{\n       type: 'numeric3d',\n       position: 'left',\n       fields: ['apples', 'oranges'],\n       title: {\n           text: 'Inventory',\n           fontSize: 15\n       },\n       grid: {\n           odd: {\n               fillStyle: 'rgba(255, 255, 255, 0.06)'\n           },\n           even: {\n               fillStyle: 'rgba(0, 0, 0, 0.03)'\n           }\n       }\n   }, {\n       type: 'category3d',\n       position: 'bottom',\n       title: {\n           text: 'People',\n           fontSize: 15\n       },\n       fields: 'name'\n   }],\n   series: {\n       type: 'bar3d',\n       xField: 'name',\n       yField: ['apples', 'oranges']\n   }\n});\n","options":{}},{"id":"Ext.chart.series.BoxPlot-0","name":"Ext.chart.series.BoxPlot example #1","href":"#!/api/Ext.chart.series.BoxPlot","code":"Ext.create({\n   xtype: 'cartesian',\n   width: 400,\n   height: 400,\n   renderTo: Ext.getBody(),\n   insetPadding: '20 20 10 10',\n   store: {\n       data: [{\n           category: 'Engineer IV',\n           low: 110, q1: 130, median: 175, q3: 200, high: 225\n       }, {\n           category: 'Market',\n           low: 75, q1: 125, median: 210, q3: 230, high: 255\n       }]\n   },\n   axes: [\n       {\n           type: 'numeric',\n           position: 'left',\n           renderer: function (axis, text) {\n               return '$' + text + ' K'\n           }\n       },\n       {\n           type: 'category',\n           position: 'bottom'\n       }\n   ],\n   series: {\n       type: 'boxplot',\n       xField: 'category',\n       style: {\n           maxBoxWidth: 50,\n           lineWidth: 2\n       }\n   }\n});\n","options":{}},{"id":"Ext.chart.series.CandleStick-0","name":"Ext.chart.series.CandleStick example #1","href":"#!/api/Ext.chart.series.CandleStick","code":"new Ext.chart.CartesianChart({\n    xtype: 'cartesian',\n    renderTo: document.body,\n    width: 700,\n    height: 500,\n    insetPadding: 20,\n    innerPadding: '0 20 0 20',\n\n    store: {\n        data: [\n            {\n                time: new Date('Nov 17 2016'),\n                o: 52.40, h: 52.74, l: 52.18, c: 52.29\n            },\n            {\n                time: new Date('Nov 18 2016'),\n                o: 51.87, h: 52.22, l: 51.51, c: 52.04\n            },\n            {\n                time: new Date('Nov 21 2016'),\n                o: 53.02, h: 53.40, l: 53.02, c: 53.33\n            },\n            {\n                time: new Date('Nov 22 2016'),\n                o: 53.48, h: 53.80, l: 53.13, c: 53.70\n            },\n            {\n                time: new Date('Nov 23 2016'),\n                o: 52.85, h: 53.39, l: 52.76, c: 53.28\n            },\n            {\n                time: new Date('Nov 25 2016'),\n                o: 53.28, h: 53.45, l: 53.20, c: 53.40\n            },\n            {\n                time: new Date('Nov 28 2016'),\n                o: 52.51, h: 52.58, l: 51.96, c: 52.00\n            },\n            {\n                time: new Date('Nov 29 2016'),\n                o: 51.25, h: 51.98, l: 51.10, c: 51.79\n            },\n            {\n                time: new Date('Nov 30 2016'),\n                o: 53.65, h: 54.56, l: 53.60, c: 54.17\n            },\n            {\n                time: new Date('Dec 01 2016'),\n                o: 55.26, h: 55.75, l: 54.94, c: 55.13\n            }\n        ]\n    },\n    axes: [\n        {\n            type: 'numeric',\n            position: 'left'\n        },\n        {\n            type: 'category',\n            position: 'bottom',\n\n            renderer: function (axis, value) {\n                return Ext.Date.format(value, 'M j\\nY');\n            }\n        }\n    ],\n    series: {\n        type: 'candlestick',\n\n        xField: 'time',\n\n        openField: 'o',\n        highField: 'h',\n        lowField: 'l',\n        closeField: 'c',\n\n        style: {\n            barWidth: 10,\n\n            dropStyle: {\n                fill: 'rgb(222, 87, 87)',\n                stroke: 'rgb(222, 87, 87)',\n                lineWidth: 3\n            },\n            raiseStyle: {\n                fill: 'rgb(48, 189, 167)',\n                stroke: 'rgb(48, 189, 167)',\n                lineWidth: 3\n            }\n        }\n    }\n});\n","options":{}},{"id":"Ext.chart.series.Gauge-0","name":"Ext.chart.series.Gauge example #1","href":"#!/api/Ext.chart.series.Gauge","code":"Ext.create({\n   xtype: 'polar', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   store: {\n       fields: ['mph', 'fuel', 'temp', 'rpm'],\n       data: [{\n           mph: 65,\n           fuel: 50,\n           temp: 150,\n           rpm: 6000\n       }]\n   },\n   series: {\n       type: 'gauge',\n       colors: ['#1F6D91', '#90BCC9'],\n       angleField: 'mph',\n       needle: true,\n       donut: 30\n   }\n});\n","options":{}},{"id":"Ext.chart.series.Line-0","name":"Ext.chart.series.Line example #1","href":"#!/api/Ext.chart.series.Line","code":"Ext.create({\n   xtype: 'cartesian', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   insetPadding: 40,\n   store: {\n       fields: ['name', 'data1', 'data2'],\n       data: [{\n           'name': 'metric one',\n           'data1': 10,\n           'data2': 14\n       }, {\n           'name': 'metric two',\n           'data1': 7,\n           'data2': 16\n       }, {\n           'name': 'metric three',\n           'data1': 5,\n           'data2': 14\n       }, {\n           'name': 'metric four',\n           'data1': 2,\n           'data2': 6\n       }, {\n           'name': 'metric five',\n           'data1': 27,\n           'data2': 36\n       }]\n   },\n   axes: [{\n       type: 'numeric',\n       position: 'left',\n       fields: ['data1'],\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       },\n       grid: true,\n       minimum: 0\n   }, {\n       type: 'category',\n       position: 'bottom',\n       fields: ['name'],\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       }\n   }],\n   series: [{\n       type: 'line',\n       style: {\n           stroke: '#30BDA7',\n           lineWidth: 2\n       },\n       xField: 'name',\n       yField: 'data1',\n       marker: {\n           type: 'path',\n           path: ['M', - 4, 0, 0, 4, 4, 0, 0, - 4, 'Z'],\n           stroke: '#30BDA7',\n           lineWidth: 2,\n           fill: 'white'\n       }\n   }, {\n       type: 'line',\n       fill: true,\n       style: {\n           fill: '#96D4C6',\n           fillOpacity: .6,\n           stroke: '#0A3F50',\n           strokeOpacity: .6,\n       },\n       xField: 'name',\n       yField: 'data2',\n       marker: {\n           type: 'circle',\n           radius: 4,\n           lineWidth: 2,\n           fill: 'white'\n       }\n   }]\n});\n","options":{}},{"id":"Ext.chart.series.Pie-0","name":"Ext.chart.series.Pie example #1","href":"#!/api/Ext.chart.series.Pie","code":"Ext.create({\n   xtype: 'polar',\n   renderTo: document.body,\n   width: 400,\n   height: 400,\n   theme: 'green',\n   interactions: ['rotate', 'itemhighlight'],\n   store: {\n       fields: ['name', 'data1'],\n       data: [{\n           name: 'metric one',\n           data1: 14\n       }, {\n           name: 'metric two',\n           data1: 16\n       }, {\n           name: 'metric three',\n           data1: 14\n       }, {\n           name: 'metric four',\n           data1: 6\n       }, {\n           name: 'metric five',\n           data1: 36\n       }]\n   },\n   series: {\n       type: 'pie',\n       highlight: true,\n       angleField: 'data1',\n       label: {\n           field: 'name',\n           display: 'rotate'\n       },\n       donut: 30\n   }\n});\n","options":{}},{"id":"Ext.chart.series.Pie3D-0","name":"Ext.chart.series.Pie3D example #1","href":"#!/api/Ext.chart.series.Pie3D","code":"Ext.create({\n   xtype: 'polar', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   theme: 'green',\n   interactions: 'rotate',\n   store: {\n       fields: ['data3'],\n       data: [{\n           'data3': 14\n       }, {\n           'data3': 16\n       }, {\n           'data3': 14\n       }, {\n           'data3': 6\n       }, {\n           'data3': 36\n       }]\n   },\n   series: {\n       type: 'pie3d',\n       angleField: 'data3',\n       donut: 30\n   }\n});\n","options":{}},{"id":"Ext.chart.series.Radar-0","name":"Ext.chart.series.Radar example #1","href":"#!/api/Ext.chart.series.Radar","code":"Ext.create({\n   xtype: 'polar',\n   renderTo: document.body,\n   width: 500,\n   height: 400,\n   interactions: 'rotate',\n   store: {\n       fields: ['name', 'data1'],\n       data: [{\n           'name': 'metric one',\n           'data1': 8\n       }, {\n           'name': 'metric two',\n           'data1': 10\n       }, {\n           'name': 'metric three',\n           'data1': 12\n       }, {\n           'name': 'metric four',\n           'data1': 1\n       }, {\n           'name': 'metric five',\n           'data1': 13\n       }]\n   },\n   series: {\n       type: 'radar',\n       angleField: 'name',\n       radiusField: 'data1',\n       style: {\n           fillStyle: '#388FAD',\n           fillOpacity: .1,\n           strokeStyle: '#388FAD',\n           strokeOpacity: .8,\n           lineWidth: 1\n       }\n   },\n   axes: [{\n       type: 'numeric',\n       position: 'radial',\n       fields: 'data1',\n       style: {\n           estStepSize: 10\n       },\n       grid: true\n   }, {\n       type: 'category',\n       position: 'angular',\n       fields: 'name',\n       style: {\n           estStepSize: 1\n       },\n       grid: true\n   }]\n});\n","options":{}},{"id":"Ext.chart.series.Scatter-0","name":"Ext.chart.series.Scatter example #1","href":"#!/api/Ext.chart.series.Scatter","code":"Ext.create({\n   xtype: 'cartesian', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   insetPadding: 40,\n   interactions: ['itemhighlight'],\n   store: {\n       fields: ['name', 'data1', 'data2'],\n       data: [{\n           'name': 'metric one',\n           'data1': 10,\n           'data2': 14\n       }, {\n           'name': 'metric two',\n           'data1': 7,\n           'data2': 16\n       }, {\n           'name': 'metric three',\n           'data1': 5,\n           'data2': 14\n       }, {\n           'name': 'metric four',\n           'data1': 2,\n           'data2': 6\n       }, {\n           'name': 'metric five',\n           'data1': 27,\n           'data2': 36\n       }]\n   },\n   axes: [{\n       type: 'numeric',\n       position: 'left',\n       fields: ['data1'],\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       },\n       grid: true,\n       minimum: 0\n   }, {\n       type: 'category',\n       position: 'bottom',\n       fields: ['name'],\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       }\n   }],\n   series: {\n       type: 'scatter',\n       highlight: {\n           size: 12,\n           radius: 12,\n           fill: '#96D4C6',\n           stroke: '#30BDA7'\n       },\n       fill: true,\n       xField: 'name',\n       yField: 'data2',\n       marker: {\n           type: 'circle',\n           fill: '#30BDA7',\n           radius: 10,\n           lineWidth: 0\n       }\n   }\n});\n","options":{}},{"id":"Ext.chart.sprite.BoxPlot-0","name":"Ext.chart.sprite.BoxPlot example #1","href":"#!/api/Ext.chart.sprite.BoxPlot","code":"new Ext.draw.Container({\n    width: 100,\n    height: 100,\n    renderTo: Ext.getBody(),\n    sprites: [{\n        type: 'boxplot',\n        translationX: 50,\n        translationY: 50\n    }]\n});\n","options":{}},{"id":"Ext.draw.Container-0","name":"Ext.draw.Container example #1","href":"#!/api/Ext.draw.Container","code":"var drawContainer = Ext.create('Ext.draw.Container', {\n    renderTo: Ext.getBody(),\n    width:200,\n    height:200,\n    sprites: [{\n        type: 'circle',\n        fillStyle: '#79BB3F',\n        r: 100,\n        x: 100,\n        y: 100\n     }]\n});\n\n// Uncomment to trigger a download of the painted circle.\n// drawContainer.download({\n//     filename: 'Circle',\n//     url: 'http://svg.sencha.io' // Default server the image data is sent to.\n// });\n","options":{}},{"id":"Ext.draw.gradient.Linear-0","name":"Ext.draw.gradient.Linear example #1","href":"#!/api/Ext.draw.gradient.Linear","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'circle',\n       cx: 100,\n       cy: 100,\n       r: 100,\n       fillStyle: {\n           type: 'linear',\n           degrees: 180,\n           stops: [{\n               offset: 0,\n               color: '#1F6D91'\n           }, {\n               offset: 1,\n               color: '#90BCC9'\n           }]\n       }\n   }]\n});\n","options":{}},{"id":"Ext.draw.gradient.Radial-0","name":"Ext.draw.gradient.Radial example #1","href":"#!/api/Ext.draw.gradient.Radial","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'circle',\n       cx: 100,\n       cy: 100,\n       r: 100,\n       fillStyle: {\n           type: 'radial',\n           start: {\n               x: 0,\n               y: 0,\n               r: 0\n           },\n           end: {\n               x: 0,\n               y: 0,\n               r: 1\n           },\n           stops: [{\n               offset: 0,\n               color: '#90BCC9'\n           }, {\n               offset: 1,\n               color: '#1F6D91'\n           }]\n       }\n   }]\n});\n","options":{}},{"id":"Ext.draw.Matrix-0","name":"Ext.draw.Matrix example #1","href":"#!/api/Ext.draw.Matrix","code":"var drawContainer = new Ext.draw.Container({\n    renderTo: Ext.getBody(),\n    width: 380,\n    height: 380,\n    sprites: [{\n        type: 'rect',\n        width: 100,\n        height: 100,\n        fillStyle: 'red'\n    }]\n});\n","options":{}},{"id":"Ext.draw.Matrix-1","name":"Ext.draw.Matrix example #2","href":"#!/api/Ext.draw.Matrix","code":"var drawContainer = new Ext.draw.Container({\n    renderTo: Ext.getBody(),\n    width: 380,\n    height: 380,\n    sprites: [{\n        type: 'rect',\n        width: 100,\n        height: 100,\n        fillStyle: 'red'\n    }]\n});\n\nvar main = drawContainer.getSurface();\nvar rect = main.getItems()[0];\n\nvar m = new Ext.draw.Matrix().translate(100, 100).\nrotate(Math.PI).\ntranslate(-100, - 100);\n\nrect.setTransform(m);\nmain.renderFrame();\n","options":{}},{"id":"Ext.draw.Matrix-2","name":"Ext.draw.Matrix example #3","href":"#!/api/Ext.draw.Matrix","code":"var drawContainer = new Ext.draw.Container({\n    renderTo: Ext.getBody(),\n    width: 380,\n    height: 380,\n    sprites: [{\n        type: 'rect',\n        width: 100,\n        height: 100,\n        fillStyle: 'red'\n    }]\n});\n\nvar main = drawContainer.getSurface();\nvar rect = main.getItems()[0];\n\nvar m = new Ext.draw.Matrix().rotate(Math.PI, 100, 100);\n\nrect.setTransform(m);\nmain.renderFrame();\n","options":{}},{"id":"Ext.draw.modifier.Animation-0","name":"Ext.draw.modifier.Animation example #1","href":"#!/api/Ext.draw.modifier.Animation","code":"var drawCt = Ext.create({\n    xtype: 'draw',\n    renderTo: document.body,\n    width: 400,\n    height: 400,\n    sprites: [{\n        type: 'rect',\n        x: 50,\n        y: 50,\n        width: 100,\n        height: 100,\n        fillStyle: '#1F6D91'\n    }]\n});\n\nvar rect = drawCt.getSurface().getItems()[0];\n\nrect.setAnimation({\n    duration: 1000,\n    easing: 'elasticOut'\n});\n\nExt.defer(function () {\n    rect.setAttributes({\n        width: 250\n    });\n}, 500);\n","options":{}},{"id":"Ext.draw.sprite.Arc-0","name":"Ext.draw.sprite.Arc example #1","href":"#!/api/Ext.draw.sprite.Arc","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'arc',\n       cx: 100,\n       cy: 100,\n       r: 80,\n       fillStyle: '#1F6D91',\n       startAngle: 0,\n       endAngle: Math.PI,\n       anticlockwise: true\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Arrow-0","name":"Ext.draw.sprite.Arrow example #1","href":"#!/api/Ext.draw.sprite.Arrow","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'arrow',\n       translationX: 100,\n       translationY: 100,\n       size: 40,\n       fillStyle: '#30BDA7'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Circle-0","name":"Ext.draw.sprite.Circle example #1","href":"#!/api/Ext.draw.sprite.Circle","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'circle',\n       cx: 100,\n       cy: 100,\n       r: 50,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Cross-0","name":"Ext.draw.sprite.Cross example #1","href":"#!/api/Ext.draw.sprite.Cross","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'cross',\n       translationX: 100,\n       translationY: 100,\n       size: 40,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Diamond-0","name":"Ext.draw.sprite.Diamond example #1","href":"#!/api/Ext.draw.sprite.Diamond","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'diamond',\n       translationX: 100,\n       translationY: 100,\n       size: 40,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Ellipse-0","name":"Ext.draw.sprite.Ellipse example #1","href":"#!/api/Ext.draw.sprite.Ellipse","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'ellipse',\n       cx: 100,\n       cy: 100,\n       rx: 80,\n       ry: 50,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.EllipticalArc-0","name":"Ext.draw.sprite.EllipticalArc example #1","href":"#!/api/Ext.draw.sprite.EllipticalArc","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'ellipticalArc',\n       cx: 100,\n       cy: 100,\n       rx: 80,\n       ry: 50,\n       fillStyle: '#1F6D91',\n       startAngle: 0,\n       endAngle: Math.PI,\n       anticlockwise: true\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Line-0","name":"Ext.draw.sprite.Line example #1","href":"#!/api/Ext.draw.sprite.Line","code":"Ext.create({\n   xtype: 'draw',\n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'line',\n       fromX: 20,\n       fromY: 20,\n       toX: 120,\n       toY: 120,\n       strokeStyle: '#1F6D91',\n       lineWidth: 3\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Path-0","name":"Ext.draw.sprite.Path example #1","href":"#!/api/Ext.draw.sprite.Path","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'path',\n       path: 'M20,30 c0,-50 75,50 75,0 c0,-50 -75,50 -75,0',\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Plus-0","name":"Ext.draw.sprite.Plus example #1","href":"#!/api/Ext.draw.sprite.Plus","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'plus',\n       translationX: 100,\n       translationY: 100,\n       size: 40,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Rect-0","name":"Ext.draw.sprite.Rect example #1","href":"#!/api/Ext.draw.sprite.Rect","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'rect',\n       x: 50,\n       y: 50,\n       width: 100,\n       height: 100,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Sector-0","name":"Ext.draw.sprite.Sector example #1","href":"#!/api/Ext.draw.sprite.Sector","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'sector',\n       centerX: 100,\n       centerY: 100,\n       startAngle: -2.355,\n       endAngle: -.785,\n       endRho: 50,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Sprite-0","name":"Ext.draw.sprite.Sprite example #1","href":"#!/api/Ext.draw.sprite.Sprite","code":"Ext.create({\n    xtype: 'draw', \n    renderTo: document.body,\n    width: 400,\n    height: 400,\n    sprites: [{\n        type: 'rect',\n        x: 50,\n        y: 50,\n        width: 100,\n        height: 100,\n        fillStyle: '#1F6D91'\n    }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Sprite-1","name":"Ext.draw.sprite.Sprite example #2","href":"#!/api/Ext.draw.sprite.Sprite","code":"Ext.create({\n    xtype: 'draw', \n    renderTo: document.body,\n    width: 400,\n    height: 400,\n    sprites: [{\n        type: 'rect',\n        surface: 'anim',  // a surface with id \"anim\" will be created automatically\n        x: 50,\n        y: 50,\n        width: 100,\n        height: 100,\n        fillStyle: '#1F6D91'\n    }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Sprite-2","name":"Ext.draw.sprite.Sprite example #3","href":"#!/api/Ext.draw.sprite.Sprite","code":"var drawCt = Ext.create({\n    xtype: 'draw',\n    renderTo: document.body,\n    width: 400,\n    height: 400\n});\n\n// If the surface name is not specified then 'main' will be used\nvar surface = drawCt.getSurface();\n\nsurface.add({\n    type: 'rect',\n    x: 50,\n    y: 50,\n    width: 100,\n    height: 100,\n    fillStyle: '#1F6D91'\n});\n\nsurface.renderFrame();\n","options":{}},{"id":"Ext.draw.sprite.Square-0","name":"Ext.draw.sprite.Square example #1","href":"#!/api/Ext.draw.sprite.Square","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'square',\n       x: 100,\n       y: 100,\n       size: 50,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Text-0","name":"Ext.draw.sprite.Text example #1","href":"#!/api/Ext.draw.sprite.Text","code":"Ext.create({\n   xtype: 'draw',\n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'text',\n       x: 50,\n       y: 50,\n       text: 'Sencha',\n       fontSize: 30,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Tick-0","name":"Ext.draw.sprite.Tick example #1","href":"#!/api/Ext.draw.sprite.Tick","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'tick',\n       x: 20,\n       y: 40,\n       size: 10,\n       strokeStyle: '#388FAD',\n       lineWidth: 2\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Triangle-0","name":"Ext.draw.sprite.Triangle example #1","href":"#!/api/Ext.draw.sprite.Triangle","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'triangle',\n       size: 50,\n       translationX: 100,\n       translationY: 100,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.Surface-0","name":"Ext.draw.Surface example #1","href":"#!/api/Ext.draw.Surface","code":"Ext.create({\n    xtype: 'draw',\n    renderTo: document.body,\n    width: 400,\n    height: 400,\n    sprites: [{\n        type: 'rect',\n        surface: 'anim',  // a surface with id \"anim\" will be created automatically\n        x: 50,\n        y: 50,\n        width: 100,\n        height: 100,\n        fillStyle: '#1F6D91'\n    }]\n});\n","options":{}},{"id":"Ext.draw.Surface-1","name":"Ext.draw.Surface example #2","href":"#!/api/Ext.draw.Surface","code":"var drawCt = Ext.create({\n    xtype: 'draw',\n    renderTo: document.body,\n    width: 400,\n    height: 400\n});\n\n// If the surface name is not specified then 'main' will be used\nvar surface = drawCt.getSurface();\n\nsurface.add({\n    type: 'rect',\n    x: 50,\n    y: 50,\n    width: 100,\n    height: 100,\n    fillStyle: '#1F6D91'\n});\n\nsurface.renderFrame();\n","options":{}},{"id":"SU.Error-0","name":"SU.Error example #1","href":"#!/api/SU.Error","code":"throw new SU.Error('Something bad happened!');\n","options":{}},{"id":"SU.Error-1","name":"SU.Error example #2","href":"#!/api/SU.Error","code":"Ext.raise('A simple string error message');\n","options":{}},{"id":"SU.Error-2","name":"SU.Error example #3","href":"#!/api/SU.Error","code":"SU.Error.ignore = false;\nSU.Error.handle = function(e){\n    if(e.name === 'ReferenceError'){\n        alert(Ext.String.format('Name: {0},\\nMessage: {1},\\nDescription: {2}', e.name, e.message, e.description));\n        return true;\n    }\n    return SU.Error.ignore;\n}\ntry{\n    err+1;\n} catch(e){\n    Ext.raise(e);\n}\n\nExt.raise('Not handled a simple string  error message');\n","options":{}},{"id":"SU.Error-3","name":"SU.Error example #4","href":"#!/api/SU.Error","code":"Ext.raise({\n    etype: 'Ext.WebSocketError',\n    msg: ['CAN_NOT_CONNECT', 'ws://example.com']\n});\n","options":{}},{"id":"SU.Error-4","name":"SU.Error example #5","href":"#!/api/SU.Error","code":"SU.Error.handle = function(e){\n     alert(\n         e.toString()+\n         '\\n'+\n         e.description+\n         '\\nInstance of Error: '+(e instanceof Error)+                           // TRUE\n         '\\nInstance of SyntaxError: '+(e instanceof SyntaxError)+               // FALSE\n         '\\nInstance of Ext.Base: '+(e instanceof Ext.Base)+                     // FALSE\n         '\\nInstance of Ext.Error: '+(e instanceof Ext.Error)+                   // true\n         '\\nInstance of SU.Error: '+(e instanceof SU.Error)+                     // true\n         '\\nInstance of Ext.WebSocketError: '+(e instanceof Ext.WebSocketError)  // true | false\n     );\n    return true;\n}\n\n try {\n     Ext.raise({\n         etype: 'Ext.WebSocketError',\n         msg: ['CAN_NOT_CONNECT', 'ws://example.com']\n     });\n } catch(e) {\n     Ext.raise(e);\n }\n\n try {\n     eval('for(');\n } catch(e) {\n     Ext.raise(e);\n }\n","options":{}},{"id":"SU.utils.String-0","name":"SU.utils.String example #1","href":"#!/api/SU.utils.String","code":"var wordForms = ['заяц', 'зайца', 'зайцев'];\nconsole.log( 1, Ext.String.declination(1, wordForms) );                 // 1 заяц\nconsole.log( 3, Ext.String.declination(3, wordForms) );                 // 3 зайца\nconsole.log( 11, Ext.String.declination(11, wordForms) );               // 11 зайцев\nconsole.log( Ext.String.declination(NaN, wordForms) || 'Зайцев нет' );  // Зайцев нет\n","options":{}},{"id":"SU.WebSocket-0","name":"SU.WebSocket example #1","href":"#!/api/SU.WebSocket","code":"function addLog(text){\n    Ext.DomHelper.append( Ext.getBody(), {tag: 'div', style: 'margin:0 10px;', html: text});\n};\n\nvar ws = Ext.create('Ext.WebSocket', {\n    url: 'ws://echo.websocket.org/',\n    listeners:{\n        changestate: function( conn, state ){\n            var states = ['INITIALIZE', 'CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\n            addLog( 'Connection state: '+states[state & 0x0F] );\n        },\n        message: function(conn, data){\n            addLog( 'Response message: '+data);\n            ws.disconnect();\n        },\n        send: function(conn, data){\n            addLog( 'Send message: '+data);\n        },\n        connect: function(conn){\n            ws.send( 'WebSocket echo message' );\n        },\n        disconnect: function(conn, e){\n            addLog( 'Close state '+( !!e ? e.code : 0 ) );\n        }\n    }\n});\n\nws.connect();\n","options":{}},{"id":"SU.widgets.Avatar-0","name":"SU.widgets.Avatar example #1","href":"#!/api/SU.widgets.Avatar","code":"Ext.create({ \n    xtype: 'container', \n    fullscreen: true, \n    padding: 10,\n\n    items: [\n        {\n            xtype: 'container',\n            layout: 'hbox',\n            defaults: { style: 'margin: 20px;' },\n            items: [\n                {\n                    xtype: 'avatar',\n                    userName: 'Пупкин Василий Эдмундович'\n                },\n                {\n                    xtype: 'avatar',\n                    ui: 'plain',\n                    userName: 'Иванов Антон'\n                },\n                {\n                    xtype: 'avatar',\n                    userName: 'Вася Пупкин',\n                    image: 'https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50'\n                }\n            ]\n        },\n        {\n            xtype: 'container',\n            layout: 'hbox',\n            defaults: { style: 'margin: 10px;' },\n            items: [\n                {\n                    xtype: 'avatar',\n                    proportions: 80,\n                    userName: 'Петя Васечкин'\n                },\n                {\n                    xtype: 'avatar',\n                    ui: 'plain',\n                    proportions: 80,\n                    userName: 'Иванов Антон'\n                },\n                {\n                    xtype: 'avatar',\n                    proportions: 80,\n                    userName: 'Вася Пупкин',\n                    image: 'https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50'\n                }\n            ]\n        }\n    ], \n    renderTo: Ext.getBody() \n});\n","options":{}},{"id":"SU.field.Tag-0","name":"SU.field.Tag example #1","href":"#!/api/SU.field.Tag","code":"var shows = Ext.create('Ext.data.Store', {\n    fields: ['id','show'],\n    data: [\n        {id: 0, show: 'Battlestar Galactica'},\n        {id: 1, show: 'Doctor Who'},\n        {id: 2, show: 'Farscape'},\n        {id: 3, show: 'Firefly'},\n        {id: 4, show: 'Star Trek'},\n        {id: 5, show: 'Star Wars: Christmas Special'}\n    ]\n});\n\nExt.create('Ext.Panel', {\n    fullscreen: true,\n    title: 'Sci-Fi Television',\n    items: [{\n        xtype: 'tagfield',\n        label: 'Select a Show',\n        store: shows,\n        displayField: 'show',\n        valueField: 'id'\n    },{\n        xtype: 'tagfield',\n        label: 'Disabled',\n        disabled: true,\n        store: shows,\n        displayField: 'show',\n        valueField: 'id',\n        value: [1,3,5]\n    },{\n        xtype: 'tagfield',\n        label: 'Read only',\n        readOnly: true,\n        store: shows,\n        displayField: 'show',\n        valueField: 'id',\n        value: [1,3,5]\n    }]\n});\n","options":{}},{"id":"SU.panel.Accordion-0","name":"SU.panel.Accordion example #1","href":"#!/api/SU.panel.Accordion","code":"Ext.create({\n    xtype: 'accordion',\n    title: 'Accordion Panel',\n    animationPanel: { duration: 150 },\n    fullscreen: true,\n\n    defaults: {\n        xtype: 'panel',\n        bodyPadding: 10,\n        scrollable: true,\n        flex: 1,\n        layout: 'fit'\n    },\n\n    items: [{\n        title: 'Panel 1',\n        collapsed: false,\n        html: 'Panel 1 content!'\n    }, {\n        title: 'Panel 2',\n        html: 'Panel 2 content!'\n    }, {\n        title: 'Panel 3',\n        html: 'Panel 3 content!'\n    }]\n});\n","options":{}},{"id":"SU.panel.Accordion-1","name":"SU.panel.Accordion example #2","href":"#!/api/SU.panel.Accordion","code":"Ext.create({\n    xtype: 'accordion',\n    title: 'Accordion Panel',\n    fullscreen: true,\n    collapseByDefault: false,\n    scrollable: true,\n\n    defaults: {\n        xtype: 'panel',\n        bodyPadding: 10,\n        layout: 'fit'\n    },\n\n    items: [{\n        title: 'Panel 1',\n        html: 'Panel 1 content!'\n    }, {\n        title: 'Panel 2',\n        html: 'Panel 2 content!'\n    }, {\n        title: 'Panel 3',\n        html: 'Panel 3 content!'\n    }, {\n        title: 'Panel 4',\n        html: 'Panel 4 content!'\n    }]\n});\n","options":{}}]);