Ext.data.JsonP.__inline_examples__([{"id":"Ext.app.ViewController-0","name":"Ext.app.ViewController example #1","href":"#!/api/Ext.app.ViewController","code":"Ext.define('MyViewController', {\n    extend : 'Ext.app.ViewController',\n    alias: 'controller.myview',\n\n    // This method is called as a \"handler\" for the Add button in our view\n    onAddClick: function() {\n        Ext.Msg.alert('Add', 'The Add button was clicked');\n    }\n});\n\nExt.define('MyView', {\n    extend: 'Ext.Panel',\n    controller: 'myview',\n\n    items: [{\n        xtype: 'button',\n        text: 'Add',\n        handler: 'onAddClick',  // calls MyViewController's onAddClick method\n    }]\n});\n\nExt.onReady(function() {\n    new MyView({\n        renderTo: Ext.getBody(),\n        width: 400,\n        height: 200\n    });\n});\n","options":{}},{"id":"Ext.data.field.Boolean-0","name":"Ext.data.field.Boolean example #1","href":"#!/api/Ext.data.field.Boolean","code":"Ext.define('Task', {\n    extend: 'Ext.data.Model',\n    fields: [\n        { name: 'completed', type: 'boolean' }\n    ]\n});\n\nvar record = Ext.create('Task', { completed: true }),\n    value = record.get('completed');\n\nExt.toast(\"completed is \" + value);\n","options":{}},{"id":"Ext.data.field.Date-0","name":"Ext.data.field.Date example #1","href":"#!/api/Ext.data.field.Date","code":"Ext.define('User', {\n    extend: 'Ext.data.Model',\n    fields: [\n        { name: 'birthDate', type: 'date' }\n    ]\n});\n\nvar record = Ext.create('User', { birthDate: 'Tuesday, June 27, 2017' }),\n    value = record.get('birthDate');\n\nExt.toast(\"birthDate is \" + value);\n","options":{}},{"id":"Ext.data.field.Integer-0","name":"Ext.data.field.Integer example #1","href":"#!/api/Ext.data.field.Integer","code":"Ext.define('User', {\n    extend: 'Ext.data.Model',\n    fields: [\n        { name: 'age', type: 'integer' }\n    ]\n});\n\nvar record = Ext.create('User', { age: \"5.1\" }),\n    value = record.get('age');\n\nExt.toast(\"age is \" + value);\n","options":{}},{"id":"Ext.data.field.Number-0","name":"Ext.data.field.Number example #1","href":"#!/api/Ext.data.field.Number","code":"Ext.define('Product', {\n    extend: 'Ext.data.Model',\n    fields: [\n        { name: 'price', type: 'number' }\n    ]\n});\n\nvar record = Ext.create('Product', { price: \"5.1\" }),\n    value = record.get('price');\n\nExt.toast(\"price is \" + value);\n","options":{}},{"id":"Ext.data.field.String-0","name":"Ext.data.field.String example #1","href":"#!/api/Ext.data.field.String","code":"Ext.define('User', {\n    extend: 'Ext.data.Model',\n    fields: [\n        { name: 'firstName', type: 'string' }\n    ]\n});\n\nvar record = Ext.create('User', { firstName: \"Phil\" }),\n    value = record.get('firstName');\n\nExt.toast(\"firstName is \" + value);\n","options":{}},{"id":"Ext.data.NodeInterface-0","name":"Ext.data.NodeInterface example #1","href":"#!/api/Ext.data.NodeInterface","code":"Ext.tip.QuickTipManager.init(); // not required when using Ext.application()\n\nvar root = {\n    expanded: true,\n    children: [{\n        text: \"Leaf node (<i>no folder/arrow icon</i>)\",\n        leaf: true,\n        qtitle: 'Sample Tip Title',\n        qtip: 'Tip body'\n    }, {\n        text: \"Parent node expanded\",\n        expanded: true,\n        children: [{\n            text: \"Expanded leaf node 1\",\n            leaf: true\n        }, {\n            text: \"Expanded leaf node 2\",\n            leaf: true\n        }]\n    }, {\n        text: \"Parent node collapsed\",\n        children: [{\n            text: \"Collapsed leaf node 1\",\n            leaf: true\n        }, {\n            text: \"Collapsed leaf node 2\",\n            leaf: true\n        }]\n    }]\n};\n\nvar tree = Ext.create('Ext.tree.Panel', {\n    title: 'TreePanel',\n    width: 260,\n    height: 200,\n    root: root,\n    rootVisible: false,\n    renderTo: document.body,\n    bbar: ['The first node ', {\n        text: 'is a leaf?',\n        handler: function () {\n            var firstChild = tree.getRootNode().getChildAt(0);\n            Ext.Msg.alert('Is Leaf?', firstChild.isLeaf());\n        }\n    }, {\n        text: 'has text?',\n        handler: function () {\n            var firstChild = tree.getRootNode().getChildAt(0);\n            Ext.Msg.alert('Has Text:', firstChild.get('text'));\n        }\n    }]\n});\n","options":{}},{"id":"Ext.event.Event-0","name":"Ext.event.Event example #1","href":"#!/api/Ext.event.Event","code":"var container = Ext.create('Ext.Container', {\n    layout: 'fit',\n    renderTo: Ext.getBody(),\n    items: [{\n        id: 'logger',\n        html: 'Click somewhere!',\n        padding: 5\n    }]\n});\n\ncontainer.getEl().on({\n    click: function(e, node) {\n        var string = '';\n\n        string += 'You clicked at: <strong>{ x: ' + e.pageX + ', y: ' + e.pageY + ' }</strong> <i>(e.pageX & e.pageY)</i>';\n        string += '<hr />';\n        string += 'The HTMLElement you clicked has the className of: <strong>' + e.target.className + '</strong> <i>(e.target)</i>';\n        string += '<hr />';\n        string += 'The HTMLElement which has the listener has a className of: <strong>' + e.currentTarget.className + '</strong> <i>(e.currentTarget)</i>';\n\n        Ext.getCmp('logger').setHtml(string);\n    }\n});\n","options":{}},{"id":"Ext.field.InputMask-0","name":"Ext.field.InputMask example #1","href":"#!/api/Ext.field.InputMask","code":"Ext.create({\n    fullscreen: true,\n    xtype: 'formpanel',\n\n    items: [{\n        xtype: 'textfield',\n        label: 'Phone Number',\n        placeholder: '(xxx) xxx-xxxx',\n        inputMask: '(999) 999-9999'\n    }]\n});\n","options":{"toolkit=modern":true}},{"id":"Ext.list.Tree-0","name":"Ext.list.Tree example #1","href":"#!/api/Ext.list.Tree","code":"Ext.create({\n    xtype: 'treelist',\n    store: {\n        root: {\n        expanded: true,\n            children: [{\n                text: 'detention',\n                leaf: true,\n                iconCls: 'x-fa fa-frown-o'\n            }, {\n                text: 'homework',\n                expanded: true,\n                iconCls: 'x-fa fa-folder',\n                children: [{\n                    text: 'book report',\n                    leaf: true,\n                    iconCls: 'x-fa fa-book'\n                }, {\n                    text: 'algebra',\n                    leaf: true,\n                    iconCls: 'x-fa fa-graduation-cap'\n                }]\n            }, {\n                text: 'buy lottery tickets',\n                leaf: true,\n                iconCls: 'x-fa fa-usd'\n            }]\n        }\n    },\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.sparkline.Base-0","name":"Ext.sparkline.Base example #1","href":"#!/api/Ext.sparkline.Base","code":"new Ext.Panel({\n    height: 300,\n    width: 600,\n    frame: true,\n    title: 'Test Sparklines',\n    renderTo:document.body,\n    bodyPadding: 10,\n\n    // Named listeners will resolve to methods in this Panel\n    defaultListenerScope: true,\n\n    // Named references will be collected, and can be access from this Panel\n    referenceHolder: true,\n\n    items: [{\n        reference: 'values',\n        xtype: 'textfield',\n        fieldLabel: 'Values',\n        validator: function(v) {\n            var result = [];\n\n            v = v.replace(/\\s/g, '');\n            v = v.replace(/,$/, '');\n            v = v.split(',');\n            for (var i = 0; i < v.length; i++) {\n                if (!Ext.isNumeric(v[i])) {\n                    return 'Value must be a comma separated array of numbers';\n                }\n                result.push(parseInt(v[i], 10));\n            }\n            this.values = result;\n            return true;\n        },\n        listeners: {\n            change: 'onTypeChange',\n            buffer: 500,\n            afterrender: {\n                fn: 'afterTypeRender',\n                single: true\n            }\n        }\n    }, {\n        reference: 'type',\n        xtype: 'combobox',\n        fieldLabel: 'Type',\n        store: [\n            ['sparklineline',     'Line'],\n            ['sparklinebox',      'Box'],\n            ['sparklinebullet',   'Bullet'],\n            ['sparklinediscrete', 'Discrete'],\n            ['sparklinepie',      'Pie'],\n            ['sparklinetristate', 'TriState']\n        ],\n        value: 'sparklineline',\n        listeners: {\n            change: 'onTypeChange',\n            buffer: 500\n        }\n    }],\n\n    // Start with a line plot. \n    afterTypeRender: function(typeField) {\n        typeField.setValue('6,10,4,-3,7,2');\n    },\n\n    onTypeChange: function() {\n        var me = this,\n            refs = me.getReferences(),\n            config;\n\n        if (me.sparkLine) {\n            me.remove(me.sparkLine, true);\n        }\n        config = {\n            xtype: refs.type.getValue(),\n            values: refs.values.values,\n            height: 25,\n            width: 100                    \n        };\n       me.sparkLine = Ext.create(config);\n        me.add(me.sparkLine);\n\n        // Put under fields\n        me.sparkLine.el.dom.style.marginLeft = refs.type.labelEl.getWidth() + 'px';\n    }\n});\n","options":{}},{"id":"Ext.util.Sorter-0","name":"Ext.util.Sorter example #1","href":"#!/api/Ext.util.Sorter","code":"var store = Ext.create('Ext.data.Store', {\n      fields: ['firstName', 'level'],\n      sorters: 'level',\n\n      data: [\n          { firstName: 'Mitch',  level: 9000},\n          { firstName: 'Seth',   level: 42},\n          { firstName: 'Fred',   level: 510},\n          { firstName: 'Israel', level: 690},\n          { firstName: 'Greg',   level: 101},\n          { firstName: 'Pat',    level: 0},              \n          { firstName: 'Kevin',  level: 17},\n          { firstName: 'Brandon',level: 690},\n          { firstName: 'Gary',   level: 409},\n          { firstName: 'Scott',  level: 789}\n      ]\n   });\n\n   Ext.create('Ext.grid.Panel', {\n       title: 'Support',\n       store: store,\n       columns: [\n           { text: 'Name',  dataIndex: 'firstName' },\n           { text: 'Level', dataIndex: 'level' }\n       ],\n       height: 300,\n       width: 200,\n       renderTo: Ext.getBody()\n   });  \n","options":{}},{"id":"Ext.util.Sorter-1","name":"Ext.util.Sorter example #2","href":"#!/api/Ext.util.Sorter","code":"var store = Ext.create('Ext.data.Store', {\n      fields: ['firstName', 'spiritAnimal'],\n       sorters: [\n           {\n               // Sort by first letter of second word of spirit animal, in\n               // descending order\n               sorterFn: function(record1, record2) {\n                   var name1 = record1.data.spiritAnimal.split(' ')[1].substr(0,1),\n                       name2 = record2.data.spiritAnimal.split(' ')[1].substr(0,1);\n\n                   return name1 > name2 ? 1 : (name1 === name2) ? 0 : -1;\n               },\n               direction: 'DESC'\n           }\n       ],\n\n      data: [\n          { firstName: 'Mitch',  spiritAnimal: \"Panda Bear\"},\n          { firstName: 'Seth',   spiritAnimal: \"Rascally Rabbit\"},\n          { firstName: 'Fred',   spiritAnimal: \"Honey Badger\"},\n          { firstName: 'Israel', spiritAnimal: \"Mysterious Capybara\"},\n          { firstName: 'Greg',   spiritAnimal: \"Majestic Platypus\"},\n          { firstName: 'Kevin',  spiritAnimal: \"Sparkling Unicorn\"},\n          { firstName: 'Brandon',spiritAnimal: \"Pygmy Goat\"},\n          { firstName: 'Gary',   spiritAnimal: \"Suri Alpaca\"},\n          { firstName: 'Scott',  spiritAnimal: \"Ripe Armadillo\"},\n          { firstName: 'Pat',    spiritAnimal: \"Wiley Coyote\"}\n      ]\n   });\n\n   Ext.create('Ext.grid.Panel', {\n       title: 'Support',\n       store: store,\n       columns: [\n           { text: 'Name',          dataIndex: 'firstName' },\n           { text: 'Spirit Animal', dataIndex: 'spiritAnimal', flex: 1 }\n       ],\n       height: 310,\n       renderTo: Ext.getBody()\n   });\n","options":{}},{"id":"Ext.util.TaskManager-0","name":"Ext.util.TaskManager example #1","href":"#!/api/Ext.util.TaskManager","code":"var task, clock;\n\nclock = Ext.getBody().appendChild({\n    id: 'clock'\n});\n\n// Start a simple clock task that updates a div once per second \ntask = {\n    run: function() {\n        clock.setHtml(Ext.Date.format(new Date(), 'g:i:s A'));\n    },\n    interval: 1000\n};\n\nExt.TaskManager.start(task);\n","options":{}},{"id":"Ext.util.TaskRunner-0","name":"Ext.util.TaskRunner example #1","href":"#!/api/Ext.util.TaskRunner","code":"var runner = new Ext.util.TaskRunner(),\n    clock, updateClock, task;\n\nclock = Ext.getBody().appendChild({\n    id: 'clock'\n});\n\n// Start a simple clock task that updates a div once per second\nupdateClock = function() {\n    clock.setHtml(Ext.Date.format(new Date(), 'g:i:s A'));\n};\n\ntask = runner.start({\n    run: updateClock,\n    interval: 1000\n});\n","options":{}},{"id":"Ext.util.TaskRunner-1","name":"Ext.util.TaskRunner example #2","href":"#!/api/Ext.util.TaskRunner","code":"var clock, updateClock, task;\n\nclock = Ext.getBody().appendChild({\n    id: 'clock'\n});\n\n// Start a simple clock task that updates a div once per second\nupdateClock = function() {\n    clock.setHtml(Ext.Date.format(new Date(), 'g:i:s A'));\n};\n\nvar task = Ext.TaskManager.start({\n    run: updateClock,\n    interval: 1000\n});\n","options":{}},{"id":"Ext.Action-0","name":"Ext.Action example #1","href":"#!/api/Ext.Action","code":"Ext.define('ActionsExampleController', {\n    extend: 'Ext.app.ViewController',\n    alias: 'controller.actionsexample',\n\n    onOperationClick: function() {\n        Ext.Msg.alert('Click', 'Perform the operation');\n    },\n\n    onOperationToggle: function(btn, pressed) {\n        // The action controls all UI components created from it.\n        this.view.getAction('operation').setDisabled(pressed);\n    }\n});\n\nExt.define('ActionsPanel', {\n    extend: 'Ext.panel.Panel',\n    controller: 'actionsexample',\n\n    title: 'Actions',\n    width: 500,\n    height: 300,\n\n    // Define the shared Action.  Each Component created from these will\n    // have the same display text, icon and tooltip, and will invoke the\n    // same controller method on click.\n    actions: {\n        operation: {\n            text: 'Do operation',\n             handler: 'onOperationClick',\n            glyph: 'xf005@FontAwesome',\n            tooltip: 'Perform the operation'\n        },\n        disableOperation: {\n            text: 'Disable operation',\n            enableToggle: true,\n            toggleHandler: 'onOperationToggle',\n            tooltip: 'Disable the operation'\n        }\n    },\n\n    // Actions are interpreted as Buttons by this view.\n    // Other descendants such as Menus and Toolbars have\n    // their own defaults.\n    defaultActionType: 'button',\n\n    tools: [\n        '@operation'\n    ],\n\n    tbar: [\n        // Add the Action directly to a toolbar as a menu button\n        '@operation',\n        {\n            text: 'Action Menu',\n            menu: [\n                // Add the Action to a menu as a text item\n                '@operation'\n            ]\n        }, '@disableOperation'\n    ],\n\n    bodyPadding: 10,\n    layout: {\n        type: 'vbox',\n        align: 'stretch'\n    },\n    items: [\n        // Add the Action to the panel body.\n        // defaultActionType will ensure it is converted to a Button.\n        '@operation'\n    ]\n});\n\nExt.QuickTips.init();\nnew ActionsPanel({\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.button.Button-0","name":"Ext.button.Button example #1","href":"#!/api/Ext.button.Button","code":"Ext.create('Ext.Button', {\n    text: 'Click me',\n    renderTo: Ext.getBody(),\n    handler: function() {\n        alert('You clicked the button!');\n    }\n});\n","options":{}},{"id":"Ext.button.Button-1","name":"Ext.button.Button example #2","href":"#!/api/Ext.button.Button","code":"Ext.create('Ext.Button', {\n    text    : 'Dynamic Handler Button',\n    renderTo: Ext.getBody(),\n    handler : function() {\n        // this button will spit out a different number every time you click it.\n        // so firstly we must check if that number is already set:\n        if (this.clickCount) {\n            // looks like the property is already set, so lets just add 1 to that number and alert the user\n            this.clickCount++;\n            alert('You have clicked the button \"' + this.clickCount + '\" times.\\n\\nTry clicking it again..');\n        } else {\n            // if the clickCount property is not set, we will set it and alert the user\n            this.clickCount = 1;\n            alert('You just clicked the button for the first time!\\n\\nTry pressing it again..');\n        }\n    }\n});\n","options":{}},{"id":"Ext.button.Button-2","name":"Ext.button.Button example #3","href":"#!/api/Ext.button.Button","code":"Ext.create('Ext.Container', {\n    renderTo: Ext.getBody(),\n    items   : [\n        {\n            xtype: 'button',\n            text : 'My Button'\n        }\n    ]\n});\n","options":{}},{"id":"Ext.button.Button-3","name":"Ext.button.Button example #4","href":"#!/api/Ext.button.Button","code":"Ext.create('Ext.Button', {\n    renderTo: document.body,\n    text    : 'Click me',\n    scale   : 'large'\n});\n","options":{}},{"id":"Ext.button.Button-4","name":"Ext.button.Button example #5","href":"#!/api/Ext.button.Button","code":"Ext.create('Ext.Button', {\n    renderTo: Ext.getBody(),\n    text: 'Click Me',\n    enableToggle: true\n});\n","options":{}},{"id":"Ext.button.Button-5","name":"Ext.button.Button example #6","href":"#!/api/Ext.button.Button","code":"Ext.create('Ext.Button', {\n    text      : 'Menu button',\n    renderTo  : Ext.getBody(),\n    arrowAlign: 'bottom',\n    menu      : [\n        {text: 'Item 1'},\n        {text: 'Item 2'},\n        {text: 'Item 3'},\n        {text: 'Item 4'}\n    ]\n});\n","options":{}},{"id":"Ext.button.Button-6","name":"Ext.button.Button example #7","href":"#!/api/Ext.button.Button","code":"Ext.create('Ext.Button', {\n    text     : 'Button',\n    renderTo : Ext.getBody(),\n    listeners: {\n        click: function() {\n            // this == the button, as we are in the local scope\n            this.setText('I was clicked!');\n        },\n        mouseover: function() {\n            // set a new config which says we moused over, if not already set\n            if (!this.mousedOver) {\n                this.mousedOver = true;\n                alert('You moused over a button!\\n\\nI wont do this again.');\n            }\n        }\n    }\n});\n","options":{}},{"id":"Ext.button.Cycle-0","name":"Ext.button.Cycle example #1","href":"#!/api/Ext.button.Cycle","code":"Ext.create('Ext.button.Cycle', {\n    showText: true,\n    prependText: 'View as ',\n    renderTo: Ext.getBody(),\n    menu: {\n        id: 'view-type-menu',\n        items: [{\n            text: 'text only',\n            iconCls: 'view-text',\n            checked: true\n        },{\n            text: 'HTML',\n            iconCls: 'view-html'\n        }]\n    },\n    changeHandler: function(cycleBtn, activeItem) {\n        Ext.Msg.alert('Change View', activeItem.text);\n    }\n});\n","options":{}},{"id":"Ext.button.Segmented-0","name":"Ext.button.Segmented example #1","href":"#!/api/Ext.button.Segmented","code":"Ext.create('Ext.button.Segmented', {            \n     renderTo: Ext.getBody(),\n     allowMultiple: true,\n     items: [{\n          text: 'Segment Item 1',\n          menu: [{\n              text: 'Menu Item 1'\n          }]\n     },{\n          text: 'Segment Item 2',\n          tooltip: 'My custom tooltip'\n     },{\n          text: 'Segment Item 3'\n     }],\n     listeners: {\n          toggle: function(container, button, pressed) {\n               console.log(\"User toggled the '\" + button.text + \"' button: \" + (pressed ? 'on' : 'off'));\n          }\n     }\n});\n","options":{"@preview":true}},{"id":"Ext.button.Split-0","name":"Ext.button.Split example #1","href":"#!/api/Ext.button.Split","code":"// display a dropdown menu:\nExt.create('Ext.button.Split', {\n    renderTo: Ext.getBody(),\n    text: 'Options',\n    // handle a click on the button itself\n    handler: function() {\n        alert(\"The button was clicked\");\n    },\n    menu: new Ext.menu.Menu({\n        items: [\n            // these will render as dropdown menu items when the arrow is clicked:\n            {text: 'Item 1', handler: function(){ alert(\"Item 1 clicked\"); }},\n            {text: 'Item 2', handler: function(){ alert(\"Item 2 clicked\"); }}\n        ]\n    })\n});\n","options":{}},{"id":"Ext.Component-0","name":"Ext.Component example #1","href":"#!/api/Ext.Component","code":"Ext.create('Ext.Component', {\n    html: 'Hello world!',\n    width: 300,\n    height: 200,\n    padding: 20,\n    style: {\n        color: '#FFFFFF',\n        backgroundColor:'#000000'\n    },\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.container.ButtonGroup-0","name":"Ext.container.ButtonGroup example #1","href":"#!/api/Ext.container.ButtonGroup","code":"Ext.create('Ext.panel.Panel', {\n    title: 'Panel with ButtonGroup',\n    width: 300,\n    height:200,\n    renderTo: document.body,\n    bodyPadding: 10,\n    html: 'HTML Panel Content',\n    tbar: [{\n        xtype: 'buttongroup',\n        columns: 3,\n        title: 'Clipboard',\n        items: [{\n            text: 'Paste',\n            scale: 'large',\n            rowspan: 3,\n            iconCls: 'add',\n            iconAlign: 'top',\n            cls: 'btn-as-arrow'\n        },{\n            xtype:'splitbutton',\n            text: 'Menu Button',\n            scale: 'large',\n            rowspan: 3,\n            iconCls: 'add',\n            iconAlign: 'top',\n            arrowAlign:'bottom',\n            menu: [{ text: 'Menu Item 1' }]\n        },{\n            xtype:'splitbutton', text: 'Cut', iconCls: 'add16', menu: [{text: 'Cut Menu Item'}]\n        },{\n            text: 'Copy', iconCls: 'add16'\n        },{\n            text: 'Format', iconCls: 'add16'\n        }]\n    }]\n});\n","options":{}},{"id":"Ext.container.Container-0","name":"Ext.container.Container example #1","href":"#!/api/Ext.container.Container","code":"// Explicitly create a Container\nExt.create('Ext.container.Container', {\n    layout: {\n        type: 'hbox'\n    },\n    width: 400,\n    renderTo: Ext.getBody(),\n    border: 1,\n    style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},\n    defaults: {\n        labelWidth: 80,\n        // implicitly create Container by specifying xtype\n        xtype: 'datefield',\n        flex: 1,\n        style: {\n            padding: '10px'\n        }\n    },\n    items: [{\n        xtype: 'datefield',\n        name: 'startDate',\n        fieldLabel: 'Start date'\n    },{\n        xtype: 'datefield',\n        name: 'endDate',\n        fieldLabel: 'End date'\n    }]\n});\n","options":{}},{"id":"Ext.container.Viewport-0","name":"Ext.container.Viewport example #1","href":"#!/api/Ext.container.Viewport","code":"Ext.create('Ext.container.Viewport', {\n    layout: 'border',\n    items: [{\n        region: 'north',\n        html: '<h1 class=\"x-panel-header\">Page Title</h1>',\n        border: false,\n        margin: '0 0 5 0'\n    }, {\n        region: 'west',\n        collapsible: true,\n        title: 'Navigation',\n        width: 150\n        // could use a TreePanel or AccordionLayout for navigational items\n    }, {\n        region: 'south',\n        title: 'South Panel',\n        collapsible: true,\n        html: 'Information goes here',\n        split: true,\n        height: 100,\n        minHeight: 100\n    }, {\n        region: 'east',\n        title: 'East Panel',\n        collapsible: true,\n        split: true,\n        width: 150\n    }, {\n        region: 'center',\n        xtype: 'tabpanel', // TabPanel itself has no title\n        activeTab: 0,      // First tab active by default\n        items: {\n            title: 'Default Tab',\n            html: 'The first tab\\'s content. Others may be added dynamically'\n        }\n    }]\n});\n","options":{}},{"id":"Ext.Editor-0","name":"Ext.Editor example #1","href":"#!/api/Ext.Editor","code":"var form = Ext.create('Ext.form.Panel', {\n    renderTo: Ext.getBody(),\n    width: 380,\n    height: 400,\n    title: 'User Details',\n    bodyPadding: 10,\n    items: [{\n        html: 'Double-Click on the header title, this, or the field label to edit',\n        height:30\n    },{\n        fieldLabel: 'First Name',\n        name: 'firstname',\n        xtype: 'textfield'\n    }]\n});\n\nvar editor = new Ext.Editor({\n    // update the innerHTML of the bound element \n    // when editing completes\n    updateEl: true,\n    alignment: 'l-l',\n    autoSize: {\n        width: 'boundEl'\n    },\n    field: {\n        xtype: 'textfield'\n    }\n});\n\nform.header.getTitle().textEl.on('dblclick', function(e, t) {\n    editor.startEdit(t);\n});\n\nform.getTargetEl().on('dblclick', function(e, t) {\n    editor.startEdit(t);\n    // Manually focus, since clicking on the label will focus the text field\n    editor.field.focus(50, true);\n});\n","options":{}},{"id":"Ext.form.Basic-0","name":"Ext.form.Basic example #1","href":"#!/api/Ext.form.Basic","code":"Ext.create('Ext.form.Panel', {\n    title: 'Basic Form',\n    renderTo: Ext.getBody(),\n    bodyPadding: 5,\n    width: 350,\n\n    // Any configuration items here will be automatically passed along to\n    // the Ext.form.Basic instance when it gets created.\n\n    // The form will submit an AJAX request to this URL when submitted\n    url: 'save-form.php',\n\n    items: [{\n        xtype: 'textfield',\n        fieldLabel: 'Field',\n        name: 'theField'\n    }],\n\n    buttons: [{\n        text: 'Submit',\n        handler: function() {\n            // The getForm() method returns the Ext.form.Basic instance:\n            var form = this.up('form').getForm();\n            if (form.isValid()) {\n                // Submit the Ajax request and handle the response\n                form.submit({\n                    success: function(form, action) {\n                       Ext.Msg.alert('Success', action.result.message);\n                    },\n                    failure: function(form, action) {\n                        Ext.Msg.alert('Failed', action.result ? action.result.message : 'No response');\n                    }\n                });\n            }\n        }\n    }]\n});\n","options":{}},{"id":"Ext.form.CheckboxGroup-0","name":"Ext.form.CheckboxGroup example #1","href":"#!/api/Ext.form.CheckboxGroup","code":"Ext.create('Ext.form.Panel', {\n    title: 'Checkbox Group',\n    width: 300,\n    height: 125,\n    bodyPadding: 10,\n    renderTo: Ext.getBody(),\n    items:[{\n        xtype: 'checkboxgroup',\n        fieldLabel: 'Two Columns',\n        // Arrange checkboxes into two columns, distributed vertically\n        columns: 2,\n        vertical: true,\n        items: [\n            { boxLabel: 'Item 1', name: 'rb', inputValue: '1' },\n            { boxLabel: 'Item 2', name: 'rb', inputValue: '2', checked: true },\n            { boxLabel: 'Item 3', name: 'rb', inputValue: '3' },\n            { boxLabel: 'Item 4', name: 'rb', inputValue: '4' },\n            { boxLabel: 'Item 5', name: 'rb', inputValue: '5' },\n            { boxLabel: 'Item 6', name: 'rb', inputValue: '6' }\n        ]\n    }]\n});\n","options":{}},{"id":"Ext.form.field.Checkbox-0","name":"Ext.form.field.Checkbox example #1","href":"#!/api/Ext.form.field.Checkbox","code":"Ext.create('Ext.form.Panel', {\n    bodyPadding: 10,\n    width: 300,\n    title: 'Pizza Order',\n    items: [\n        {\n            xtype: 'fieldcontainer',\n            fieldLabel: 'Toppings',\n            defaultType: 'checkboxfield',\n            items: [\n                {\n                    boxLabel  : 'Anchovies',\n                    name      : 'topping',\n                    inputValue: '1',\n                    id        : 'checkbox1'\n                }, {\n                    boxLabel  : 'Artichoke Hearts',\n                    name      : 'topping',\n                    inputValue: '2',\n                    checked   : true,\n                    id        : 'checkbox2'\n                }, {\n                    boxLabel  : 'Bacon',\n                    name      : 'topping',\n                    inputValue: '3',\n                    id        : 'checkbox3'\n                }\n            ]\n        }\n    ],\n    bbar: [\n        {\n            text: 'Select Bacon',\n            handler: function() {\n                Ext.getCmp('checkbox3').setValue(true);\n            }\n        },\n        '-',\n        {\n            text: 'Select All',\n            handler: function() {\n                Ext.getCmp('checkbox1').setValue(true);\n                Ext.getCmp('checkbox2').setValue(true);\n                Ext.getCmp('checkbox3').setValue(true);\n            }\n        },\n        {\n            text: 'Deselect All',\n            handler: function() {\n                Ext.getCmp('checkbox1').setValue(false);\n                Ext.getCmp('checkbox2').setValue(false);\n                Ext.getCmp('checkbox3').setValue(false);\n            }\n        }\n    ],\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.form.field.ComboBox-0","name":"Ext.form.field.ComboBox example #1","href":"#!/api/Ext.form.field.ComboBox","code":"// The data store containing the list of states\nvar states = Ext.create('Ext.data.Store', {\n    fields: ['abbr', 'name'],\n    data : [\n        {\"abbr\":\"AL\", \"name\":\"Alabama\"},\n        {\"abbr\":\"AK\", \"name\":\"Alaska\"},\n        {\"abbr\":\"AZ\", \"name\":\"Arizona\"}\n    ]\n});\n\n// Create the combo box, attached to the states data store\nExt.create('Ext.form.ComboBox', {\n    fieldLabel: 'Choose State',\n    store: states,\n    queryMode: 'local',\n    displayField: 'name',\n    valueField: 'abbr',\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.form.field.ComboBox-1","name":"Ext.form.field.ComboBox example #2","href":"#!/api/Ext.form.field.ComboBox","code":"var states = Ext.create('Ext.data.Store', {\n    fields: ['abbr', 'name'],\n    data : [\n        {\"abbr\":\"AL\", \"name\":\"Alabama\"},\n        {\"abbr\":\"AK\", \"name\":\"Alaska\"},\n        {\"abbr\":\"AZ\", \"name\":\"Arizona\"}\n    ]\n});\n\nExt.create('Ext.form.ComboBox', {\n    fieldLabel: 'Choose State',\n    store: states,\n    queryMode: 'local',\n    valueField: 'abbr',\n    renderTo: Ext.getBody(),\n    // Template for the dropdown menu.\n    // Note the use of the \"x-list-plain\" and \"x-boundlist-item\" class,\n    // this is required to make the items selectable.\n    tpl: Ext.create('Ext.XTemplate',\n        '<ul class=\"x-list-plain\"><tpl for=\".\">',\n            '<li role=\"option\" class=\"x-boundlist-item\">{abbr} - {name}</li>',\n        '</tpl></ul>'\n    ),\n    // template for the content inside text field\n    displayTpl: Ext.create('Ext.XTemplate',\n        '<tpl for=\".\">',\n            '{abbr} - {name}',\n        '</tpl>'\n    )\n});\n","options":{}},{"id":"Ext.form.field.Date-0","name":"Ext.form.field.Date example #1","href":"#!/api/Ext.form.field.Date","code":"Ext.create('Ext.form.Panel', {\n    renderTo: Ext.getBody(),\n    width: 300,\n    bodyPadding: 10,\n    title: 'Dates',\n    items: [{\n        xtype: 'datefield',\n        anchor: '100%',\n        fieldLabel: 'From',\n        name: 'from_date',\n        maxValue: new Date()  // limited to the current date or prior\n    }, {\n        xtype: 'datefield',\n        anchor: '100%',\n        fieldLabel: 'To',\n        name: 'to_date',\n        value: new Date()  // defaults to today\n    }]\n});\n","options":{}},{"id":"Ext.form.field.Date-1","name":"Ext.form.field.Date example #2","href":"#!/api/Ext.form.field.Date","code":"Ext.create('Ext.form.Panel', {\n    renderTo: Ext.getBody(),\n    width: 300,\n    bodyPadding: 10,\n    title: 'Dates',\n    items: [{\n        xtype: 'datefield',\n        anchor: '100%',\n        fieldLabel: 'Date',\n        name: 'date',\n        // The value matches the format; will be parsed and displayed using that format.\n        format: 'm d Y',\n        value: '02 04 1978'\n    }, {\n        xtype: 'datefield',\n        anchor: '100%',\n        fieldLabel: 'Date',\n        name: 'date',\n        // The value does not match the format, but does match an altFormat; will be parsed\n        // using the altFormat and displayed using the format.\n        format: 'm d Y',\n        altFormats: 'm,d,Y|m.d.Y',\n        value: '02.04.1978'\n    }]\n});\n","options":{}},{"id":"Ext.form.field.Display-0","name":"Ext.form.field.Display example #1","href":"#!/api/Ext.form.field.Display","code":"Ext.create('Ext.form.Panel', {\n    renderTo: Ext.getBody(),\n    width: 175,\n    height: 150,\n    bodyPadding: 10,\n    title: 'Final Score',\n    items: [{\n        xtype: 'displayfield',\n        fieldLabel: 'Home',\n        name: 'home_score',\n        value: '10'\n    }, {\n        xtype: 'displayfield',\n        fieldLabel: 'Visitor',\n        name: 'visitor_score',\n        value: '11'\n    }],\n    buttons: [{\n        text: 'Update'\n    }]\n});\n","options":{}},{"id":"Ext.form.field.File-0","name":"Ext.form.field.File example #1","href":"#!/api/Ext.form.field.File","code":"Ext.create('Ext.form.Panel', {\n    title: 'Upload a Photo',\n    width: 400,\n    bodyPadding: 10,\n    frame: true,\n    renderTo: Ext.getBody(),\n    items: [{\n        xtype: 'filefield',\n        name: 'photo',\n        fieldLabel: 'Photo',\n        labelWidth: 50,\n        msgTarget: 'side',\n        allowBlank: false,\n        anchor: '100%',\n        buttonText: 'Select Photo...'\n    }],\n\n    buttons: [{\n        text: 'Upload',\n        handler: function() {\n            var form = this.up('form').getForm();\n            if(form.isValid()) {\n                form.submit({\n                    url: 'photo-upload.php',\n                    waitMsg: 'Uploading your photo...',\n                    success: function(fp, o) {\n                        Ext.Msg.alert('Success', 'Your photo \"' + o.result.file + '\" has been uploaded.');\n                    }\n                });\n            }\n        }\n    }]\n});\n","options":{}},{"id":"Ext.form.field.Hidden-0","name":"Ext.form.field.Hidden example #1","href":"#!/api/Ext.form.field.Hidden","code":"new Ext.form.Panel({\n    title: 'My Form',\n    items: [{\n        xtype: 'textfield',\n        fieldLabel: 'Text Field',\n        name: 'text_field',\n        value: 'value from text field'\n    }, {\n        xtype: 'hiddenfield',\n        name: 'hidden_field_1',\n        value: 'value from hidden field'\n    }],\n\n    buttons: [{\n        text: 'Submit',\n        handler: function() {\n            this.up('form').getForm().submit({\n                params: {\n                    hidden_field_2: 'value from submit call'\n                }\n            });\n        }\n    }]\n});\n","options":{}},{"id":"Ext.form.field.HtmlEditor-0","name":"Ext.form.field.HtmlEditor example #1","href":"#!/api/Ext.form.field.HtmlEditor","code":"Ext.tip.QuickTipManager.init();  // enable tooltips\nExt.create('Ext.form.HtmlEditor', {\n    width: 580,\n    height: 250,\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.form.field.HtmlEditor-1","name":"Ext.form.field.HtmlEditor example #2","href":"#!/api/Ext.form.field.HtmlEditor","code":"Ext.tip.QuickTipManager.init();  // enable tooltips\nnew Ext.panel.Panel({\n    title: 'HTML Editor',\n    renderTo: Ext.getBody(),\n    width: 550,\n    height: 250,\n    frame: true,\n    layout: 'fit',\n    items: {\n        xtype: 'htmleditor',\n        enableColors: false,\n        enableAlignments: false\n    }\n});\n","options":{}},{"id":"Ext.form.field.Number-0","name":"Ext.form.field.Number example #1","href":"#!/api/Ext.form.field.Number","code":"Ext.create('Ext.form.Panel', {\n    title: 'On The Wall',\n    width: 300,\n    bodyPadding: 10,\n    renderTo: Ext.getBody(),\n    items: [{\n        xtype: 'numberfield',\n        anchor: '100%',\n        name: 'bottles',\n        fieldLabel: 'Bottles of Beer',\n        value: 99,\n        maxValue: 99,\n        minValue: 0\n    }],\n    buttons: [{\n        text: 'Take one down, pass it around',\n        handler: function() {\n            this.up('form').down('[name=bottles]').spinDown();\n        }\n    }]\n});\n","options":{}},{"id":"Ext.form.field.Number-1","name":"Ext.form.field.Number example #2","href":"#!/api/Ext.form.field.Number","code":"Ext.create('Ext.form.Panel', {\n    title: 'Personal Info',\n    width: 300,\n    bodyPadding: 10,\n    renderTo: Ext.getBody(),\n    items: [{\n        xtype: 'numberfield',\n        anchor: '100%',\n        name: 'age',\n        fieldLabel: 'Age',\n        minValue: 0, //prevents negative numbers\n\n        // Remove spinner buttons, and arrow key and mouse wheel listeners\n        hideTrigger: true,\n        keyNavEnabled: false,\n        mouseWheelEnabled: false\n    }]\n});\n","options":{}},{"id":"Ext.form.field.Number-2","name":"Ext.form.field.Number example #3","href":"#!/api/Ext.form.field.Number","code":"Ext.create('Ext.form.Panel', {\n    renderTo: Ext.getBody(),\n    title: 'Step',\n    width: 300,\n    bodyPadding: 10,\n    items: [{\n        xtype: 'numberfield',\n        anchor: '100%',\n        name: 'evens',\n        fieldLabel: 'Even Numbers',\n\n        // Set step so it skips every other number\n        step: 2,\n        value: 0,\n\n        // Add change handler to force user-entered numbers to evens\n        listeners: {\n            change: function(field, value) {\n                value = parseInt(value, 10);\n                field.setValue(value + value % 2);\n            }\n        }\n    }]\n});\n","options":{}},{"id":"Ext.form.field.Radio-0","name":"Ext.form.field.Radio example #1","href":"#!/api/Ext.form.field.Radio","code":"Ext.create('Ext.form.Panel', {\n    title      : 'Order Form',\n    width      : 300,\n    bodyPadding: 10,\n    renderTo   : Ext.getBody(),\n    items: [\n        {\n            xtype      : 'fieldcontainer',\n            fieldLabel : 'Size',\n            defaultType: 'radiofield',\n            defaults: {\n                flex: 1\n            },\n            layout: 'hbox',\n            items: [\n                {\n                    boxLabel  : 'M',\n                    name      : 'size',\n                    inputValue: 'm',\n                    id        : 'radio1'\n                }, {\n                    boxLabel  : 'L',\n                    name      : 'size',\n                    inputValue: 'l',\n                    id        : 'radio2'\n                }, {\n                    boxLabel  : 'XL',\n                    name      : 'size',\n                    inputValue: 'xl',\n                    id        : 'radio3'\n                }\n            ]\n        },\n        {\n            xtype      : 'fieldcontainer',\n            fieldLabel : 'Color',\n            defaultType: 'radiofield',\n            defaults: {\n                flex: 1\n            },\n            layout: 'hbox',\n            items: [\n                {\n                    boxLabel  : 'Blue',\n                    name      : 'color',\n                    inputValue: 'blue',\n                    id        : 'radio4'\n                }, {\n                    boxLabel  : 'Grey',\n                    name      : 'color',\n                    inputValue: 'grey',\n                    id        : 'radio5'\n                }, {\n                    boxLabel  : 'Black',\n                    name      : 'color',\n                    inputValue: 'black',\n                    id        : 'radio6'\n                }\n            ]\n        }\n    ],\n    bbar: [\n        {\n            text: 'Smaller Size',\n            handler: function() {\n                var radio1 = Ext.getCmp('radio1'),\n                    radio2 = Ext.getCmp('radio2'),\n                    radio3 = Ext.getCmp('radio3');\n\n                //if L is selected, change to M\n                if (radio2.getValue()) {\n                    radio1.setValue(true);\n                    return;\n                }\n\n                //if XL is selected, change to L\n                if (radio3.getValue()) {\n                    radio2.setValue(true);\n                    return;\n                }\n\n                //if nothing is set, set size to S\n                radio1.setValue(true);\n            }\n        },\n        {\n            text: 'Larger Size',\n            handler: function() {\n                var radio1 = Ext.getCmp('radio1'),\n                    radio2 = Ext.getCmp('radio2'),\n                    radio3 = Ext.getCmp('radio3');\n\n                //if M is selected, change to L\n                if (radio1.getValue()) {\n                    radio2.setValue(true);\n                    return;\n                }\n\n                //if L is selected, change to XL\n                if (radio2.getValue()) {\n                    radio3.setValue(true);\n                    return;\n                }\n\n                //if nothing is set, set size to XL\n                radio3.setValue(true);\n            }\n        },\n        '-',\n        {\n            text: 'Select color',\n            menu: {\n                indent: false,\n                items: [\n                    {\n                        text: 'Blue',\n                        handler: function() {\n                            var radio = Ext.getCmp('radio4');\n                            radio.setValue(true);\n                        }\n                    },\n                    {\n                        text: 'Grey',\n                        handler: function() {\n                            var radio = Ext.getCmp('radio5');\n                            radio.setValue(true);\n                        }\n                    },\n                    {\n                        text: 'Black',\n                        handler: function() {\n                            var radio = Ext.getCmp('radio6');\n                            radio.setValue(true);\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n});\n","options":{}},{"id":"Ext.form.field.Spinner-0","name":"Ext.form.field.Spinner example #1","href":"#!/api/Ext.form.field.Spinner","code":"Ext.define('Ext.ux.CustomSpinner', {\n    extend: 'Ext.form.field.Spinner',\n    alias: 'widget.customspinner',\n\n    // override onSpinUp (using step isn't neccessary)\n    onSpinUp: function() {\n        var me = this;\n        if (!me.readOnly) {\n            var val = parseInt(me.getValue().split(' '), 10)||0; // gets rid of \" Pack\", defaults to zero on parse failure\n            me.setValue((val + me.step) + ' Pack');\n        }\n    },\n\n    // override onSpinDown\n    onSpinDown: function() {\n        var me = this;\n        if (!me.readOnly) {\n           var val = parseInt(me.getValue().split(' '), 10)||0; // gets rid of \" Pack\", defaults to zero on parse failure\n           if (val <= me.step) {\n               me.setValue('Dry!');\n           } else {\n               me.setValue((val - me.step) + ' Pack');\n           }\n        }\n    }\n});\n\nExt.create('Ext.form.FormPanel', {\n    title: 'Form with SpinnerField',\n    bodyPadding: 5,\n    width: 350,\n    renderTo: Ext.getBody(),\n    items:[{\n        xtype: 'customspinner',\n        fieldLabel: 'How Much Beer?',\n        step: 6\n    }]\n});\n","options":{}},{"id":"Ext.form.field.Tag-0","name":"Ext.form.field.Tag example #1","href":"#!/api/Ext.form.field.Tag","code":"var shows = Ext.create('Ext.data.Store', {\n    fields: ['id','show'],\n    data: [\n        {id: 0, show: 'Battlestar Galactica'},\n        {id: 1, show: 'Doctor Who'},\n        {id: 2, show: 'Farscape'},\n        {id: 3, show: 'Firefly'},\n        {id: 4, show: 'Star Trek'},\n        {id: 5, show: 'Star Wars: Christmas Special'}\n    ]\n});\n\nExt.create('Ext.form.Panel', {\n    renderTo: Ext.getBody(),\n    title: 'Sci-Fi Television',\n    height: 200,\n    width: 500,\n    items: [{\n        xtype: 'tagfield',\n        fieldLabel: 'Select a Show',\n        store: shows,\n        displayField: 'show',\n        valueField: 'id',\n        queryMode: 'local',\n        filterPickList: true\n    }]\n});\n","options":{}},{"id":"Ext.form.field.Text-0","name":"Ext.form.field.Text example #1","href":"#!/api/Ext.form.field.Text","code":"Ext.create('Ext.form.Panel', {\n    title: 'Contact Info',\n    width: 300,\n    bodyPadding: 10,\n    renderTo: Ext.getBody(),\n    items: [{\n        xtype: 'textfield',\n        name: 'name',\n        fieldLabel: 'Name',\n        allowBlank: false  // requires a non-empty value\n    }, {\n        xtype: 'textfield',\n        name: 'email',\n        fieldLabel: 'Email Address',\n        vtype: 'email'  // requires value to be a valid email address format\n    }]\n});\n","options":{}},{"id":"Ext.form.field.Text-1","name":"Ext.form.field.Text example #2","href":"#!/api/Ext.form.field.Text","code":"// A simple subclass of Base that creates a HTML5 search field. Redirects to the\n// searchUrl when the Enter key is pressed.\nExt.define('Ext.form.SearchField', {\n    extend: 'Ext.form.field.Text',\n    alias: 'widget.searchfield',\n\n    inputType: 'search',\n\n    // Config defining the search URL\n    searchUrl: 'http://www.google.com/search?q={0}',\n\n    // Add specialkey listener\n    initComponent: function() {\n        this.callParent();\n        this.on('specialkey', this.checkEnterKey, this);\n    },\n\n    // Handle enter key presses, execute the search if the field has a value\n    checkEnterKey: function(field, e) {\n        var value = this.getValue();\n        if (e.getKey() === e.ENTER && !Ext.isEmpty(value)) {\n            location.href = Ext.String.format(this.searchUrl, value);\n        }\n    }\n});\n\nExt.create('Ext.form.Panel', {\n    title: 'Base Example',\n    bodyPadding: 5,\n    width: 250,\n\n    // Fields will be arranged vertically, stretched to full width\n    layout: 'anchor',\n    defaults: {\n        anchor: '100%'\n    },\n    items: [{\n        xtype: 'searchfield',\n        fieldLabel: 'Search',\n        name: 'query'\n    }],\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.form.field.TextArea-0","name":"Ext.form.field.TextArea example #1","href":"#!/api/Ext.form.field.TextArea","code":"Ext.create('Ext.form.FormPanel', {\n    title      : 'Sample TextArea',\n    width      : 400,\n    bodyPadding: 10,\n    renderTo   : Ext.getBody(),\n    items: [{\n        xtype     : 'textareafield',\n        grow      : true,\n        name      : 'message',\n        fieldLabel: 'Message',\n        anchor    : '100%'\n    }]\n});\n","options":{}},{"id":"Ext.form.field.Time-0","name":"Ext.form.field.Time example #1","href":"#!/api/Ext.form.field.Time","code":"Ext.create('Ext.form.Panel', {\n    title: 'Time Card',\n    width: 300,\n    bodyPadding: 10,\n    renderTo: Ext.getBody(),\n    items: [{\n        xtype: 'timefield',\n        name: 'in',\n        fieldLabel: 'Time In',\n        minValue: '6:00 AM',\n        maxValue: '8:00 PM',\n        increment: 30,\n        anchor: '100%'\n    }, {\n        xtype: 'timefield',\n        name: 'out',\n        fieldLabel: 'Time Out',\n        minValue: '6:00 AM',\n        maxValue: '8:00 PM',\n        increment: 30,\n        anchor: '100%'\n   }]\n});\n","options":{}},{"id":"Ext.form.FieldContainer-0","name":"Ext.form.FieldContainer example #1","href":"#!/api/Ext.form.FieldContainer","code":"Ext.create('Ext.form.Panel', {\n    title: 'FieldContainer Example',\n    width: 550,\n    bodyPadding: 10,\n\n    items: [{\n        xtype: 'fieldcontainer',\n        fieldLabel: 'Last Three Jobs',\n        labelWidth: 100,\n\n        // The body area will contain three text fields, arranged\n        // horizontally, separated by draggable splitters.\n        layout: 'hbox',\n        items: [{\n            xtype: 'textfield',\n            flex: 1\n        }, {\n            xtype: 'splitter'\n        }, {\n            xtype: 'textfield',\n            flex: 1\n        }, {\n            xtype: 'splitter'\n        }, {\n            xtype: 'textfield',\n            flex: 1\n        }]\n    }],\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.form.FieldContainer-1","name":"Ext.form.FieldContainer example #2","href":"#!/api/Ext.form.FieldContainer","code":"Ext.create('Ext.form.Panel', {\n    title: 'FieldContainer Example',\n    width: 350,\n    bodyPadding: 10,\n\n    items: [{\n        xtype: 'fieldcontainer',\n        fieldLabel: 'Your Name',\n        labelWidth: 75,\n        defaultType: 'textfield',\n\n        // Arrange fields vertically, stretched to full width\n        layout: 'anchor',\n        defaults: {\n            layout: '100%'\n        },\n\n        // These config values will be applied to both sub-fields, except\n        // for Last Name which will use its own msgTarget.\n        fieldDefaults: {\n            msgTarget: 'under',\n            labelAlign: 'top'\n        },\n\n        items: [{\n            fieldLabel: 'First Name',\n            name: 'firstName'\n        }, {\n            fieldLabel: 'Last Name',\n            name: 'lastName',\n            msgTarget: 'under'\n        }]\n    }],\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.form.FieldSet-0","name":"Ext.form.FieldSet example #1","href":"#!/api/Ext.form.FieldSet","code":"Ext.create('Ext.form.Panel', {\n    title: 'Simple Form with FieldSets',\n    labelWidth: 75, // label settings here cascade unless overridden\n    url: 'save-form.php',\n    frame: true,\n    bodyStyle: 'padding:5px 5px 0',\n    width: 550,\n    renderTo: Ext.getBody(),\n    layout: 'column', // arrange fieldsets side by side\n    items: [{\n        // Fieldset in Column 1 - collapsible via toggle button\n        xtype:'fieldset',\n        columnWidth: 0.5,\n        title: 'Fieldset 1',\n        collapsible: true,\n        defaultType: 'textfield',\n        defaults: {anchor: '100%'},\n        layout: 'anchor',\n        items :[{\n            fieldLabel: 'Field 1',\n            name: 'field1'\n        }, {\n            fieldLabel: 'Field 2',\n            name: 'field2'\n        }]\n    }, {\n        // Fieldset in Column 2 - collapsible via checkbox, collapsed by default, contains a panel\n        xtype:'fieldset',\n        title: 'Show Panel', // title or checkboxToggle creates fieldset header\n        columnWidth: 0.5,\n        checkboxToggle: true,\n        collapsed: true, // fieldset initially collapsed\n        layout:'anchor',\n        items :[{\n            xtype: 'panel',\n            anchor: '100%',\n            title: 'Panel inside a fieldset',\n            frame: true,\n            height: 52\n        }]\n    }]\n});\n","options":{}},{"id":"Ext.form.Label-0","name":"Ext.form.Label example #1","href":"#!/api/Ext.form.Label","code":"Ext.create('Ext.form.Panel', {\n    title: 'Field with Label',\n    width: 400,\n    bodyPadding: 10,\n    renderTo: Ext.getBody(),\n    layout: {\n        type: 'hbox',\n        align: 'middle'\n    },\n    items: [{\n        xtype: 'textfield',\n        hideLabel: true,\n        flex: 1\n    }, {\n        xtype: 'label',\n        forId: 'myFieldId',\n        text: 'My Awesome Field',\n        margin: '0 0 0 10'\n    }]\n});\n","options":{}},{"id":"Ext.form.Panel-0","name":"Ext.form.Panel example #1","href":"#!/api/Ext.form.Panel","code":"Ext.create('Ext.form.Panel', {\n    title: 'Simple Form',\n    bodyPadding: 5,\n    width: 350,\n\n    // The form will submit an AJAX request to this URL when submitted\n    url: 'save-form.php',\n\n    // Fields will be arranged vertically, stretched to full width\n    layout: 'anchor',\n    defaults: {\n        anchor: '100%'\n    },\n\n    // The fields\n    defaultType: 'textfield',\n    items: [{\n        fieldLabel: 'First Name',\n        name: 'first',\n        allowBlank: false\n    },{\n        fieldLabel: 'Last Name',\n        name: 'last',\n        allowBlank: false\n    }],\n\n    // Reset and Submit buttons\n    buttons: [{\n        text: 'Reset',\n        handler: function() {\n            this.up('form').getForm().reset();\n        }\n    }, {\n        text: 'Submit',\n        formBind: true, //only enabled once the form is valid\n        disabled: true,\n        handler: function() {\n            var form = this.up('form').getForm();\n            if (form.isValid()) {\n                form.submit({\n                    success: function(form, action) {\n                       Ext.Msg.alert('Success', action.result.msg);\n                    },\n                    failure: function(form, action) {\n                        Ext.Msg.alert('Failed', action.result.msg);\n                    }\n                });\n            }\n        }\n    }],\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.form.RadioGroup-0","name":"Ext.form.RadioGroup example #1","href":"#!/api/Ext.form.RadioGroup","code":"Ext.create('Ext.form.Panel', {\n    title: 'RadioGroup Example',\n    width: 300,\n    bodyPadding: 10,\n    renderTo: Ext.getBody(),\n    items:[{\n        xtype: 'radiogroup',\n        fieldLabel: 'Two Columns',\n        // Arrange radio buttons into two columns, distributed vertically\n        columns: 2,\n        vertical: true,\n        items: [\n            { boxLabel: 'Item 1', name: 'rb', inputValue: '1' },\n            { boxLabel: 'Item 2', name: 'rb', inputValue: '2', checked: true},\n            { boxLabel: 'Item 3', name: 'rb', inputValue: '3' },\n            { boxLabel: 'Item 4', name: 'rb', inputValue: '4' },\n            { boxLabel: 'Item 5', name: 'rb', inputValue: '5' },\n            { boxLabel: 'Item 6', name: 'rb', inputValue: '6' }\n        ]\n    }]\n});\n","options":{}},{"id":"Ext.form.RadioGroup-1","name":"Ext.form.RadioGroup example #2","href":"#!/api/Ext.form.RadioGroup","code":"Ext.define('MyApp.main.view.Main', {\n    extend: 'Ext.app.ViewModel',\n    alias: 'viewmodel.main',\n    data: {\n        myValue: '2'\n    }\n});\n\nExt.create('Ext.form.Panel', {\n    title: 'RadioGroup Example',\n    viewModel: {\n        type: 'main'\n    },\n    width: 300,\n    bodyPadding: 10,\n    renderTo: Ext.getBody(),\n    items:[{\n        xtype: 'radiogroup',\n        fieldLabel: 'Two Columns',\n        // Arrange radio buttons into two columns, distributed vertically\n        columns: 2,\n        vertical: true,\n        simpleValue: true,  // set simpleValue to true to enable value binding\n        bind: '{myValue}',\n        items: [\n            { boxLabel: 'Item 1', name: 'rb', inputValue: '1' },\n            { boxLabel: 'Item 2', name: 'rb', inputValue: '2' },\n            { boxLabel: 'Item 3', name: 'rb', inputValue: '3' },\n            { boxLabel: 'Item 4', name: 'rb', inputValue: '4' },\n            { boxLabel: 'Item 5', name: 'rb', inputValue: '5' },\n            { boxLabel: 'Item 6', name: 'rb', inputValue: '6' }\n        ]\n    }]\n});\n","options":{}},{"id":"Ext.fx.Anim-0","name":"Ext.fx.Anim example #1","href":"#!/api/Ext.fx.Anim","code":"var myComponent = Ext.create('Ext.Component', {\n    renderTo: document.body,\n    width: 200,\n    height: 200,\n    style: 'border: 1px solid red;'\n});\n\nExt.create('Ext.fx.Anim', {\n    target: myComponent,\n    duration: 1000,\n    from: {\n        width: 400 //starting width 400\n    },\n    to: {\n        width: 300, //end width 300\n        height: 300 // end height 300\n    }\n});\n","options":{}},{"id":"Ext.fx.Animator-0","name":"Ext.fx.Animator example #1","href":"#!/api/Ext.fx.Animator","code":"Ext.create('Ext.fx.Animator', {\n    target: Ext.getBody().createChild({\n        style: {\n            width: '100px',\n            height: '100px',\n            'background-color': 'red'\n        }\n    }),\n    duration: 10000, // 10 seconds\n    keyframes: {\n        0: {\n            opacity: 1,\n            backgroundColor: 'FF0000'\n        },\n        20: {\n            x: 30,\n            opacity: 0.5\n        },\n        40: {\n            x: 130,\n            backgroundColor: '0000FF'\n        },\n        60: {\n            y: 80,\n            opacity: 0.3\n        },\n        80: {\n            width: 200,\n            y: 200\n        },\n        100: {\n            opacity: 1,\n            backgroundColor: '00FF00'\n        }\n    }\n});\n","options":{}},{"id":"Ext.grid.column.Action-0","name":"Ext.grid.column.Action example #1","href":"#!/api/Ext.grid.column.Action","code":"// Init the singleton.  Any tag-based quick tips will start working.\nExt.tip.QuickTipManager.init();\n\nExt.create('Ext.data.Store', {\n    storeId:'employeeStore',\n    fields:['firstname', 'lastname', 'seniority', 'dep', 'hired'],\n    data:[\n        {firstname:\"Michael\", lastname:\"Scott\"},\n        {firstname:\"Dwight\", lastname:\"Schrute\"},\n        {firstname:\"Jim\", lastname:\"Halpert\"},\n        {firstname:\"Kevin\", lastname:\"Malone\"},\n        {firstname:\"Angela\", lastname:\"Martin\"}\n    ]\n});\n\nExt.create('Ext.grid.Panel', {\n    title: 'Action Column Demo',\n    store: Ext.data.StoreManager.lookup('employeeStore'),\n    columns: [\n        {text: 'First Name',  dataIndex:'firstname'},\n        {text: 'Last Name',  dataIndex:'lastname'},\n        {\n            xtype:'actioncolumn',\n            width:50,\n            items: [{\n                iconCls: 'x-fa fa-cog',\n                tooltip: 'Edit',\n                handler: function(grid, rowIndex, colIndex) {\n                    var rec = grid.getStore().getAt(rowIndex);\n                    alert(\"Edit \" + rec.get('firstname'));\n                }\n            },{\n                icon: 'extjs-build/examples/restful/images/delete.png',\n                tooltip: 'Delete',\n                handler: function(grid, rowIndex, colIndex) {\n                    var rec = grid.getStore().getAt(rowIndex);\n                    alert(\"Terminate \" + rec.get('firstname'));\n                }\n            }]\n        }\n    ],\n    width: 250,\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.grid.column.Boolean-0","name":"Ext.grid.column.Boolean example #1","href":"#!/api/Ext.grid.column.Boolean","code":"var store = Ext.create('Ext.data.Store', {\n   fields: [\n       {name: 'framework', type: 'string'},\n       {name: 'rocks', type: 'boolean'}\n   ],\n   data: [\n       { framework: 'Ext JS 5', rocks: true },\n       { framework: 'Ext GWT', rocks: true },\n       { framework: 'Other Guys', rocks: false }\n   ]\n});\n\nExt.create('Ext.grid.Panel', {\n    title: 'Boolean Column Demo',\n    store: store,\n    columns: [\n        { text: 'Framework',  dataIndex: 'framework', flex: 1 },\n        {\n            xtype: 'booleancolumn',\n            text: 'Rocks',\n            trueText: 'Yes',\n            falseText: 'No',\n            dataIndex: 'rocks'\n        }\n    ],\n    height: 200,\n    width: 400,\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.grid.column.Check-0","name":"Ext.grid.column.Check example #1","href":"#!/api/Ext.grid.column.Check","code":"var store = Ext.create('Ext.data.Store', {\n    fields: ['name', 'email', 'phone', 'active'],\n    data: [\n        { name: 'Lisa', email: 'lisa@simpsons.com', phone: '555-111-1224', active: true },\n        { name: 'Bart', email: 'bart@simpsons.com', phone: '555-222-1234', active: true },\n        { name: 'Homer', email: 'homer@simpsons.com', phone: '555-222-1244', active: false },\n        { name: 'Marge', email: 'marge@simpsons.com', phone: '555-222-1254', active: true }\n    ]\n});\n\nExt.create('Ext.grid.Panel', {\n    title: 'Simpsons',\n    height: 200,\n    width: 400,\n    renderTo: Ext.getBody(),\n    store: store,\n    columns: [\n        { text: 'Name', dataIndex: 'name' },\n        { text: 'Email', dataIndex: 'email', flex: 1 },\n        { text: 'Phone', dataIndex: 'phone' },\n        { xtype: 'checkcolumn', text: 'Active', dataIndex: 'active' }\n    ]\n});\n","options":{}},{"id":"Ext.grid.column.Column-0","name":"Ext.grid.column.Column example #1","href":"#!/api/Ext.grid.column.Column","code":"Ext.create('Ext.data.Store', {\n    storeId:'employeeStore',\n    fields:['firstname', 'lastname', 'seniority', 'dep', 'hired'],\n    data:[\n        {firstname:\"Michael\", lastname:\"Scott\", seniority:7, dep:\"Management\", hired:\"01/10/2004\"},\n        {firstname:\"Dwight\", lastname:\"Schrute\", seniority:2, dep:\"Sales\", hired:\"04/01/2004\"},\n        {firstname:\"Jim\", lastname:\"Halpert\", seniority:3, dep:\"Sales\", hired:\"02/22/2006\"},\n        {firstname:\"Kevin\", lastname:\"Malone\", seniority:4, dep:\"Accounting\", hired:\"06/10/2007\"},\n        {firstname:\"Angela\", lastname:\"Martin\", seniority:5, dep:\"Accounting\", hired:\"10/21/2008\"}\n    ]\n});\n\nExt.create('Ext.grid.Panel', {\n    title: 'Column Demo',\n    store: Ext.data.StoreManager.lookup('employeeStore'),\n    columns: [\n        {text: 'First Name',  dataIndex:'firstname'},\n        {text: 'Last Name',  dataIndex:'lastname'},\n        {text: 'Hired Month',  dataIndex:'hired', xtype:'datecolumn', format:'M'},\n        {text: 'Department (Yrs)', xtype:'templatecolumn', tpl:'{dep} ({seniority})'}\n    ],\n    width: 400,\n    forceFit: true,\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.grid.column.Date-0","name":"Ext.grid.column.Date example #1","href":"#!/api/Ext.grid.column.Date","code":"Ext.create('Ext.data.Store', {\n    storeId:'sampleStore',\n    fields:[\n        { name: 'symbol', type: 'string' },\n        { name: 'date',   type: 'date' },\n        { name: 'change', type: 'number' },\n        { name: 'volume', type: 'number' },\n        { name: 'topday', type: 'date' }\n    ],\n    data:[\n        { symbol: \"msft\",   date: '2011/04/22', change: 2.43, volume: 61606325, topday: '04/01/2010' },\n        { symbol: \"goog\",   date: '2011/04/22', change: 0.81, volume: 3053782,  topday: '04/11/2010' },\n        { symbol: \"apple\",  date: '2011/04/22', change: 1.35, volume: 24484858, topday: '04/28/2010' },\n        { symbol: \"sencha\", date: '2011/04/22', change: 8.85, volume: 5556351,  topday: '04/22/2010' }\n    ]\n});\n\nExt.create('Ext.grid.Panel', {\n    title: 'Date Column Demo',\n    store: Ext.data.StoreManager.lookup('sampleStore'),\n    columns: [\n        { text: 'Symbol',   dataIndex: 'symbol', flex: 1 },\n        { text: 'Date',     dataIndex: 'date',   xtype: 'datecolumn',   format:'Y-m-d' },\n        { text: 'Change',   dataIndex: 'change', xtype: 'numbercolumn', format:'0.00' },\n        { text: 'Volume',   dataIndex: 'volume', xtype: 'numbercolumn', format:'0,000' },\n        { text: 'Top Day',  dataIndex: 'topday', xtype: 'datecolumn',   format:'l' }\n    ],\n    height: 200,\n    width: 450,\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.grid.column.Number-0","name":"Ext.grid.column.Number example #1","href":"#!/api/Ext.grid.column.Number","code":"Ext.create('Ext.data.Store', {\n   storeId:'sampleStore',\n   fields:[\n       { name: 'symbol', type: 'string' },\n       { name: 'price',  type: 'number' },\n       { name: 'change', type: 'number' },\n       { name: 'volume', type: 'number' }\n   ],\n   data:[\n       { symbol: \"msft\",   price: 25.76,  change: 2.43, volume: 61606325 },\n       { symbol: \"goog\",   price: 525.73, change: 0.81, volume: 3053782  },\n       { symbol: \"apple\",  price: 342.41, change: 1.35, volume: 24484858 },\n       { symbol: \"sencha\", price: 142.08, change: 8.85, volume: 5556351  }\n   ]\n});\n\nExt.create('Ext.grid.Panel', {\n    title: 'Number Column Demo',\n    store: Ext.data.StoreManager.lookup('sampleStore'),\n    columns: [\n        { text: 'Symbol',         dataIndex: 'symbol', flex: 1 },\n        { text: 'Current Price',  dataIndex: 'price',  renderer: Ext.util.Format.usMoney },\n        { text: 'Change',         dataIndex: 'change', xtype: 'numbercolumn', format:'0.00' },\n        { text: 'Volume',         dataIndex: 'volume', xtype: 'numbercolumn', format:'0,000' }\n    ],\n    height: 200,\n    width: 400,\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.grid.column.Template-0","name":"Ext.grid.column.Template example #1","href":"#!/api/Ext.grid.column.Template","code":"Ext.create('Ext.data.Store', {\n    storeId:'employeeStore',\n    fields:['firstname', 'lastname', 'seniority', 'department'],\n    groupField: 'department',\n    data:[\n        { firstname: \"Michael\", lastname: \"Scott\",   seniority: 7, department: \"Management\" },\n        { firstname: \"Dwight\",  lastname: \"Schrute\", seniority: 2, department: \"Sales\" },\n        { firstname: \"Jim\",     lastname: \"Halpert\", seniority: 3, department: \"Sales\" },\n        { firstname: \"Kevin\",   lastname: \"Malone\",  seniority: 4, department: \"Accounting\" },\n        { firstname: \"Angela\",  lastname: \"Martin\",  seniority: 5, department: \"Accounting\" }\n    ]\n});\n\nExt.create('Ext.grid.Panel', {\n    title: 'Column Template Demo',\n    store: Ext.data.StoreManager.lookup('employeeStore'),\n    columns: [\n        { text: 'Full Name',       xtype: 'templatecolumn', tpl: '{firstname} {lastname}', flex:1 },\n        { text: 'Department (Yrs)', xtype: 'templatecolumn', tpl: '{department} ({seniority})' }\n    ],\n    height: 200,\n    width: 300,\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.grid.column.Widget-0","name":"Ext.grid.column.Widget example #1","href":"#!/api/Ext.grid.column.Widget","code":"var grid = new Ext.grid.Panel({\n    title: 'Substation power monitor',\n    width: 600,\n    viewConfig: {\n        enableTextSelection: false,\n        markDirty: false\n    },\n    columns: [{\n        text: 'Id',\n        dataIndex: 'id',\n        width: 120\n    }, {\n        text: 'Rating',\n        dataIndex: 'maxCapacity',\n        width: 80\n    }, {\n        text: 'Avg.',\n        dataIndex: 'avg',\n        width: 85,\n        formatter: 'number(\"0.00\")'\n    }, {\n        text: 'Max',\n        dataIndex: 'max',\n        width: 80\n    }, {\n        text: 'Instant',\n        dataIndex: 'instant',\n        width: 80\n    }, {\n        text: '%Capacity',\n        width: 150,\n\n        // This is our Widget column\n        xtype: 'widgetcolumn',\n\n        // This is the widget definition for each cell.\n        // The Progress widget class's defaultBindProperty is 'value'\n        // so its \"value\" setting is taken from the ViewModel's record \"capacityUsed\" field\n        // Note that a row ViewModel will automatically be injected due to the existence of \n        // the bind property in the widget configuration.\n        widget: {\n            xtype: 'progressbarwidget',\n            bind: '{record.capacityUsed}',\n            textTpl: [\n                '{percent:number(\"0\")}% capacity'\n            ]\n        }\n    }],\n    renderTo: document.body,\n    disableSelection: true,\n    store: {\n       fields: [{\n           name: 'id',\n           type: 'string'\n       }, {\n           name: 'maxCapacity',\n           type: 'int'\n       }, {\n           name: 'avg',\n           type: 'int',\n           calculate: function(data) {\n               // Make this depend upon the instant field being set which sets the sampleCount and total.\n               // Use subscript format to access the other pseudo fields which are set by the instant field's converter\n               return data.instant && data['total'] / data['sampleCount'];\n           }\n       }, {\n           name: 'max',\n           type: 'int',\n           calculate: function(data) {\n               // This will be seen to depend on the \"instant\" field.\n               // Use subscript format to access this field's current value to avoid circular dependency error.\n               return (data['max'] || 0) < data.instant ? data.instant : data['max'];\n           }\n       }, {\n           name: 'instant',\n           type: 'int',\n\n           // Upon every update of instantaneous power throughput,\n           // update the sample count and total so that the max field can calculate itself\n           convert: function(value, rec) {\n               rec.data.sampleCount = (rec.data.sampleCount || 0) + 1;\n               rec.data.total = (rec.data.total || 0) + value;\n               return value;\n           },\n          depends: []\n       }, {\n           name: 'capacityUsed',\n           calculate: function(data) {\n               return data.instant / data.maxCapacity;\n           }\n       }],\n       data: [{\n           id: 'Substation A',\n           maxCapacity: 1000,\n           avg: 770,\n           max: 950,\n           instant: 685\n       }, {\n           id: 'Substation B',\n           maxCapacity: 1000,\n           avg: 819,\n           max: 992,\n           instant: 749\n       }, {\n           id: 'Substation C',\n           maxCapacity: 1000,\n           avg: 588,\n             max: 936,\n           instant: 833\n       }, {\n           id: 'Substation D',\n           maxCapacity: 1000,\n           avg: 639,\n           max: 917,\n           instant: 825\n       }]\n   }\n});\n\n// Fake data updating...\n// Change one record per second to a random power value\nExt.interval(function() {\n    var recIdx = Ext.Number.randomInt(0, 3),\n        newPowerReading = Ext.Number.randomInt(500, 1000);\n\n    grid.store.getAt(recIdx).set('instant', newPowerReading);\n}, 1000);\n","options":{}},{"id":"Ext.grid.feature.Grouping-0","name":"Ext.grid.feature.Grouping example #1","href":"#!/api/Ext.grid.feature.Grouping","code":"var store = Ext.create('Ext.data.Store', {\n    fields: ['name', 'seniority', 'department'],\n    groupField: 'department',\n    data: [\n        { name: 'Michael Scott', seniority: 7, department: 'Management' },\n        { name: 'Dwight Schrute', seniority: 2, department: 'Sales' },\n        { name: 'Jim Halpert', seniority: 3, department: 'Sales' },\n        { name: 'Kevin Malone', seniority: 4, department: 'Accounting' },\n        { name: 'Angela Martin', seniority: 5, department: 'Accounting' }\n    ]\n});\n\nExt.create('Ext.grid.Panel', {\n    title: 'Employees',\n    store: store,\n    columns: [\n        { text: 'Name', dataIndex: 'name', flex: 1 },\n        { text: 'Seniority', dataIndex: 'seniority', flex: 1 }\n    ],\n    features: [{ftype:'grouping'}],\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.grid.feature.Grouping-1","name":"Ext.grid.feature.Grouping example #2","href":"#!/api/Ext.grid.feature.Grouping","code":"Ext.define('TestResult', {\n    extend: 'Ext.data.Model',\n    fields: ['student', 'subject', {\n        name: 'mark',\n        type: 'int'\n    }]\n});\n\nExt.create('Ext.grid.Panel', {\n    width: 200,\n    height: 240,\n    renderTo: document.body,\n    features: [{\n        ftype: 'grouping',\n        groupHeaderTpl: 'Subject: {name}',\n        showSummaryRow: true\n    }],\n    store: {\n        model: 'TestResult',\n        groupField: 'subject',\n        data: [{\n            student: 'Student 1',\n            subject: 'Math',\n            mark: 84\n        },{\n            student: 'Student 1',\n            subject: 'Science',\n            mark: 72\n        },{\n            student: 'Student 2',\n            subject: 'Math',\n            mark: 96\n        },{\n            student: 'Student 2',\n            subject: 'Science',\n            mark: 68\n        }]\n    },\n    columns: [{\n        dataIndex: 'student',\n        text: 'Name',\n        summaryType: 'count',\n        summaryRenderer: function(value){\n            return Ext.String.format('{0} student{1}', value, value !== 1 ? 's' : '');\n        }\n    }, {\n        dataIndex: 'mark',\n        text: 'Mark',\n        summaryType: 'average'\n    }]\n});\n","options":{}},{"id":"Ext.grid.feature.RowBody-0","name":"Ext.grid.feature.RowBody example #1","href":"#!/api/Ext.grid.feature.RowBody","code":"Ext.define('Animal', {\n    extend: 'Ext.data.Model',\n    fields: ['name', 'latin', 'desc', 'lifespan']\n});\n\nExt.create('Ext.grid.Panel', {\n    width: 400,\n    height: 300,\n    renderTo: Ext.getBody(),\n    store: {\n        model: 'Animal',\n        data: [{\n            name: 'Tiger',\n            latin: 'Panthera tigris',\n            desc: 'The largest cat species, weighing up to 306 kg (670 lb).',\n            lifespan: '20 - 26 years (in captivity)'\n        }, {\n            name: 'Roman snail',\n            latin: 'Helix pomatia',\n            desc: 'A species of large, edible, air-breathing land snail.',\n            lifespan: '20 - 35 years'\n        }, {\n            name: 'Yellow-winged darter',\n            latin: 'Sympetrum flaveolum',\n            desc: 'A dragonfly found in Europe and mid and Northern China.',\n            lifespan: '4 - 6 weeks'\n        }, {\n            name: 'Superb Fairy-wren',\n            latin: 'Malurus cyaneus',\n            desc: 'Common and familiar across south-eastern Australia.',\n            lifespan: '5 - 6 years'\n        }]\n    },\n    columns: [{\n        dataIndex: 'name',\n        text: 'Common name',\n        width: 125\n    }, {\n        dataIndex: 'latin',\n        text: 'Scientific name',\n        flex: 1\n    }],\n    features: [{\n        ftype: 'rowbody',\n        getAdditionalData: function (data, idx, record, orig) {\n            // Usually you would style the my-body-class in a CSS file\n            return {\n                rowBody: '<div style=\"padding: 1em\">' + record.get(\"desc\") + '</div>',\n                rowBodyCls: \"my-body-class\"\n            };\n        }\n    }],\n    listeners: {\n        rowbodyclick: function(view, rowEl, e, eOpts) {\n            var itemEl = Ext.get(rowEl).up(view.itemSelector),\n                rec = view.getRecord(itemEl);\n\n            Ext.Msg.alert(rec.get('name') + ' life span', rec.get('lifespan'));\n        }\n    }\n});\n","options":{}},{"id":"Ext.grid.feature.Summary-0","name":"Ext.grid.feature.Summary example #1","href":"#!/api/Ext.grid.feature.Summary","code":"Ext.define('TestResult', {\n    extend: 'Ext.data.Model',\n    fields: ['student', {\n        name: 'mark',\n        type: 'int'\n    }]\n});\n\nExt.create('Ext.grid.Panel', {\n    width: 400,\n    height: 200,\n    title: 'Summary Test',\n    style: 'padding: 20px',\n    renderTo: document.body,\n    features: [{\n        ftype: 'summary'\n    }],\n    store: {\n        model: 'TestResult',\n        data: [{\n            student: 'Student 1',\n            mark: 84\n        },{\n            student: 'Student 2',\n            mark: 72\n        },{\n            student: 'Student 3',\n            mark: 96\n        },{\n            student: 'Student 4',\n            mark: 68\n        }]\n    },\n    columns: [{\n        dataIndex: 'student',\n        text: 'Name',\n        summaryType: 'count',\n        summaryRenderer: function(value, summaryData, dataIndex) {\n            return Ext.String.format('{0} student{1}', value, value !== 1 ? 's' : '');\n        }\n    }, {\n        dataIndex: 'mark',\n        text: 'Mark',\n        summaryType: 'average'\n    }]\n});\n","options":{}},{"id":"Ext.grid.filters.filter.Boolean-0","name":"Ext.grid.filters.filter.Boolean example #1","href":"#!/api/Ext.grid.filters.filter.Boolean","code":"var shows = Ext.create('Ext.data.Store', {\n    fields: ['id','show', 'visible'],\n    data: [\n        {id: 0, show: 'Battlestar Galactica', visible: true},\n        {id: 1, show: 'Doctor Who', visible: true},\n        {id: 2, show: 'Farscape', visible: false},\n        {id: 3, show: 'Firefly', visible: true},\n        {id: 4, show: 'Star Trek', visible: true},\n        {id: 5, show: 'Star Wars: Christmas Special', visible: false}\n    ]\n});\n\nExt.create('Ext.grid.Panel', {\n    renderTo: Ext.getBody(),\n    title: 'Sci-Fi Television',\n    height: 250,\n    width: 375,\n    store: shows,\n    plugins: {\n        gridfilters: true\n    },\n    columns: [{\n        dataIndex: 'id',\n        text: 'ID',\n        width: 50\n    },{\n        dataIndex: 'show',\n        text: 'Show',\n        flex: 1                  \n    },{\n        dataIndex: 'visible',\n        text: 'Visibility',\n        width: 125,\n        filter: {\n            type: 'boolean',\n            value: true,\n            yesText: 'True',\n            noText: 'False'\n        }\n    }]\n});\n","options":{}},{"id":"Ext.grid.filters.filter.Date-0","name":"Ext.grid.filters.filter.Date example #1","href":"#!/api/Ext.grid.filters.filter.Date","code":"var shows = Ext.create('Ext.data.Store', {\n    fields: ['id','show', {\n          name: 'airDate',\n          type: 'date',\n          dateFormat: 'Y-m-d'\n    }],\n    data: [\n        {id: 0, show: 'Battlestar Galactica', airDate: '1978-09-17'},\n        {id: 1, show: 'Doctor Who', airDate: '1963-11-23'},\n        {id: 2, show: 'Farscape', airDate: '1999-03-19'},\n        {id: 3, show: 'Firefly', airDate: '2002-12-20'},\n        {id: 4, show: 'Star Trek', airDate: '1966-09-08'},\n        {id: 5, show: 'Star Wars: Christmas Special', airDate: '1978-11-17'}\n    ]\n});\n\nExt.create('Ext.grid.Panel', {\n    renderTo: Ext.getBody(),\n    title: 'Sci-Fi Television',\n    height: 250,\n    width: 375,\n    store: shows,\n    plugins: {\n        gridfilters: true\n    },\n    columns: [{\n        dataIndex: 'id',\n        text: 'ID',\n        width: 50\n    },{\n        dataIndex: 'show',\n        text: 'Show',\n        flex: 1                  \n    },{\n        xtype: 'datecolumn',\n        dataIndex: 'airDate',\n        text: 'Original Air Date',\n        width: 125,\n        filter: {\n            type: 'date',\n\n            // optional picker config\n            pickerDefaults: {\n                // any DatePicker configs\n            } \n        }\n    }]\n});\n","options":{}},{"id":"Ext.grid.filters.filter.List-0","name":"Ext.grid.filters.filter.List example #1","href":"#!/api/Ext.grid.filters.filter.List","code":"var shows = Ext.create('Ext.data.Store', {\n    fields: ['id','show','rating'],\n    data: [\n        {id: 0, show: 'Battlestar Galactica', rating: 2},\n        {id: 1, show: 'Doctor Who', rating: 4},\n        {id: 2, show: 'Farscape', rating: 3},\n        {id: 3, show: 'Firefly', rating: 4},\n        {id: 4, show: 'Star Trek', rating: 1},\n        {id: 5, show: 'Star Wars: Christmas Special', rating: 5}\n    ]\n});\n\nExt.create('Ext.grid.Panel', {\n    renderTo: Ext.getBody(),\n    title: 'Sci-Fi Television',\n    height: 250,\n    width: 350,\n    store: shows,\n    plugins: {\n        gridfilters: true\n    },\n    columns: [{\n        dataIndex: 'id',\n        text: 'ID',\n        width: 50\n    },{\n        dataIndex: 'show',\n        text: 'Show',\n        flex: 1                  \n    },{\n        dataIndex: 'rating',\n        text: 'Rating',\n        width: 75,\n        filter: {\n            type: 'list',\n            value: 5                      \n        }\n    }]\n});\n","options":{}},{"id":"Ext.grid.filters.filter.Number-0","name":"Ext.grid.filters.filter.Number example #1","href":"#!/api/Ext.grid.filters.filter.Number","code":"var shows = Ext.create('Ext.data.Store', {\n      fields: ['id','show'],\n      data: [\n          {id: 0, show: 'Battlestar Galactica'},\n          {id: 1, show: 'Doctor Who'},\n          {id: 2, show: 'Farscape'},\n          {id: 3, show: 'Firefly'},\n          {id: 4, show: 'Star Trek'},\n          {id: 5, show: 'Star Wars: Christmas Special'}\n      ]\n   });\n\n  Ext.create('Ext.grid.Panel', {\n      renderTo: Ext.getBody(),\n      title: 'Sci-Fi Television',\n      height: 250,\n      width: 250,\n      store: shows,\n      plugins: {\n          gridfilters: true\n      },\n      columns: [{\n          dataIndex: 'id',\n          text: 'ID',\n          width: 50,\n          filter: 'number' // May also be 'numeric'\n      },{\n          dataIndex: 'show',\n          text: 'Show',\n          flex: 1                  \n      }]\n  });\n","options":{}},{"id":"Ext.grid.filters.filter.String-0","name":"Ext.grid.filters.filter.String example #1","href":"#!/api/Ext.grid.filters.filter.String","code":"var shows = Ext.create('Ext.data.Store', {\n    fields: ['id','show'],\n    data: [\n        {id: 0, show: 'Battlestar Galactica'},\n        {id: 1, show: 'Doctor Who'},\n        {id: 2, show: 'Farscape'},\n        {id: 3, show: 'Firefly'},\n        {id: 4, show: 'Star Trek'},\n        {id: 5, show: 'Star Wars: Christmas Special'}\n    ]\n});\n\nExt.create('Ext.grid.Panel', {\n    renderTo: Ext.getBody(),\n    title: 'Sci-Fi Television',\n    height: 250,\n    width: 250,\n    store: shows,\n    plugins: {\n        gridfilters: true\n    },\n    columns: [{\n        dataIndex: 'id',\n        text: 'ID',\n        width: 50\n    },{\n        dataIndex: 'show',\n        text: 'Show',\n        flex: 1,\n        filter: {\n            // required configs\n            type: 'string',\n            // optional configs\n            value: 'star',  // setting a value makes the filter active. \n            itemDefaults: {\n                // any Ext.form.field.Text configs accepted\n            }\n        }\n    }]\n});\n","options":{}},{"id":"Ext.grid.filters.Filters-0","name":"Ext.grid.filters.Filters example #1","href":"#!/api/Ext.grid.filters.Filters","code":"var shows = Ext.create('Ext.data.Store', {\n    fields: ['id','show'],\n    data: [\n        {id: 0, show: 'Battlestar Galactica'},\n        {id: 1, show: 'Doctor Who'},\n        {id: 2, show: 'Farscape'},\n        {id: 3, show: 'Firefly'},\n        {id: 4, show: 'Star Trek'},\n        {id: 5, show: 'Star Wars: Christmas Special'}\n    ]\n});\n\nExt.create('Ext.grid.Panel', {\n    renderTo: Ext.getBody(),\n    title: 'Sci-Fi Television',\n    height: 250,\n    width: 250,\n    store: shows,\n    plugins: {\n        gridfilters: true\n    },\n    columns: [{\n        dataIndex: 'id',\n        text: 'ID',\n        width: 50\n    },{\n        dataIndex: 'show',\n        text: 'Show',\n        flex: 1,\n        filter: {\n            // required configs\n            type: 'string',\n            // optional configs\n            value: 'star',  // setting a value makes the filter active. \n            itemDefaults: {\n                // any Ext.form.field.Text configs accepted\n            }\n        }\n    }]\n}); \n","options":{}},{"id":"Ext.grid.Panel-0","name":"Ext.grid.Panel example #1","href":"#!/api/Ext.grid.Panel","code":"Ext.create('Ext.data.Store', {\n    storeId: 'simpsonsStore',\n    fields:[ 'name', 'email', 'phone'],\n    data: [\n        { name: 'Lisa', email: 'lisa@simpsons.com', phone: '555-111-1224' },\n        { name: 'Bart', email: 'bart@simpsons.com', phone: '555-222-1234' },\n        { name: 'Homer', email: 'homer@simpsons.com', phone: '555-222-1244' },\n        { name: 'Marge', email: 'marge@simpsons.com', phone: '555-222-1254' }\n    ]\n});\n\nExt.create('Ext.grid.Panel', {\n    title: 'Simpsons',\n    store: Ext.data.StoreManager.lookup('simpsonsStore'),\n    columns: [\n        { text: 'Name', dataIndex: 'name' },\n        { text: 'Email', dataIndex: 'email', flex: 1 },\n        { text: 'Phone', dataIndex: 'phone' }\n    ],\n    height: 200,\n    width: 400,\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.grid.plugin.CellEditing-0","name":"Ext.grid.plugin.CellEditing example #1","href":"#!/api/Ext.grid.plugin.CellEditing","code":"Ext.create('Ext.data.Store', {\n    storeId: 'simpsonsStore',\n    fields:[ 'name', 'email', 'phone'],\n    data: [\n        { name: 'Lisa', email: 'lisa@simpsons.com', phone: '555-111-1224' },\n        { name: 'Bart', email: 'bart@simpsons.com', phone: '555-222-1234' },\n        { name: 'Homer', email: 'homer@simpsons.com', phone: '555-222-1244' },\n        { name: 'Marge', email: 'marge@simpsons.com', phone: '555-222-1254' }\n    ]\n});\n\nExt.create('Ext.grid.Panel', {\n    title: 'Simpsons',\n    store: Ext.data.StoreManager.lookup('simpsonsStore'),\n    columns: [\n        {header: 'Name', dataIndex: 'name', editor: 'textfield'},\n        {header: 'Email', dataIndex: 'email', flex:1,\n            editor: {\n                completeOnEnter: false,\n\n                // If the editor config contains a field property, then\n                // the editor config is used to create the CellEditor\n                // and the field property is used to create the editing input field.\n                field: {\n                    xtype: 'textfield',\n                    allowBlank: false\n                }\n            }\n        },\n        {header: 'Phone', dataIndex: 'phone'}\n    ],\n    selModel: 'cellmodel',\n    plugins: {\n        cellediting: {\n            clicksToEdit: 1\n        }\n    },\n    height: 200,\n    width: 400,\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.grid.plugin.DragDrop-0","name":"Ext.grid.plugin.DragDrop example #1","href":"#!/api/Ext.grid.plugin.DragDrop","code":"var store = Ext.create('Ext.data.Store', {\n    fields: ['name'],\n    data: [\n        [\"Lisa\"],\n        [\"Bart\"],\n        [\"Homer\"],\n        [\"Marge\"]\n    ],\n    proxy: {\n        type: 'memory',\n        reader: 'array'\n    }\n});\n\nExt.create('Ext.grid.Panel', {\n    store: store,\n    enableLocking: true,\n    columns: [{\n        header: 'Name',\n        dataIndex: 'name',\n        flex: true\n    }],\n    viewConfig: {\n        plugins: {\n            gridviewdragdrop: {\n                dragText: 'Drag and drop to reorganize'\n            }\n        }\n    },\n    height: 200,\n    width: 400,\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.grid.plugin.RowEditing-0","name":"Ext.grid.plugin.RowEditing example #1","href":"#!/api/Ext.grid.plugin.RowEditing","code":"Ext.create('Ext.data.Store', {\n    storeId: 'simpsonsStore',\n    fields:[ 'name', 'email', 'phone'],\n    data: [\n        { name: 'Lisa', email: 'lisa@simpsons.com', phone: '555-111-1224' },\n        { name: 'Bart', email: 'bart@simpsons.com', phone: '555-222-1234' },\n        { name: 'Homer', email: 'homer@simpsons.com', phone: '555-222-1244' },\n        { name: 'Marge', email: 'marge@simpsons.com', phone: '555-222-1254' }\n    ]\n});\n\nExt.create('Ext.grid.Panel', {\n    title: 'Simpsons',\n    store: Ext.data.StoreManager.lookup('simpsonsStore'),\n    columns: [\n        {header: 'Name', dataIndex: 'name', editor: 'textfield'},\n        {header: 'Email', dataIndex: 'email', flex:1,\n            editor: {\n                xtype: 'textfield',\n                allowBlank: false\n            }\n        },\n        {header: 'Phone', dataIndex: 'phone'}\n    ],\n    selModel: 'rowmodel',\n    plugins: {\n        rowediting: {\n            clicksToEdit: 1\n        }\n    },\n    height: 200,\n    width: 400,\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.grid.property.Grid-0","name":"Ext.grid.property.Grid example #1","href":"#!/api/Ext.grid.property.Grid","code":"Ext.create('Ext.grid.property.Grid', {\n    title: 'Properties Grid',\n    width: 300,\n    renderTo: Ext.getBody(),\n    source: {\n        \"(name)\": \"My Object\",\n        \"Created\": Ext.Date.parse('10/15/2006', 'm/d/Y'),\n        \"Available\": false,\n        \"Version\": 0.01,\n        \"Description\": \"A test object\"\n    }\n});\n","options":{}},{"id":"Ext.grid.selection.SpreadsheetModel-0","name":"Ext.grid.selection.SpreadsheetModel example #1","href":"#!/api/Ext.grid.selection.SpreadsheetModel","code":"var store = Ext.create('Ext.data.Store', {\n    fields: ['name', 'email', 'phone'],\n    data: [\n        { name: 'Lisa', email: 'lisa@simpsons.com', phone: '555-111-1224' },\n        { name: 'Bart', email: 'bart@simpsons.com', phone: '555-222-1234' },\n        { name: 'Homer', email: 'homer@simpsons.com', phone: '555-222-1244' },\n        { name: 'Marge', email: 'marge@simpsons.com', phone: '555-222-1254' }\n    ]\n});\n\nExt.create('Ext.grid.Panel', {\n    title: 'Simpsons',\n    store: store,\n    width: 400,\n    renderTo: Ext.getBody(),\n    columns: [\n        { text: 'Name', dataIndex: 'name' },\n        { text: 'Email', dataIndex: 'email', flex: 1 },\n        { text: 'Phone', dataIndex: 'phone' }\n    ],\n    selModel: {\n       type: 'spreadsheet'\n    }\n});\n","options":{}},{"id":"Ext.layout.container.Absolute-0","name":"Ext.layout.container.Absolute example #1","href":"#!/api/Ext.layout.container.Absolute","code":"Ext.create('Ext.form.Panel', {\n    title: 'Absolute Layout',\n    width: 300,\n    height: 275,\n    layout: {\n        type: 'absolute'\n        // layout-specific configs go here\n        //itemCls: 'x-abs-layout-item',\n    },\n    url:'save-form.php',\n    defaultType: 'textfield',\n    items: [{\n        x: 10,\n        y: 10,\n        xtype:'label',\n        text: 'Send To:'\n    },{\n        x: 80,\n        y: 10,\n        name: 'to',\n        anchor:'90%'  // anchor width by percentage\n    },{\n        x: 10,\n        y: 40,\n        xtype:'label',\n        text: 'Subject:'\n    },{\n        x: 80,\n        y: 40,\n        name: 'subject',\n        anchor: '90%'  // anchor width by percentage\n    },{\n        x:0,\n        y: 80,\n        xtype: 'textareafield',\n        name: 'msg',\n        anchor: '100% 100%'  // anchor width and height\n    }],\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.layout.container.Accordion-0","name":"Ext.layout.container.Accordion example #1","href":"#!/api/Ext.layout.container.Accordion","code":"Ext.create('Ext.panel.Panel', {\n    title: 'Accordion Layout',\n    width: 300,\n    height: 300,\n    defaults: {\n        // applied to each contained panel\n        bodyStyle: 'padding:15px'\n    },\n    layout: {\n        // layout-specific configs go here\n        type: 'accordion',\n        titleCollapse: false,\n        animate: true,\n        activeOnTop: true\n    },\n    items: [{\n        title: 'Panel 1',\n        html: 'Panel content!'\n    },{\n        title: 'Panel 2',\n        html: 'Panel content!'\n    },{\n        title: 'Panel 3',\n        html: 'Panel content!'\n    }],\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.layout.container.Anchor-0","name":"Ext.layout.container.Anchor example #1","href":"#!/api/Ext.layout.container.Anchor","code":"Ext.create('Ext.Panel', {\n    width: 500,\n    height: 400,\n    title: \"AnchorLayout Panel\",\n    layout: 'anchor',\n    renderTo: Ext.getBody(),\n    items: [\n        {\n            xtype: 'panel',\n            title: '75% Width and 20% Height',\n            anchor: '75% 20%'\n        },\n        {\n            xtype: 'panel',\n            title: 'Offset -300 Width & -200 Height',\n            anchor: '-300 -200'   \n        },\n        {\n            xtype: 'panel',\n            title: 'Mixed Offset and Percent',\n            anchor: '-250 20%'\n        }\n    ]\n});\n","options":{}},{"id":"Ext.layout.container.Auto-0","name":"Ext.layout.container.Auto example #1","href":"#!/api/Ext.layout.container.Auto","code":"Ext.create('Ext.Panel', {\n    width: 500,\n    height: 280,\n    title: 'AutoLayout Panel',\n    layout: 'auto',\n    renderTo: document.body,\n    items: [{\n        xtype: 'panel',\n        title: 'Top Inner Panel',\n        width: '75%',\n        height: 90\n    }, {\n        xtype: 'panel',\n        title: 'Bottom Inner Panel',\n        width: '75%',\n        height: 90\n    }]\n});\n","options":{}},{"id":"Ext.layout.container.Border-0","name":"Ext.layout.container.Border example #1","href":"#!/api/Ext.layout.container.Border","code":"Ext.create('Ext.panel.Panel', {\n    width: 500,\n    height: 300,\n    title: 'Border Layout',\n    layout: 'border',\n    items: [{\n        title: 'South Region is resizable',\n        region: 'south',     // position for region\n        xtype: 'panel',\n        height: 100,\n        split: true,         // enable resizing\n        margin: '0 5 5 5'\n    },{\n        // xtype: 'panel' implied by default\n        title: 'West Region is collapsible',\n        region:'west',\n        xtype: 'panel',\n        margin: '5 0 0 5',\n        width: 200,\n        collapsible: true,   // make collapsible\n        id: 'west-region-container',\n        layout: 'fit'\n    },{\n        title: 'Center Region',\n        region: 'center',     // center region is required, no width/height specified\n        xtype: 'panel',\n        layout: 'fit',\n        margin: '5 5 0 0'\n    }],\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.layout.container.Card-0","name":"Ext.layout.container.Card example #1","href":"#!/api/Ext.layout.container.Card","code":"var p = Ext.create('Ext.panel.Panel', {\n    layout: 'card',\n    items: [\n        { html: 'Card 1' },\n        { html: 'Card 2' }\n    ],\n    renderTo: Ext.getBody()\n});\n\np.getLayout().setActiveItem(1);\n","options":{}},{"id":"Ext.layout.container.Card-1","name":"Ext.layout.container.Card example #2","href":"#!/api/Ext.layout.container.Card","code":"var active = 0;\nvar main = Ext.create('Ext.panel.Panel', {\n    renderTo: Ext.getBody(),\n    width: 200,\n    height: 200,\n    layout: 'card',\n    tbar: [{\n        text: 'Next',\n        handler: function(){\n            var layout = main.getLayout();\n            ++active;\n            layout.setActiveItem(active);\n            active = main.items.indexOf(layout.getActiveItem());\n        }\n    }],\n    items: [{\n        title: 'P1'\n    }, {\n        title: 'P2'\n    }, {\n        title: 'P3',\n        listeners: {\n            beforeactivate: function(){\n                return false;\n            }\n        }\n    }]\n});\n","options":{}},{"id":"Ext.layout.container.Card-2","name":"Ext.layout.container.Card example #3","href":"#!/api/Ext.layout.container.Card","code":"var navigate = function(panel, direction){\n    // This routine could contain business logic required to manage the navigation steps.\n    // It would call setActiveItem as needed, manage navigation button state, handle any\n    // branching logic that might be required, handle alternate actions like cancellation\n    // or finalization, etc.  A complete wizard implementation could get pretty\n    // sophisticated depending on the complexity required, and should probably be\n    // done as a subclass of CardLayout in a real-world implementation.\n    var layout = panel.getLayout();\n    layout[direction]();\n    Ext.getCmp('move-prev').setDisabled(!layout.getPrev());\n    Ext.getCmp('move-next').setDisabled(!layout.getNext());\n};\n\nExt.create('Ext.panel.Panel', {\n    title: 'Example Wizard',\n    width: 300,\n    height: 200,\n    layout: 'card',\n    bodyStyle: 'padding:15px',\n    defaults: {\n        // applied to each contained panel\n        border: false\n    },\n    // just an example of one possible navigation scheme, using buttons\n    bbar: [\n        {\n            id: 'move-prev',\n            text: 'Back',\n            handler: function(btn) {\n                navigate(btn.up(\"panel\"), \"prev\");\n            },\n            disabled: true\n        },\n        '->', // greedy spacer so that the buttons are aligned to each side\n        {\n            id: 'move-next',\n            text: 'Next',\n            handler: function(btn) {\n                navigate(btn.up(\"panel\"), \"next\");\n            }\n        }\n    ],\n    // the panels (or \"cards\") within the layout\n    items: [{\n        id: 'card-0',\n        html: '<h1>Welcome to the Wizard!</h1><p>Step 1 of 3</p>'\n    },{\n        id: 'card-1',\n        html: '<p>Step 2 of 3</p>'\n    },{\n        id: 'card-2',\n        html: '<h1>Congratulations!</h1><p>Step 3 of 3 - Complete</p>'\n    }],\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.layout.container.Column-0","name":"Ext.layout.container.Column example #1","href":"#!/api/Ext.layout.container.Column","code":"// All columns are percentages -- they must add up to 1\nExt.create('Ext.panel.Panel', {\n    title: 'Column Layout - Percentage Only',\n    width: 350,\n    height: 250,\n    layout:'column',\n    items: [{\n        title: 'Column 1',\n        columnWidth: 0.25\n    },{\n        title: 'Column 2',\n        columnWidth: 0.55\n    },{\n        title: 'Column 3',\n        columnWidth: 0.20\n    }],\n    renderTo: Ext.getBody()\n});\n\n// Mix of width and columnWidth -- all columnWidth values must add up\n// to 1. The first column will take up exactly 120px, and the last two\n// columns will fill the remaining container width.\n\nExt.create('Ext.Panel', {\n    title: 'Column Layout - Mixed',\n    width: 350,\n    height: 250,\n    layout:'column',\n    items: [{\n        title: 'Column 1',\n        width: 120\n    },{\n        title: 'Column 2',\n        columnWidth: 0.7\n    },{\n        title: 'Column 3',\n        columnWidth: 0.3\n    }],\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.layout.container.Fit-0","name":"Ext.layout.container.Fit example #1","href":"#!/api/Ext.layout.container.Fit","code":"Ext.create('Ext.panel.Panel', {\n    title: 'Fit Layout',\n    width: 300,\n    height: 150,\n    layout:'fit',\n    items: {\n        title: 'Inner Panel',\n        html: 'This is the inner panel content',\n        bodyPadding: 20,\n        border: false\n    },\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.layout.container.Form-0","name":"Ext.layout.container.Form example #1","href":"#!/api/Ext.layout.container.Form","code":"Ext.create('Ext.Panel', {\n    width: 500,\n    height: 300,\n    title: \"FormLayout Panel\",\n    layout: 'form',\n    renderTo: Ext.getBody(),\n    bodyPadding: 5,\n    defaultType: 'textfield',\n    items: [{\n       fieldLabel: 'First Name',\n        name: 'first',\n        allowBlank:false\n    },{\n        fieldLabel: 'Last Name',\n        name: 'last'\n    },{\n        fieldLabel: 'Company',\n        name: 'company'\n    }, {\n        fieldLabel: 'Email',\n        name: 'email',\n        vtype:'email'\n    }, {\n        fieldLabel: 'DOB',\n        name: 'dob',\n        xtype: 'datefield'\n    }, {\n        fieldLabel: 'Age',\n        name: 'age',\n        xtype: 'numberfield',\n        minValue: 0,\n        maxValue: 100\n    }, {\n        xtype: 'timefield',\n        fieldLabel: 'Time',\n        name: 'time',\n        minValue: '8:00am',\n        maxValue: '6:00pm'\n    }]\n});\n","options":{}},{"id":"Ext.layout.container.HBox-0","name":"Ext.layout.container.HBox example #1","href":"#!/api/Ext.layout.container.HBox","code":"Ext.create('Ext.Panel', {\n    width: 500,\n    height: 300,\n    title: \"HBoxLayout Panel\",\n    layout: {\n        type: 'hbox',\n        align: 'stretch'\n    },\n    renderTo: document.body,\n    items: [{\n        xtype: 'panel',\n        title: 'Inner Panel One',\n        flex: 2\n    },{\n        xtype: 'panel',\n        title: 'Inner Panel Two',\n        flex: 1\n    },{\n        xtype: 'panel',\n        title: 'Inner Panel Three',\n        flex: 1\n    }]\n});\n","options":{}},{"id":"Ext.layout.container.HBox-1","name":"Ext.layout.container.HBox example #2","href":"#!/api/Ext.layout.container.HBox","code":"Ext.create({\n    xtype: 'panel',\n    renderTo: Ext.getBody(),\n    height: 400,\n    width: 520,\n    defaultListenerScope: true,\n    layout: 'hbox',\n    defaultType: 'button',\n    items: [{\n        text: 'One'\n    }, {\n        text: 'Two'\n    }, {\n        text: 'Three'\n    }],\n    dockedItems: [{\n        xtype: 'toolbar',\n        dock: 'top',\n        items: [{\n            xtype: 'buttongroup',\n            title: 'align',\n            layout: 'fit',\n            items: [{\n                xtype: 'segmentedbutton',\n                margin: 10,\n                allowDepress: true,\n                defaults: {\n                    configType: 'align'  // custom config used in this example\n                },\n                items: [{\n                    text: 'begin'\n                }, {\n                    text: 'middle'\n                }, {\n                    text: 'end'\n                }, {\n                    text: 'stretch'\n                }, {\n                    text: 'stretchmax'\n                }],\n                listeners: {\n                    toggle: 'onToggle'\n                }\n            }]\n        }, '->', {\n            xtype: 'buttongroup',\n            title: 'pack',\n               layout: 'fit',\n            items: [{\n                xtype: 'segmentedbutton',\n                margin: 10,\n                allowDepress: true,\n                defaults: {\n                    configType: 'pack'  // custom config used in this example\n                },\n                items: [{\n                    text: 'start'\n                }, {\n                    text: 'center'\n                }, {\n                    text: 'end'\n                }],\n                listeners: {\n                    toggle: 'onToggle'\n                }\n            }]\n        }]\n    }],\n\n    onToggle: function (group, button, isPressed) {\n        var cfg = {};\n\n        cfg[button.configType] = isPressed ? button.getText() : null;\n        this.setLayout(cfg);\n    }\n});\n","options":{}},{"id":"Ext.layout.container.Table-0","name":"Ext.layout.container.Table example #1","href":"#!/api/Ext.layout.container.Table","code":"Ext.create('Ext.panel.Panel', {\n    title: 'Table Layout',\n    width: 300,\n    height: 150,\n    layout: {\n        type: 'table',\n        // The total column count must be specified here\n        columns: 3\n    },\n    defaults: {\n        // applied to each contained panel\n        bodyStyle: 'padding:20px'\n    },\n    items: [{\n        html: 'Cell A content',\n        rowspan: 2\n    },{\n        html: 'Cell B content',\n        colspan: 2\n    },{\n        html: 'Cell C content',\n        cellCls: 'highlight'\n    },{\n        html: 'Cell D content'\n    }],\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.layout.container.VBox-0","name":"Ext.layout.container.VBox example #1","href":"#!/api/Ext.layout.container.VBox","code":"Ext.create('Ext.Panel', {\n    width: 500,\n    height: 400,\n    title: \"VBoxLayout Panel\",\n    layout: {\n        type: 'vbox',\n    },\n    renderTo: document.body,\n    items: [{\n        xtype: 'panel',\n        title: 'Inner Panel One',\n        width: 250,\n        flex: 2\n    },\n    {\n        xtype: 'panel',\n        title: 'Inner Panel Two',\n        width: 250,\n        flex: 4\n    },\n    {\n        xtype: 'panel',\n        title: 'Inner Panel Three',\n        width: '50%',\n        flex: 4\n    }]\n});\n","options":{}},{"id":"Ext.layout.container.VBox-1","name":"Ext.layout.container.VBox example #2","href":"#!/api/Ext.layout.container.VBox","code":"Ext.create({\n    xtype: 'panel',\n    renderTo: Ext.getBody(),\n    height: 400,\n    width: 520,\n    defaultListenerScope: true,\n    layout: 'vbox',\n    defaultType: 'button',\n    items: [{\n        text: 'One'\n    }, {\n        text: 'Two'\n    }, {\n        text: 'Three'\n    }],\n\n    dockedItems: [{\n        xtype: 'toolbar',\n        dock: 'top',\n        items: [{\n            xtype: 'buttongroup',\n            title: 'align',\n            layout: 'fit',\n            items: [{\n                xtype: 'segmentedbutton',\n                margin: 10,\n                allowDepress: true,\n                defaults: {\n                    configType: 'align'  // custom config used in this example\n                },\n                items: [{\n                    text: 'begin'\n                }, {\n                    text: 'middle'\n                }, {\n                    text: 'end'\n                }, {\n                    text: 'stretch'\n                }, {\n                    text: 'stretchmax'\n                }],\n                listeners: {\n                    toggle: 'onToggle'\n                }\n            }]\n        }, '->', {\n            xtype: 'buttongroup',\n            title: 'pack',\n            layout: 'fit',\n            items: [{\n                xtype: 'segmentedbutton',\n                margin: 10,\n                allowDepress: true,\n                defaults: {\n                    configType: 'pack'  // custom config used in this example\n                },\n                items: [{\n                    text: 'start'\n                }, {\n                    text: 'center'\n                }, {\n                    text: 'end'\n                }],\n                listeners: {\n                    toggle: 'onToggle'\n                }\n            }]\n        }]\n    }],\n\n    onToggle: function (group, button, isPressed) {\n        var cfg = {};\n\n        cfg[button.configType] = isPressed ? button.getText() : null;\n        this.setLayout(cfg);\n    }\n});\n","options":{}},{"id":"Ext.LoadMask-0","name":"Ext.LoadMask example #1","href":"#!/api/Ext.LoadMask","code":"var myPanel = new Ext.panel.Panel({\n    renderTo : document.body,\n    height   : 100,\n    width    : 200,\n    title    : 'Foo'\n});\n\nvar myMask = new Ext.LoadMask({\n    msg    : 'Please wait...',\n    target : myPanel\n});\n\nmyMask.show();\n","options":{}},{"id":"Ext.menu.Bar-0","name":"Ext.menu.Bar example #1","href":"#!/api/Ext.menu.Bar","code":"new Ext.menu.Bar({\n     renderTo: Ext.getBody(),\n     width: 200,\n     items: [{\n         text: 'File',\n         menu: [\n             { text: 'Open...' },\n             '-',\n             { text: 'Close' }\n         ]\n     }, {\n         text: 'Edit',\n         menu: [\n             { text: 'Cut' },\n             { text: 'Copy' }\n             { text: 'Paste' }\n         ]\n     }]\n });\n","options":{}},{"id":"Ext.menu.CheckItem-0","name":"Ext.menu.CheckItem example #1","href":"#!/api/Ext.menu.CheckItem","code":"Ext.create('Ext.menu.Menu', {\n    width: 100,\n    height: 110,\n    floating: false,  // usually you want this set to True (default)\n    renderTo: Ext.getBody(),  // usually rendered by it's containing component\n    items: [{\n        xtype: 'menucheckitem',\n        text: 'select all'\n    },{\n        xtype: 'menucheckitem',\n        text: 'select specific'\n    },{\n        iconCls: 'add16',\n        text: 'icon item'\n    },{\n        text: 'regular item'\n    }]\n});\n","options":{}},{"id":"Ext.menu.ColorPicker-0","name":"Ext.menu.ColorPicker example #1","href":"#!/api/Ext.menu.ColorPicker","code":"var colorPicker = Ext.create('Ext.menu.ColorPicker', {\n    value: '000000'\n});\n\nExt.create('Ext.menu.Menu', {\n    items: [{\n        text: 'Choose a color',\n        menu: colorPicker\n    },{\n        iconCls: 'add16',\n        text: 'Icon item'\n    },{\n        text: 'Regular item'\n    }]\n}).showAt([5, 5]);\n","options":{}},{"id":"Ext.menu.DatePicker-0","name":"Ext.menu.DatePicker example #1","href":"#!/api/Ext.menu.DatePicker","code":"var dateMenu = Ext.create('Ext.menu.DatePicker', {\n    handler: function(dp, date){\n        Ext.Msg.alert('Date Selected', 'You selected ' + Ext.Date.format(date, 'M j, Y'));\n    }\n});\n\nExt.create('Ext.menu.Menu', {\n    items: [{\n        text: 'Choose a date',\n        menu: dateMenu\n    },{\n        iconCls: 'add16',\n        text: 'Icon item'\n    },{\n        text: 'Regular item'\n    }]\n}).showAt([5, 5]);\n","options":{}},{"id":"Ext.menu.Item-0","name":"Ext.menu.Item example #1","href":"#!/api/Ext.menu.Item","code":"Ext.create('Ext.menu.Menu', {\n    width: 100,\n    height: 100,\n    floating: false,  // usually you want this set to True (default)\n    renderTo: Ext.getBody(),  // usually rendered by it's containing component\n    items: [{\n        text: 'icon item',\n        iconCls: 'add16'\n    },{\n        text: 'text item'\n    },{\n        text: 'plain item',\n        plain: true\n    }]\n});\n","options":{}},{"id":"Ext.menu.Menu-0","name":"Ext.menu.Menu example #1","href":"#!/api/Ext.menu.Menu","code":"Ext.create('Ext.menu.Menu', {\n    width: 100,\n    margin: '0 0 10 0',\n    floating: false,  // usually you want this set to True (default)\n    renderTo: Ext.getBody(),  // usually rendered by it's containing component\n    items: [{\n        text: 'regular item 1'\n    },{\n        text: 'regular item 2'\n    },{\n        text: 'regular item 3'\n    }]\n});\n\nExt.create('Ext.menu.Menu', {\n    width: 100,\n    plain: true,\n    floating: false,  // usually you want this set to True (default)\n    renderTo: Ext.getBody(),  // usually rendered by it's containing component\n    items: [{\n        text: 'plain item 1'\n    },{\n        text: 'plain item 2'\n    },{\n        text: 'plain item 3'\n    }]\n});\n","options":{}},{"id":"Ext.menu.Separator-0","name":"Ext.menu.Separator example #1","href":"#!/api/Ext.menu.Separator","code":"Ext.create('Ext.menu.Menu', {\n    width: 100,\n    height: 100,\n    floating: false,  // usually you want this set to True (default)\n    renderTo: Ext.getBody(),  // usually rendered by it's containing component\n    items: [{\n        text: 'icon item',\n        iconCls: 'add16'\n    },{\n        xtype: 'menuseparator'\n    },{\n       text: 'separator above'\n    },{\n       text: 'regular item'\n    }]\n});\n","options":{}},{"id":"Ext.panel.Panel-0","name":"Ext.panel.Panel example #1","href":"#!/api/Ext.panel.Panel","code":"Ext.create('Ext.panel.Panel', {\n    title: 'Hello',\n    width: 200,\n    html: '<p>World!</p>',\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.panel.Panel-1","name":"Ext.panel.Panel example #2","href":"#!/api/Ext.panel.Panel","code":"var filterPanel = Ext.create('Ext.panel.Panel', {\n    bodyPadding: 5,  // Don't want content to crunch against the borders\n    width: 300,\n    title: 'Filters',\n    items: [{\n        xtype: 'datefield',\n        fieldLabel: 'Start date'\n    }, {\n        xtype: 'datefield',\n        fieldLabel: 'End date'\n    }],\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.panel.Panel-2","name":"Ext.panel.Panel example #3","href":"#!/api/Ext.panel.Panel","code":"var resultsPanel = Ext.create('Ext.panel.Panel', {\n    title: 'Results',\n    width: 600,\n    height: 400,\n    renderTo: Ext.getBody(),\n    layout: {\n        type: 'vbox',       // Arrange child items vertically\n        align: 'stretch',    // Each takes up full width\n        padding: 5\n    },\n    items: [{               // Results grid specified as a config object with an xtype of 'grid'\n        xtype: 'grid',\n        columns: [{header: 'Column One'}],            // One header just for show. There's no data,\n        store: Ext.create('Ext.data.ArrayStore', {}), // A dummy empty data store\n        flex: 1                                       // Use 1/3 of Container's height (hint to Box layout)\n    }, {\n        xtype: 'splitter'   // A splitter between the two child items\n    }, {                    // Details Panel specified as a config object (no xtype defaults to 'panel').\n        title: 'Details',\n        bodyPadding: 5,\n        items: [{\n            fieldLabel: 'Data item',\n            xtype: 'textfield'\n        }], // An array of form fields\n        flex: 2             // Use 2/3 of Container's height (hint to Box layout)\n    }]\n});\n","options":{}},{"id":"Ext.panel.Tool-0","name":"Ext.panel.Tool example #1","href":"#!/api/Ext.panel.Tool","code":"Ext.create('Ext.panel.Panel', {\n    width: 200,\n    height: 200,\n    renderTo: document.body,\n    title: 'A Panel',\n    tools: [{\n        type: 'help',\n        callback: function() {\n            // show help here\n        }\n    }, {\n        itemId: 'reply',\n        glyph: 'xf112@FontAwesome', // Reply icon\n        hidden: true,\n        callback: function() {\n            // do reply\n        }\n    }, {\n        type: 'search',\n        callback: function (panel) {\n            // do search\n            panel.down('#refresh').show();\n        }\n    }]\n});\n","options":{}},{"id":"Ext.picker.Color-0","name":"Ext.picker.Color example #1","href":"#!/api/Ext.picker.Color","code":"Ext.create('Ext.picker.Color', {\n    value: '993300',  // initial selected color\n    renderTo: Ext.getBody(),\n    listeners: {\n        select: function(picker, selColor) {\n            alert(selColor);\n        }\n    }\n});\n","options":{}},{"id":"Ext.picker.Date-0","name":"Ext.picker.Date example #1","href":"#!/api/Ext.picker.Date","code":"Ext.create('Ext.panel.Panel', {\n    title: 'Choose a future date:',\n    width: 330,\n    bodyPadding: 10,\n    renderTo: Ext.getBody(),\n    items: [{\n        xtype: 'datepicker',\n        minDate: new Date(),\n        handler: function(picker, date) {\n            // do something with the selected date\n        }\n    }]\n});\n","options":{}},{"id":"Ext.picker.Month-0","name":"Ext.picker.Month example #1","href":"#!/api/Ext.picker.Month","code":"Ext.create({\n    xtype: 'monthpicker',\n    renderTo: document.body,\n    value: new Date(),\n    onSelect: function() {\n        Ext.Msg.alert('Selected', this.getValue());\n    },\n    listeners: {\n        okclick: 'onSelect',\n        monthdblclick: 'onSelect',\n        yeardblclick: 'onSelect',\n        cancelclick: function () {\n            this.setValue(new Date());\n        }\n    }\n});\n","options":{}},{"id":"Ext.picker.Time-0","name":"Ext.picker.Time example #1","href":"#!/api/Ext.picker.Time","code":"Ext.create('Ext.picker.Time', {\n   width: 60,\n   minValue: Ext.Date.parse('04:30:00 AM', 'h:i:s A'),\n   maxValue: Ext.Date.parse('08:00:00 AM', 'h:i:s A'),\n   renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.ProgressBar-0","name":"Ext.ProgressBar example #1","href":"#!/api/Ext.ProgressBar","code":"var p = Ext.create('Ext.ProgressBar', {\n   renderTo: Ext.getBody(),\n   width: 300\n});\n\n// Wait for 5 seconds, then update the status el (progress bar will auto-reset)\np.wait({\n    interval: 500, //bar will move fast!\n    duration: 50000,\n    increment: 15,\n    text: 'Updating...',\n    scope: this,\n    fn: function(){\n        p.updateText('Done!');\n    }\n});\n","options":{}},{"id":"Ext.selection.CellModel-0","name":"Ext.selection.CellModel example #1","href":"#!/api/Ext.selection.CellModel","code":"var store = Ext.create('Ext.data.Store', {\n    fields: ['name', 'email', 'phone'],\n    data: [\n        { name: 'Lisa', email: 'lisa@simpsons.com',  phone: '555-111-1224' },\n        { name: 'Bart', email: 'bart@simpsons.com',  phone: '555-222-1234' },\n        { name: 'Homer', email: 'homer@simpsons.com', phone: '555-222-1244' },\n        { name: 'Marge', email: 'marge@simpsons.com', phone: '555-222-1254' }\n    ]\n});\n\nExt.create('Ext.grid.Panel', {\n    title: 'Simpsons',\n    store: store,\n    width: 400,\n    renderTo: Ext.getBody(),\n    columns: [\n        { text: 'Name',  dataIndex: 'name' },\n        { text: 'Email', dataIndex: 'email', flex: 1 },\n        { text: 'Phone', dataIndex: 'phone' }\n    ],\n    selModel: 'cellmodel'\n});\n","options":{}},{"id":"Ext.selection.CheckboxModel-0","name":"Ext.selection.CheckboxModel example #1","href":"#!/api/Ext.selection.CheckboxModel","code":"var store = Ext.create('Ext.data.Store', {\n      fields: ['name', 'email', 'phone'],\n      data: [{\n          name: 'Lisa',\n          email: 'lisa@simpsons.com',\n          phone: '555-111-1224'\n      }, {\n          name: 'Bart',\n          email: 'bart@simpsons.com',\n          phone: '555-222-1234'\n      }, {\n          name: 'Homer',\n          email: 'homer@simpsons.com',\n          phone: '555-222-1244'\n      }, {\n          name: 'Marge',\n          email: 'marge@simpsons.com',\n          phone: '555-222-1254'\n      }]\n  });\n\n  Ext.create('Ext.grid.Panel', {\n      title: 'Simpsons',\n      store: store,\n      columns: [{\n          text: 'Name',\n          dataIndex: 'name'\n      }, {\n          text: 'Email',\n          dataIndex: 'email',\n          flex: 1\n      }, {\n          text: 'Phone',\n          dataIndex: 'phone'\n      }],\n      height: 200,\n      width: 400,\n      renderTo: Ext.getBody(),\n      selModel: {\n          selType: 'checkboxmodel'\n      }\n  });\n","options":{}},{"id":"Ext.selection.RowModel-0","name":"Ext.selection.RowModel example #1","href":"#!/api/Ext.selection.RowModel","code":"var store = Ext.create('Ext.data.Store', {\n    fields: ['name', 'email', 'phone'],\n    data: [\n        { name: 'Lisa', email: 'lisa@simpsons.com', phone: '555-111-1224' },\n        { name: 'Bart', email: 'bart@simpsons.com', phone: '555-222-1234' },\n        { name: 'Homer', email: 'homer@simpsons.com', phone: '555-222-1244' },\n        { name: 'Marge', email: 'marge@simpsons.com', phone: '555-222-1254' }\n    ]\n});\n\nExt.create('Ext.grid.Panel', {\n    title: 'Simpsons',\n    store: store,\n    width: 400,\n    renderTo: Ext.getBody(),\n    selModel: {\n       selType: 'rowmodel', // rowmodel is the default selection model\n       mode: 'MULTI' // Allows selection of multiple rows\n    },\n    columns: [\n        { text: 'Name',  dataIndex: 'name'  },\n        { text: 'Email', dataIndex: 'email', flex: 1 },\n        { text: 'Phone', dataIndex: 'phone' }\n    ]\n});\n","options":{}},{"id":"Ext.slider.Multi-0","name":"Ext.slider.Multi example #1","href":"#!/api/Ext.slider.Multi","code":"Ext.create('Ext.slider.Multi', {\n    width: 200,\n    values: [25, 50, 75],\n    increment: 5,\n    minValue: 0,\n    maxValue: 100,\n\n    // this defaults to true, setting to false allows the thumbs to pass each other\n    constrainThumbs: false,\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.slider.Single-0","name":"Ext.slider.Single example #1","href":"#!/api/Ext.slider.Single","code":"Ext.create('Ext.slider.Single', {\n    width: 200,\n    value: 50,\n    increment: 10,\n    minValue: 0,\n    maxValue: 100,\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.slider.Tip-0","name":"Ext.slider.Tip example #1","href":"#!/api/Ext.slider.Tip","code":"Ext.create('Ext.slider.Single', {\n    width: 214,\n    minValue: 0,\n    maxValue: 100,\n    useTips: true,\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.slider.Tip-1","name":"Ext.slider.Tip example #2","href":"#!/api/Ext.slider.Tip","code":"Ext.create('Ext.slider.Single', {\n    width: 214,\n    minValue: 0,\n    maxValue: 100,\n    useTips: true,\n    tipText: function(thumb){\n        return Ext.String.format('**{0}% complete**', thumb.value);\n    },\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.tab.Panel-0","name":"Ext.tab.Panel example #1","href":"#!/api/Ext.tab.Panel","code":"Ext.tip.QuickTipManager.init();\nExt.create('Ext.tab.Panel', {\n    width: 400,\n    height: 400,\n    renderTo: document.body,\n    items: [{\n        title: 'Foo'\n    }, {\n        title: 'Bar',\n        tabConfig: {\n            title: 'Custom Title',\n            tooltip: 'A button tooltip'\n        }\n    }]\n});\n","options":{}},{"id":"Ext.tab.Panel-1","name":"Ext.tab.Panel example #2","href":"#!/api/Ext.tab.Panel","code":"Ext.create('Ext.tab.Panel', {\n    renderTo: Ext.getBody(),\n    width: 200,\n    height: 200,\n    listeners: {\n        beforetabchange: function(tabs, newTab, oldTab) {\n            return newTab.title != 'P2';\n        }\n    },\n    items: [{\n        title: 'P1'\n    }, {\n        title: 'P2'\n    }, {\n        title: 'P3'\n    }]\n}); \n","options":{}},{"id":"Ext.tab.Panel-2","name":"Ext.tab.Panel example #3","href":"#!/api/Ext.tab.Panel","code":"Ext.create('Ext.tab.Panel', {\n    width: 300,\n    height: 200,\n    activeTab: 0,\n    items: [\n        {\n            title: 'Tab 1',\n            bodyPadding: 10,\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : Ext.getBody()\n});\n","options":{}},{"id":"Ext.tab.Panel-3","name":"Ext.tab.Panel example #4","href":"#!/api/Ext.tab.Panel","code":"var tabs = Ext.create('Ext.tab.Panel', {\n    width: 400,\n    height: 400,\n    renderTo: document.body,\n    items: [{\n        title: 'Home',\n        html: 'Home',\n        itemId: 'home'\n    }, {\n        title: 'Users',\n        html: 'Users',\n        itemId: 'users',\n        hidden: true\n    }, {\n        title: 'Tickets',\n        html: 'Tickets',\n        itemId: 'tickets'\n    }]\n});\n\nExt.defer(function(){\n    tabs.child('#home').tab.hide();\n    var users = tabs.child('#users');\n    users.tab.show();\n    tabs.setActiveTab(users);\n}, 1000);\n","options":{}},{"id":"Ext.tab.Panel-4","name":"Ext.tab.Panel example #5","href":"#!/api/Ext.tab.Panel","code":"Ext.create('Ext.tab.Panel', {\n    width: 300,\n    height: 200,\n    activeTab: 0,\n    plain: true,\n    items: [\n        {\n            title: 'Tab 1',\n            bodyPadding: 10,\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : Ext.getBody()\n});\n","options":{}},{"id":"Ext.tab.Panel-5","name":"Ext.tab.Panel example #6","href":"#!/api/Ext.tab.Panel","code":"Ext.create('Ext.tab.Panel', {\n    width: 300,\n    height: 200,\n    activeTab: 0,\n    bodyPadding: 10,\n    tabPosition: 'bottom',\n    items: [\n        {\n            title: 'Tab 1',\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : Ext.getBody()\n});\n","options":{}},{"id":"Ext.tab.Panel-6","name":"Ext.tab.Panel example #7","href":"#!/api/Ext.tab.Panel","code":"var tabs = Ext.create('Ext.tab.Panel', {\n    items: [\n        {\n            id   : 'my-tab',\n            title: 'Tab 1',\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : Ext.getBody()\n});\n\nvar tab = Ext.getCmp('my-tab');\n\nExt.create('Ext.button.Button', {\n    renderTo: Ext.getBody(),\n    text    : 'Select the first tab',\n    scope   : this,\n    handler : function() {\n        tabs.setActiveTab(tab);\n    }\n});\n\nExt.create('Ext.button.Button', {\n    text    : 'Select the second tab',\n    scope   : this,\n    handler : function() {\n        tabs.setActiveTab(1);\n    },\n    renderTo : Ext.getBody()\n});\n","options":{}},{"id":"Ext.tab.Panel-7","name":"Ext.tab.Panel example #8","href":"#!/api/Ext.tab.Panel","code":"var tabs = Ext.create('Ext.tab.Panel', {\n    items: [\n        {\n            title: 'Tab 1',\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : Ext.getBody()\n});\n\nExt.create('Ext.button.Button', {\n    text    : 'Get active tab',\n    scope   : this,\n    handler : function() {\n        var tab = tabs.getActiveTab();\n        alert('Current tab: ' + tab.title);\n    },\n    renderTo : Ext.getBody()\n});\n","options":{}},{"id":"Ext.tab.Panel-8","name":"Ext.tab.Panel example #9","href":"#!/api/Ext.tab.Panel","code":"var tabs = Ext.create('Ext.tab.Panel', {\n    items: [\n        {\n            title: 'Tab 1',\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : Ext.getBody()\n});\n\nExt.create('Ext.button.Button', {\n    text    : 'New tab',\n    scope   : this,\n    handler : function() {\n        var tab = tabs.add({\n            // we use the tabs.items property to get the length of current items/tabs\n            title: 'Tab ' + (tabs.items.length + 1),\n            html : 'Another one'\n        });\n\n        tabs.setActiveTab(tab);\n    },\n    renderTo : Ext.getBody()\n});\n","options":{}},{"id":"Ext.tab.Panel-9","name":"Ext.tab.Panel example #10","href":"#!/api/Ext.tab.Panel","code":"var tabs = Ext.create('Ext.tab.Panel', {\n    items: [\n        {\n            title: 'Tab 1',\n            html : 'A simple tab'\n        },\n        {\n            id   : 'remove-this-tab',\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : Ext.getBody()\n});\n\nExt.create('Ext.button.Button', {\n    text    : 'Remove tab',\n    scope   : this,\n    handler : function() {\n        var tab = Ext.getCmp('remove-this-tab');\n        tabs.remove(tab);\n    },\n    renderTo : Ext.getBody()\n});\n","options":{}},{"id":"Ext.tip.QuickTip-0","name":"Ext.tip.QuickTip example #1","href":"#!/api/Ext.tip.QuickTip","code":"Ext.tip.QuickTipManager.init(); // Instantiate the QuickTipManager \n\n Ext.create('Ext.Button', {\n\n     renderTo: Ext.getBody(),\n     text: 'My Button',\n     listeners: {\n\n         afterrender: function(me) {\n\n             // Register the new tip with an element's ID\n             Ext.tip.QuickTipManager.register({\n                 target: me.getId(), // Target button's ID\n                 title : 'My Tooltip',  // QuickTip Header\n                 text  : 'My Button has a QuickTip' // Tip content  \n             });\n\n         },\n         destroy: function(me) {\n             Ext.tip.QuickTipManager.unregister(me.getId());\n         }\n     }\n });\n","options":{}},{"id":"Ext.tip.QuickTipManager-0","name":"Ext.tip.QuickTipManager example #1","href":"#!/api/Ext.tip.QuickTipManager","code":"// Init the singleton.  Any tag-based quick tips will start working.\nExt.tip.QuickTipManager.init();\n\n// Apply a set of config properties to the singleton\nExt.apply(Ext.tip.QuickTipManager.getQuickTip(), {\n    maxWidth: 200,\n    minWidth: 100,\n    showDelay: 50      // Show 50ms after entering target\n});\n\n// Create a small panel to add a quick tip to\nExt.create('Ext.container.Container', {\n    id: 'quickTipContainer',\n    width: 200,\n    height: 150,\n    style: {\n        backgroundColor:'#000000'\n    },\n    renderTo: Ext.getBody()\n});\n\n\n// Manually register a quick tip for a specific element\nExt.tip.QuickTipManager.register({\n    target: 'quickTipContainer',\n    title: 'My Tooltip',\n    text: 'This tooltip was added in code',\n    width: 100,\n    dismissDelay: 10000 // Hide after 10 seconds hover\n});\n","options":{}},{"id":"Ext.tip.ToolTip-0","name":"Ext.tip.ToolTip example #1","href":"#!/api/Ext.tip.ToolTip","code":"Ext.getBody().appendChild({\n    id: 'clearButton',\n    html: 'Clear Button',\n    style: 'display:inline-block;background:#A2C841;padding:7px;cursor:pointer;'\n});\n\nvar tip = Ext.create('Ext.tip.ToolTip', {\n    target: 'clearButton',\n    html: 'Press this button to clear the form'\n});\n","options":{}},{"id":"Ext.tip.ToolTip-1","name":"Ext.tip.ToolTip example #2","href":"#!/api/Ext.tip.ToolTip","code":"var store = Ext.create('Ext.data.ArrayStore', {\n    fields: ['company', 'price', 'change'],\n    data: [\n        ['3m Co',                               71.72, 0.02],\n        ['Alcoa Inc',                           29.01, 0.42],\n        ['Altria Group Inc',                    83.81, 0.28],\n        ['American Express Company',            52.55, 0.01],\n        ['American International Group, Inc.',  64.13, 0.31],\n        ['AT&T Inc.',                           31.61, -0.48]\n    ]\n});\n\nvar grid = Ext.create('Ext.grid.Panel', {\n    title: 'Array Grid',\n    store: store,\n    columns: [\n        {text: 'Company', flex: 1, dataIndex: 'company'},\n        {text: 'Price', width: 75, dataIndex: 'price'},\n        {text: 'Change', width: 75, dataIndex: 'change'}\n    ],\n    height: 200,\n    width: 400,\n    renderTo: Ext.getBody()\n});\n\nvar view = grid.getView();\nvar tip = Ext.create('Ext.tip.ToolTip', {\n    // The overall target element.\n    target: view.el,\n    // Each grid row causes its own separate show and hide.\n    delegate: view.itemSelector,\n    // Moving within the row should not hide the tip.\n    trackMouse: true,\n    // Render immediately so that tip.body can be referenced prior to the first show.\n    renderTo: Ext.getBody(),\n    listeners: {\n        // Change content dynamically depending on which element triggered the show.\n        beforeshow: function updateTipBody(tip) {\n            tip.update('Over company \"' + view.getRecord(tip.triggerElement).get('company') + '\"');\n        }\n    }\n});\n","options":{}},{"id":"Ext.toolbar.Fill-0","name":"Ext.toolbar.Fill example #1","href":"#!/api/Ext.toolbar.Fill","code":"Ext.create('Ext.panel.Panel', {\n     title: 'Toolbar Fill Example',\n     width: 300,\n     height: 200,\n     tbar : [\n         'Item 1',\n         { xtype: 'tbfill' },\n         'Item 2'\n     ],\n     renderTo: Ext.getBody()\n });\n","options":{}},{"id":"Ext.toolbar.Separator-0","name":"Ext.toolbar.Separator example #1","href":"#!/api/Ext.toolbar.Separator","code":"Ext.create('Ext.panel.Panel', {\n    title: 'Toolbar Separator Example',\n    width: 300,\n    height: 200,\n    tbar : [\n        'Item 1',\n        { xtype: 'tbseparator' },\n        'Item 2'\n    ],\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.toolbar.Spacer-0","name":"Ext.toolbar.Spacer example #1","href":"#!/api/Ext.toolbar.Spacer","code":"Ext.create('Ext.panel.Panel', {\n    title: 'Toolbar Spacer Example',\n    width: 300,\n    height: 200,\n    tbar : [\n        'Item 1',\n        { xtype: 'tbspacer' }, // or ' '\n        'Item 2',\n        // space width is also configurable via javascript\n        { xtype: 'tbspacer', width: 50 }, // add a 50px space\n        'Item 3'\n    ],\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.toolbar.TextItem-0","name":"Ext.toolbar.TextItem example #1","href":"#!/api/Ext.toolbar.TextItem","code":"Ext.create('Ext.panel.Panel', {\n    title: 'Panel with TextItem',\n    width: 300,\n    height: 200,\n    tbar: [\n        { xtype: 'tbtext', html: 'Sample Text Item' }\n    ],\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.toolbar.Toolbar-0","name":"Ext.toolbar.Toolbar example #1","href":"#!/api/Ext.toolbar.Toolbar","code":"Ext.create('Ext.toolbar.Toolbar', {\n    renderTo: document.body,\n    width   : 500,\n    items: [\n        {\n            // xtype: 'button', // default for Toolbars\n            text: 'Button'\n        },\n        {\n            xtype: 'splitbutton',\n            text : 'Split Button'\n        },\n        // begin using the right-justified button container\n        '->', // same as { xtype: 'tbfill' }\n        {\n            xtype    : 'textfield',\n            name     : 'field1',\n            emptyText: 'enter search term'\n        },\n        // add a vertical separator bar between toolbar items\n        '-', // same as {xtype: 'tbseparator'} to create Ext.toolbar.Separator\n        'text 1', // same as {xtype: 'tbtext', text: 'text1'} to create Ext.toolbar.TextItem\n        { xtype: 'tbspacer' },// same as ' ' to create Ext.toolbar.Spacer\n        'text 2',\n        { xtype: 'tbspacer', width: 50 }, // add a 50px space\n        'text 3'\n    ]\n});\n","options":{}},{"id":"Ext.toolbar.Toolbar-1","name":"Ext.toolbar.Toolbar example #2","href":"#!/api/Ext.toolbar.Toolbar","code":"Ext.create('Ext.toolbar.Toolbar', {\n    renderTo: document.body,\n    width   : 400,\n    items: [\n        {\n            text: 'Button'\n        },\n        {\n            xtype: 'splitbutton',\n            text : 'Split Button'\n        },\n        '->',\n        {\n            xtype    : 'textfield',\n            name     : 'field1',\n            emptyText: 'enter search term'\n        }\n    ]\n});\n","options":{}},{"id":"Ext.toolbar.Toolbar-2","name":"Ext.toolbar.Toolbar example #3","href":"#!/api/Ext.toolbar.Toolbar","code":"var enableBtn = Ext.create('Ext.button.Button', {\n    text    : 'Enable All Items',\n    disabled: true,\n    scope   : this,\n    handler : function() {\n        //disable the enable button and enable the disable button\n        enableBtn.disable();\n        disableBtn.enable();\n\n        //enable the toolbar\n        toolbar.enable();\n    }\n});\n\nvar disableBtn = Ext.create('Ext.button.Button', {\n    text    : 'Disable All Items',\n    scope   : this,\n    handler : function() {\n        //enable the enable button and disable button\n        disableBtn.disable();\n        enableBtn.enable();\n\n        //disable the toolbar\n        toolbar.disable();\n    }\n});\n\nvar toolbar = Ext.create('Ext.toolbar.Toolbar', {\n    renderTo: document.body,\n    width   : 400,\n    margin  : '5 0 0 0',\n    items   : [enableBtn, disableBtn]\n});\n","options":{}},{"id":"Ext.toolbar.Toolbar-3","name":"Ext.toolbar.Toolbar example #4","href":"#!/api/Ext.toolbar.Toolbar","code":"var toolbar = Ext.create('Ext.toolbar.Toolbar', {\n    renderTo: document.body,\n    width   : 700,\n    items: [\n        {\n            text: 'Example Button'\n        }\n    ]\n});\n\nvar addedItems = [];\n\nExt.create('Ext.toolbar.Toolbar', {\n    renderTo: document.body,\n    width   : 700,\n    margin  : '5 0 0 0',\n    items   : [\n        {\n            text   : 'Add a button',\n            scope  : this,\n            handler: function() {\n                var text = prompt('Please enter the text for your button:');\n                addedItems.push(toolbar.add({\n                    text: text\n                }));\n            }\n        },\n        {\n            text   : 'Add a text item',\n            scope  : this,\n            handler: function() {\n                var text = prompt('Please enter the text for your item:');\n                addedItems.push(toolbar.add(text));\n            }\n        },\n        {\n            text   : 'Add a toolbar separator',\n            scope  : this,\n            handler: function() {\n                addedItems.push(toolbar.add('-'));\n            }\n        },\n        {\n            text   : 'Add a toolbar spacer',\n            scope  : this,\n            handler: function() {\n                addedItems.push(toolbar.add('->'));\n            }\n        },\n        '->',\n        {\n            text   : 'Remove last inserted item',\n            scope  : this,\n            handler: function() {\n                if (addedItems.length) {\n                    toolbar.remove(addedItems.pop());\n                } else if (toolbar.items.length) {\n                    toolbar.remove(toolbar.items.last());\n                } else {\n                    alert('No items in the toolbar');\n                }\n            }\n        },\n        {\n            text   : 'Remove all items',\n            scope  : this,\n            handler: function() {\n                toolbar.removeAll();\n            }\n        }\n    ]\n});\n","options":{}},{"id":"Ext.tree.Panel-0","name":"Ext.tree.Panel example #1","href":"#!/api/Ext.tree.Panel","code":"var store = Ext.create('Ext.data.TreeStore', {\n    root: {\n        expanded: true,\n        children: [\n            { text: 'detention', leaf: true },\n            { text: 'homework', expanded: true, children: [\n                { text: 'book report', leaf: true },\n                { text: 'algebra', leaf: true}\n            ] },\n            { text: 'buy lottery tickets', leaf: true }\n        ]\n    }\n});\n\nExt.create('Ext.tree.Panel', {\n    title: 'Simple Tree',\n    width: 200,\n    height: 200,\n    store: store,\n    rootVisible: false,\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.tree.Panel-1","name":"Ext.tree.Panel example #2","href":"#!/api/Ext.tree.Panel","code":"Ext.define('myApp.Territory', {\n    extend: 'Ext.data.TreeModel',\n    fields: [{\n        name: 'text',\n        mapping: 'name'\n    }]\n});\nExt.define('myApp.Country', {\n    extend: 'Ext.data.TreeModel',\n    fields: [{\n        name: 'text',\n        mapping: 'name'\n    }]\n});\nExt.define('myApp.City', {\n    extend: 'Ext.data.TreeModel',\n    fields: [{\n        name: 'text',\n        mapping: 'name'\n    }]\n});\nExt.create('Ext.tree.Panel', {\n    renderTo: document.body,\n    height: 200,\n    width: 400,\n    title: 'Sales Areas - using typeProperty',\n    rootVisible: false,\n    store: {\n        // Child types use namespace of store's model by default\n        model: 'myApp.Territory',\n        proxy: {\n            type: 'memory',\n            reader: {\n                typeProperty: 'mtype'\n            }\n        },\n        root: {\n            children: [{\n                name: 'Europe, ME, Africa',\n                mtype: 'Territory',\n                children: [{\n                    name: 'UK of GB & NI',\n                    mtype: 'Country',\n                    children: [{\n                        name: 'London',\n                        mtype: 'City',\n                        leaf: true\n                    }]\n                }]\n            }, {\n                name: 'North America',\n                mtype: 'Territory',\n                children: [{\n                    name: 'USA',\n                    mtype: 'Country',\n                    children: [{\n                        name: 'Redwood City',\n                        mtype: 'City',\n                        leaf: true\n                    }]\n                }]\n            }]\n        }\n    }\n});\n","options":{}},{"id":"Ext.tree.Panel-2","name":"Ext.tree.Panel example #3","href":"#!/api/Ext.tree.Panel","code":"Ext.define('myApp.TerritoryRoot', {\n    extend: 'Ext.data.TreeModel',\n    childType: 'myApp.Territory',\n    fields: [{\n        name: 'text',\n        mapping: 'name'\n    }]\n});\nExt.define('myApp.Territory', {\n    extend: 'Ext.data.TreeModel',\n    childType: 'myApp.Country',\n    fields: [{\n        name: 'text',\n        mapping: 'name'\n    }]\n});\nExt.define('myApp.Country', {\n    extend: 'Ext.data.TreeModel',\n    childType: 'myApp.City',\n    fields: [{\n        name: 'text',\n        mapping: 'name'\n    }]\n});\nExt.define('myApp.City', {\n    extend: 'Ext.data.TreeModel',\n    fields: [{\n        name: 'text',\n        mapping: 'name'\n    }]\n});\nExt.create('Ext.tree.Panel', {\n    renderTo: document.body,\n    height: 200,\n    width: 400,\n    title: 'Sales Areas',\n    rootVisible: false,\n    store: {\n        model: 'myApp.TerritoryRoot', // Needs to be this so it knows to create 'Country' child nodes\n        root: {\n            children: [{\n                name: 'Europe, ME, Africa',\n                children: [{\n                    name: 'UK of GB & NI',\n                    children: [{\n                        name: 'London',\n                        leaf: true\n                    }]\n                }]\n            }, {\n                name: 'North America',\n                children: [{\n                    name: 'USA',\n                    children: [{\n                        name: 'Redwood City',\n                        leaf: true\n                    }]\n                }]\n            }]\n        }\n    }\n});\n","options":{}},{"id":"Ext.tree.Panel-3","name":"Ext.tree.Panel example #4","href":"#!/api/Ext.tree.Panel","code":"Ext.create({\n    xtype: 'treepanel',\n    renderTo: Ext.getBody(),\n    height: 200,\n    width: 300,\n    rootVisible: false,\n    store: Ext.create('Ext.data.TreeStore', {\n        fields: ['text', 'duration', 'isLayover'],\n        root: {\n            expanded: true,\n            children: [{\n                text: 'SFO  &nbsp;✈&nbsp; DFW',\n                duration: '6h 55m',\n                expanded: true,\n                children: [{\n                    text: 'SFO &nbsp;✈&nbsp; PHX',\n                    duration: '2h 04m',\n                    leaf: true\n                }, {\n                    text: 'PHX layover',\n                    duration: '2h 36m',\n                    isLayover: true,\n                    leaf: true\n                }, {\n                    text: 'PHX &nbsp;✈&nbsp; DFW',\n                    duration: '2h 15m',\n                    leaf: true\n                }]\n            }]\n        }\n    }),\n    columns: [{\n        xtype: 'treecolumn',\n        text: 'Flight Endpoints',\n        dataIndex: 'text',\n        flex: 1,\n        renderer: function (val, meta, rec) {\n            if (rec.get('isLayover')) {\n                meta.tdStyle = 'color: gray; font-style: italic;';\n            }\n            return val;\n        }\n    }, {\n        text: 'Duration',\n        dataIndex: 'duration',\n        width: 100\n    }]\n});\n","options":{}},{"id":"Ext.view.View-0","name":"Ext.view.View example #1","href":"#!/api/Ext.view.View","code":"Ext.define('Image', {\n    extend: 'Ext.data.Model',\n    fields: [\n        { name:'src', type:'string' },\n        { name:'caption', type:'string' }\n    ]\n});\n\nExt.create('Ext.data.Store', {\n    id:'imagesStore',\n    model: 'Image',\n    data: [\n        { src:'http://www.sencha.com/img/20110215-feat-drawing.png', caption:'Drawing & Charts' },\n        { src:'http://www.sencha.com/img/20110215-feat-data.png', caption:'Advanced Data' },\n        { src:'http://www.sencha.com/img/20110215-feat-html5.png', caption:'Overhauled Theme' },\n        { src:'http://www.sencha.com/img/20110215-feat-perf.png', caption:'Performance Tuned' }\n    ]\n});\n\nvar imageTpl = new Ext.XTemplate(\n    '<tpl for=\".\">',\n        '<div style=\"margin-bottom: 10px;\" class=\"thumb-wrap\">',\n          '<img src=\"{src}\" />',\n          '<br/><span>{caption}</span>',\n        '</div>',\n    '</tpl>'\n);\n\nExt.create('Ext.view.View', {\n    store: Ext.data.StoreManager.lookup('imagesStore'),\n    tpl: imageTpl,\n    itemSelector: 'div.thumb-wrap',\n    emptyText: 'No images available',\n    renderTo: Ext.getBody()\n});\n","options":{}},{"id":"Ext.window.MessageBox-0","name":"Ext.window.MessageBox example #1","href":"#!/api/Ext.window.MessageBox","code":"Ext.Msg.alert('Status', 'Changes saved successfully.');\n","options":{}},{"id":"Ext.window.MessageBox-1","name":"Ext.window.MessageBox example #2","href":"#!/api/Ext.window.MessageBox","code":"Ext.Msg.prompt('Name', 'Please enter your name:', function(btn, text){\n    if (btn == 'ok'){\n        // process text value and close...\n    }\n});\n","options":{}},{"id":"Ext.window.MessageBox-2","name":"Ext.window.MessageBox example #3","href":"#!/api/Ext.window.MessageBox","code":"Ext.Msg.show({\n    title:'Save Changes?',\n    message: 'You are closing a tab that has unsaved changes. Would you like to save your changes?',\n    buttons: Ext.Msg.YESNOCANCEL,\n    icon: Ext.Msg.QUESTION,\n    fn: function(btn) {\n        if (btn === 'yes') {\n            console.log('Yes pressed');\n        } else if (btn === 'no') {\n            console.log('No pressed');\n        } else {\n            console.log('Cancel pressed');\n        } \n    }\n});\n","options":{}},{"id":"Ext.window.MessageBox-3","name":"Ext.window.MessageBox example #4","href":"#!/api/Ext.window.MessageBox","code":"var myMsg = Ext.create('Ext.window.MessageBox', {\n    // set closeAction to 'destroy' if this instance is not\n    // intended to be reused by the application\n    closeAction: 'destroy'\n}).show({\n    title: 'Custom MessageBox Instance',\n    message: 'I can exist along with Ext.Msg'\n});\n\nExt.Msg.alert('Overlapping', 'Ext.Msg instance');\n","options":{}},{"id":"Ext.MessageBox-0","name":"Ext.MessageBox example #1","href":"#!/api/Ext.MessageBox","code":"Ext.Msg.alert('Status', 'Changes saved successfully.');\n","options":{}},{"id":"Ext.MessageBox-1","name":"Ext.MessageBox example #2","href":"#!/api/Ext.MessageBox","code":"Ext.Msg.prompt('Name', 'Please enter your name:', function(btn, text){\n    if (btn == 'ok'){\n        // process text value and close...\n    }\n});\n","options":{}},{"id":"Ext.MessageBox-2","name":"Ext.MessageBox example #3","href":"#!/api/Ext.MessageBox","code":"Ext.Msg.show({\n    title:'Save Changes?',\n    message: 'You are closing a tab that has unsaved changes. Would you like to save your changes?',\n    buttons: Ext.Msg.YESNOCANCEL,\n    icon: Ext.Msg.QUESTION,\n    fn: function(btn) {\n        if (btn === 'yes') {\n            console.log('Yes pressed');\n        } else if (btn === 'no') {\n            console.log('No pressed');\n        } else {\n            console.log('Cancel pressed');\n        } \n    }\n});\n","options":{}},{"id":"Ext.MessageBox-3","name":"Ext.MessageBox example #4","href":"#!/api/Ext.MessageBox","code":"var myMsg = Ext.create('Ext.window.MessageBox', {\n    // set closeAction to 'destroy' if this instance is not\n    // intended to be reused by the application\n    closeAction: 'destroy'\n}).show({\n    title: 'Custom MessageBox Instance',\n    message: 'I can exist along with Ext.Msg'\n});\n\nExt.Msg.alert('Overlapping', 'Ext.Msg instance');\n","options":{}},{"id":"Ext.window.Window-0","name":"Ext.window.Window example #1","href":"#!/api/Ext.window.Window","code":"Ext.create('Ext.window.Window', {\n    title: 'Hello',\n    height: 200,\n    width: 400,\n    layout: 'fit',\n    items: {  // Let's put an empty grid in just to illustrate fit layout\n        xtype: 'grid',\n        border: false,\n        columns: [{header: 'World'}],                 // One header just for show. There's no data,\n        store: Ext.create('Ext.data.ArrayStore', {}) // A dummy empty data store\n    }\n}).show();\n","options":{}},{"id":"Ext.ux.Gauge-0","name":"Ext.ux.Gauge example #1","href":"#!/api/Ext.ux.Gauge","code":"Ext.create({\n    xtype: 'panel',\n    renderTo: document.body,\n    width: 200,\n    height: 200,\n    layout: 'fit',\n    items: {\n        xtype: 'gauge',\n        padding: 20,\n        value: 55,\n        minValue: 40,\n        maxValue: 80\n    }\n});\n","options":{}},{"id":"Ext.ux.Gauge-1","name":"Ext.ux.Gauge example #2","href":"#!/api/Ext.ux.Gauge","code":"Ext.create({\n    xtype: 'panel',\n    renderTo: document.body,\n    width: 200,\n    height: 200,\n    layout: 'fit',\n    items: {\n        xtype: 'gauge',\n        padding: 20,\n        trackStart: 0,\n        trackLength: 360,\n        value: 20,\n        valueStyle: {\n            round: true\n        },\n        textTpl: 'Loading...',\n        animation: {\n            easing: 'linear',\n            duration: 100000\n        }\n    }\n}).items.first().setAngleOffset(360 * 100);\n","options":{}},{"id":"Ext.ux.rating.Picker-0","name":"Ext.ux.rating.Picker example #1","href":"#!/api/Ext.ux.rating.Picker","code":"Ext.create({\n     xtype: 'rating',\n     renderTo: Ext.getBody(),\n     listeners: {\n         change: function (picker, value) {\n            console.log('Rating ' + value);\n         }\n     }\n });\n","options":{}},{"id":"Ext.chart.axis.Category-0","name":"Ext.chart.axis.Category example #1","href":"#!/api/Ext.chart.axis.Category","code":"Ext.create({\n   xtype: 'cartesian', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   innerPadding: '0 40 0 40',\n   store: {\n       fields: ['name', 'data1', 'data2', 'data3'],\n       data: [{\n           'name': 'metric one',\n           'data1': 10,\n           'data2': 12,\n           'data3': 14\n       }, {\n           'name': 'metric two',\n           'data1': 7,\n           'data2': 8,\n           'data3': 16\n       }, {\n           'name': 'metric three',\n           'data1': 5,\n           'data2': 2,\n           'data3': 14\n       }, {\n           'name': 'metric four',\n           'data1': 2,\n           'data2': 14,\n           'data3': 6\n       }, {\n           'name': 'metric five',\n           'data1': 27,\n           'data2': 38,\n           'data3': 36\n       }]\n   },\n   axes: {\n       type: 'category',\n       position: 'bottom',\n       fields: ['name'],\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       }\n   },\n   series: {\n       type: 'area',\n       subStyle: {\n           fill: ['#0A3F50', '#30BDA7', '#96D4C6']\n       },\n       xField: 'name',\n       yField: ['data1', 'data2', 'data3']\n   }\n});\n","options":{}},{"id":"Ext.chart.axis.layout.CombineByIndex-0","name":"Ext.chart.axis.layout.CombineByIndex example #1","href":"#!/api/Ext.chart.axis.layout.CombineByIndex","code":"Ext.create({\n    xtype: 'cartesian',\n    title: 'Weight vs Calories',\n\n    renderTo: document.body,\n    width: 400,\n    height: 400,\n\n    store: {\n         fields: ['month', 'weight', 'calories'],\n         data: [\n             {\n                 month: 'Jan',\n                 weight: 185,\n                 calories: 2650\n             },\n             {\n                 month: 'Jan',\n                 weight: 188,\n                 calories: 2800\n             },\n             {\n                 month: 'Feb',\n                 weight: 188,\n                 calories: 2800\n             },\n             {\n                 month: 'Mar',\n                 weight: 191,\n                 calories: 2800\n             },\n             {\n                 month: 'Apr',\n                 weight: 189,\n                 calories: 1500\n             },\n             {\n                 month: 'May',\n                 weight: 187,\n                 calories: 1350\n             }\n         ]\n    },\n\n    axes: [{\n        type: 'numeric',\n        position: 'left',\n        fields: ['weight'],\n        minimum: 140\n    }, {\n        type: 'numeric',\n        position: 'right',\n        fields: ['calories'],\n        minimum: 500,\n        maximum: 3500\n    }, {\n        type: 'category',\n        grid: true,\n        layout: 'combineByIndex',\n        fields: 'month',\n        position: 'bottom',\n        label: {\n            rotate: {\n                degrees: -45\n            }\n        }\n    }],\n\n    series: [{\n        type: 'line',\n        title: 'Weight',\n        xField: 'month',\n        yField: 'weight',\n        smooth: true,\n        marker: true\n    }, {\n        type: 'line',\n        title: 'Calories',\n        xField: 'month',\n        yField: 'calories',\n        smooth: true,\n        marker: true\n    }],\n\n    legend: {\n        docked: 'bottom'\n    }\n\n});\n","options":{}},{"id":"Ext.chart.axis.Numeric-0","name":"Ext.chart.axis.Numeric example #1","href":"#!/api/Ext.chart.axis.Numeric","code":"Ext.create({\n   xtype: 'cartesian', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   store: {\n       fields: ['name', 'data1', 'data2', 'data3'],\n       data: [{\n           'name': 1,\n           'data1': 10,\n           'data2': 12,\n           'data3': 14\n       }, {\n           'name': 2,\n           'data1': 7,\n           'data2': 8,\n           'data3': 16\n       }, {\n           'name': 3,\n           'data1': 5,\n           'data2': 2,\n           'data3': 14\n       }, {\n           'name': 4,\n           'data1': 2,\n           'data2': 14,\n           'data3': 6\n       }, {\n           'name': 5,\n           'data1': 27,\n           'data2': 38,\n           'data3': 36\n       }]\n   },\n   axes: {\n       type: 'numeric',\n       position: 'left',\n       minimum: 0,\n       fields: ['data1', 'data2', 'data3'],\n       title: 'Sample Values',\n       grid: {\n           odd: {\n               opacity: 1,\n               fill: '#F2F2F2',\n               stroke: '#DDD',\n               'lineWidth': 1\n           }\n       }\n   },\n   series: {\n       type: 'area',\n       subStyle: {\n           fill: ['#0A3F50', '#30BDA7', '#96D4C6']\n       },\n       xField: 'name',\n       yField: ['data1', 'data2', 'data3']\n   }\n});\n","options":{}},{"id":"Ext.chart.axis.Time-0","name":"Ext.chart.axis.Time example #1","href":"#!/api/Ext.chart.axis.Time","code":"Ext.create({\n   xtype: 'cartesian', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   store: {\n       fields: ['time', 'open', 'high', 'low', 'close'],\n       data: [{\n           'time': new Date('Jan 1 2010').getTime(),\n           'open': 600,\n           'high': 614,\n           'low': 578,\n           'close': 590\n       }, {\n           'time': new Date('Jan 2 2010').getTime(),\n           'open': 590,\n           'high': 609,\n           'low': 580,\n           'close': 580\n       }, {\n           'time': new Date('Jan 3 2010').getTime(),\n           'open': 580,\n           'high': 602,\n           'low': 578,\n           'close': 602\n       }, {\n           'time': new Date('Jan 4 2010').getTime(),\n           'open': 602,\n           'high': 614,\n           'low': 586,\n           'close': 586\n       }]\n   },\n   axes: [{\n       type: 'numeric',\n       position: 'left',\n       fields: ['open', 'high', 'low', 'close'],\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       },\n       grid: true,\n       minimum: 560,\n       maximum: 640\n   }, {\n       type: 'time',\n       position: 'bottom',\n       fields: ['time'],\n       fromDate: new Date('Dec 31 2009'),\n       toDate: new Date('Jan 5 2010'),\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       },\n       style: {\n           axisLine: false\n       }\n   }],\n   series: {\n       type: 'candlestick',\n       xField: 'time',\n       openField: 'open',\n       highField: 'high',\n       lowField: 'low',\n       closeField: 'close',\n       style: {\n           ohlcType: 'ohlc',\n           dropStyle: {\n               fill: 'rgb(255, 128, 128)',\n               stroke: 'rgb(255, 128, 128)',\n               lineWidth: 3\n           },\n           raiseStyle: {\n               fill: 'rgb(48, 189, 167)',\n               stroke: 'rgb(48, 189, 167)',\n               lineWidth: 3\n           }\n       }\n   }\n});\n","options":{}},{"id":"Ext.chart.interactions.Crosshair-0","name":"Ext.chart.interactions.Crosshair example #1","href":"#!/api/Ext.chart.interactions.Crosshair","code":"Ext.create('Ext.Container', {\n    renderTo: Ext.getBody(),\n    width: 600,\n    height: 400,\n    layout: 'fit',\n    items: {\n        xtype: 'cartesian',\n        innerPadding: 20,\n        interactions: {\n            type: 'crosshair',\n            axes: {\n                left: {\n                    label: {\n                        fillStyle: 'white'\n                    },\n                    rect: {\n                        fillStyle: 'brown',\n                        radius: 6\n                    }\n                },\n                bottom: {\n                    label: {\n                        fontSize: '14px',\n                        fontWeight: 'bold'\n                    }\n                }\n            },\n            lines: {\n                horizontal: {\n                    strokeStyle: 'brown',\n                    lineWidth: 2,\n                    lineDash: [20, 2, 2, 2, 2, 2, 2, 2]\n                }\n            }\n        },\n        store: {\n            fields: ['name', 'data'],\n            data: [\n                {name: 'apple', data: 300},\n                {name: 'orange', data: 900},\n                {name: 'banana', data: 800},\n                {name: 'pear', data: 400},\n                {name: 'grape', data: 500}\n            ]\n        },\n        axes: [{\n            type: 'numeric',\n            position: 'left',\n            fields: ['data'],\n            title: {\n                text: 'Value',\n                fontSize: 15\n            },\n            grid: true,\n            label: {\n                rotationRads: -Math.PI / 4\n            }\n        }, {\n            type: 'category',\n            position: 'bottom',\n            fields: ['name'],\n            title: {\n                text: 'Category',\n                fontSize: 15\n            }\n        }],\n        series: {\n            type: 'line',\n            style: {\n                strokeStyle: 'black'\n            },\n            xField: 'name',\n            yField: 'data',\n            marker: {\n                type: 'circle',\n                radius: 5,\n                fillStyle: 'lightblue'\n            }\n        }\n    }\n});\n","options":{}},{"id":"Ext.chart.interactions.CrossZoom-0","name":"Ext.chart.interactions.CrossZoom example #1","href":"#!/api/Ext.chart.interactions.CrossZoom","code":"Ext.create({\n    xtype: 'cartesian',\n    renderTo: Ext.getBody(),\n    width: 600,\n    height: 400,\n    insetPadding: 40,\n    interactions: 'crosszoom',\n    store: {\n        fields: ['name', 'data1', 'data2', 'data3', 'data4', 'data5'],\n        data: [{\n            'name': 'metric one',\n            'data1': 10,\n            'data2': 12,\n            'data3': 14,\n            'data4': 8,\n            'data5': 13\n        }, {\n            'name': 'metric two',\n            'data1': 7,\n            'data2': 8,\n            'data3': 16,\n            'data4': 10,\n            'data5': 3\n        }, {\n            'name': 'metric three',\n            'data1': 5,\n            'data2': 2,\n            'data3': 14,\n            'data4': 12,\n            'data5': 7\n        }, {\n            'name': 'metric four',\n            'data1': 2,\n            'data2': 14,\n            'data3': 6,\n            'data4': 1,\n            'data5': 23\n        }, {\n            'name': 'metric five',\n            'data1': 27,\n            'data2': 38,\n            'data3': 36,\n            'data4': 13,\n            'data5': 33\n        }]\n    },\n    axes: [{\n        type: 'numeric',\n        position: 'left',\n        fields: ['data1'],\n        title: {\n            text: 'Sample Values',\n            fontSize: 15\n        },\n        grid: true,\n        minimum: 0\n    }, {\n        type: 'category',\n        position: 'bottom',\n        fields: ['name'],\n        title: {\n            text: 'Sample Values',\n            fontSize: 15\n        }\n    }],\n    series: [{\n        type: 'line',\n        highlight: {\n            size: 7,\n            radius: 7\n        },\n        style: {\n            stroke: 'rgb(143,203,203)'\n        },\n        xField: 'name',\n        yField: 'data1',\n        marker: {\n            type: 'path',\n            path: ['M', - 2, 0, 0, 2, 2, 0, 0, - 2, 'Z'],\n            stroke: 'blue',\n            lineWidth: 0\n        }\n    }, {\n        type: 'line',\n        highlight: {\n            size: 7,\n            radius: 7\n        },\n        fill: true,\n        xField: 'name',\n        yField: 'data3',\n        marker: {\n            type: 'circle',\n            radius: 4,\n            lineWidth: 0\n        }\n    }]\n});\n","options":{}},{"id":"Ext.chart.interactions.PanZoom-0","name":"Ext.chart.interactions.PanZoom example #1","href":"#!/api/Ext.chart.interactions.PanZoom","code":"Ext.create({\n    renderTo: document.body,\n    xtype: 'cartesian',\n    width: 600,\n    height: 400,\n    insetPadding: 40,            \n    interactions: [{\n        type: 'panzoom',\n        zoomOnPan: true\n    }],\n    store: {\n        fields: ['name', 'data1', 'data2', 'data3', 'data4', 'data5'],\n        data: [{\n            'name': 'metric one',\n            'data1': 10,\n            'data2': 12,\n            'data3': 14,\n            'data4': 8,\n            'data5': 13\n        }, {\n            'name': 'metric two',\n            'data1': 7,\n            'data2': 8,\n            'data3': 16,\n            'data4': 10,\n            'data5': 3\n        }, {\n            'name': 'metric three',\n            'data1': 5,\n            'data2': 2,\n            'data3': 14,\n            'data4': 12,\n            'data5': 7\n        }, {\n            'name': 'metric four',\n            'data1': 2,\n            'data2': 14,\n            'data3': 6,\n            'data4': 1,\n            'data5': 23\n        }, {\n            'name': 'metric five',\n            'data1': 27,\n            'data2': 38,\n            'data3': 36,\n            'data4': 13,\n            'data5': 33\n        }]\n    },\n    axes: [{\n        type: 'numeric',\n        position: 'left',\n        fields: ['data1'],\n        title: {\n            text: 'Sample Values',\n            fontSize: 15\n        },\n        grid: true,\n        minimum: 0\n    }, {\n        type: 'category',\n        position: 'bottom',\n        fields: ['name'],\n        title: {\n            text: 'Sample Values',\n            fontSize: 15\n        }\n    }],\n    series: [{\n        type: 'line',\n        highlight: {\n            size: 7,\n            radius: 7\n        },\n        style: {\n            stroke: 'rgb(143,203,203)'\n        },\n        xField: 'name',\n        yField: 'data1',\n        marker: {\n            type: 'path',\n            path: ['M', - 2, 0, 0, 2, 2, 0, 0, - 2, 'Z'],\n            stroke: 'blue',\n            lineWidth: 0\n        }\n    }, {\n        type: 'line',\n        highlight: {\n            size: 7,\n            radius: 7\n        },\n        fill: true,\n        xField: 'name',\n        yField: 'data3',\n        marker: {\n            type: 'circle',\n            radius: 4,\n            lineWidth: 0\n        }\n    }]\n});\n","options":{}},{"id":"Ext.chart.interactions.Rotate-0","name":"Ext.chart.interactions.Rotate example #1","href":"#!/api/Ext.chart.interactions.Rotate","code":"Ext.create('Ext.Container', {\n    renderTo: Ext.getBody(),\n    width: 600,\n    height: 400,\n    layout: 'fit',\n    items: {\n        xtype: 'polar',\n        interactions: 'rotate',\n        colors: [\"#115fa6\", \"#94ae0a\", \"#a61120\", \"#ff8809\", \"#ffd13e\"],\n        store: {\n            fields: ['name', 'data1', 'data2', 'data3', 'data4', 'data5'],\n            data: [\n                {'name':'metric one', 'data1':10, 'data2':12, 'data3':14, 'data4':8, 'data5':13},\n                {'name':'metric two', 'data1':7, 'data2':8, 'data3':16, 'data4':10, 'data5':3},\n                {'name':'metric three', 'data1':5, 'data2':2, 'data3':14, 'data4':12, 'data5':7},\n                {'name':'metric four', 'data1':2, 'data2':14, 'data3':6, 'data4':1, 'data5':23},\n                {'name':'metric five', 'data1':27, 'data2':38, 'data3':36, 'data4':13, 'data5':33}\n            ]\n        },\n        series: {\n            type: 'pie',\n            label: {\n                field: 'name',\n                display: 'rotate'\n            },\n            xField: 'data3',\n            donut: 30\n        }\n    }\n});\n","options":{}},{"id":"Ext.chart.navigator.Container-0","name":"Ext.chart.navigator.Container example #1","href":"#!/api/Ext.chart.navigator.Container","code":"Ext.create({\n    xtype: 'chartnavigator',\n    renderTo: Ext.getBody(),\n    width: 600,\n    height: 400,\n\n    chart: {\n        xtype: 'cartesian',\n\n        store: {\n            data: (function () {\n                var data = [];\n                for (var i = 0; i < 360; i++) {\n                    data.push({\n                        x: i,\n                        y: Math.sin(i / 45 * Math.PI)\n                    });\n                }\n                return data;\n            })()\n        },\n        axes: [\n            {\n                id: 'navigable-axis',\n\n                type: 'numeric',\n                position: 'bottom'\n            },\n            {\n                type: 'numeric',\n                position: 'left'\n            }\n        ],\n        series: {\n            type: 'line',\n            xField: 'x',\n            yField: 'y'\n        }\n    },\n\n    navigator: {\n        axis: 'navigable-axis'\n    }\n});\n","options":{}},{"id":"Ext.chart.series.Area-0","name":"Ext.chart.series.Area example #1","href":"#!/api/Ext.chart.series.Area","code":"Ext.create({\n   xtype: 'cartesian', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   insetPadding: 40,\n   store: {\n       fields: ['name', 'data1', 'data2', 'data3'],\n       data: [{\n           name: 'metric one',\n           data1: 10,\n           data2: 12,\n           data3: 14\n       }, {\n           name: 'metric two',\n           data1: 7,\n           data2: 8,\n           data3: 16\n       }, {\n           name: 'metric three',\n           data1: 5,\n           data2: 2,\n           data3: 14\n       }, {\n           name: 'metric four',\n           data1: 2,\n           data2: 14,\n           data3: 6\n       }, {\n           name: 'metric five',\n           data1: 27,\n           data2: 38,\n           data3: 36\n       }]\n   },\n   axes: [{\n       type: 'numeric',\n       position: 'left',\n       fields: ['data1'],\n       grid: true,\n       minimum: 0\n   }, {\n       type: 'category',\n       position: 'bottom',\n       fields: ['name']\n   }],\n   series: {\n       type: 'area',\n       subStyle: {\n           fill: ['#0A3F50', '#30BDA7', '#96D4C6']\n       },\n       xField: 'name',\n       yField: ['data1', 'data2', 'data3']\n   }\n});\n","options":{}},{"id":"Ext.chart.series.Bar-0","name":"Ext.chart.series.Bar example #1","href":"#!/api/Ext.chart.series.Bar","code":"Ext.create({\n   xtype: 'cartesian', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   store: {\n       fields: ['name', 'value'],\n       data: [{\n           name: 'metric one',\n           value: 10\n       }, {\n           name: 'metric two',\n           value: 7\n       }, {\n           name: 'metric three',\n           value: 5\n       }, {\n           name: 'metric four',\n           value: 2\n       }, {\n           name: 'metric five',\n           value: 27\n       }]\n   },\n   axes: [{\n       type: 'numeric',\n       position: 'left',\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       },\n       fields: 'value'\n   }, {\n       type: 'category',\n       position: 'bottom',\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       },\n       fields: 'name'\n   }],\n   series: {\n       type: 'bar',\n       subStyle: {\n           fill: ['#388FAD'],\n           stroke: '#1F6D91'\n       },\n       xField: 'name',\n       yField: 'value'\n   }\n});\n","options":{}},{"id":"Ext.chart.series.Bar3D-0","name":"Ext.chart.series.Bar3D example #1","href":"#!/api/Ext.chart.series.Bar3D","code":"Ext.create({\n   xtype: 'cartesian', \n   renderTo: Ext.getBody(),\n   width: 600,\n   height: 400,\n   innerPadding: '0 10 0 10',\n   store: {\n       fields: ['name', 'apples', 'oranges'],\n       data: [{\n           name: 'Eric',\n           apples: 10,\n           oranges: 3\n       }, {\n           name: 'Mary',\n           apples: 7,\n           oranges: 2\n       }, {\n           name: 'John',\n           apples: 5,\n           oranges: 2\n       }, {\n           name: 'Bob',\n           apples: 2,\n           oranges: 3\n       }, {\n           name: 'Joe',\n           apples: 19,\n           oranges: 1\n       }, {\n           name: 'Macy',\n           apples: 13,\n           oranges: 4\n       }]\n   },\n   axes: [{\n       type: 'numeric3d',\n       position: 'left',\n       fields: ['apples', 'oranges'],\n       title: {\n           text: 'Inventory',\n           fontSize: 15\n       },\n       grid: {\n           odd: {\n               fillStyle: 'rgba(255, 255, 255, 0.06)'\n           },\n           even: {\n               fillStyle: 'rgba(0, 0, 0, 0.03)'\n           }\n       }\n   }, {\n       type: 'category3d',\n       position: 'bottom',\n       title: {\n           text: 'People',\n           fontSize: 15\n       },\n       fields: 'name'\n   }],\n   series: {\n       type: 'bar3d',\n       xField: 'name',\n       yField: ['apples', 'oranges']\n   }\n});\n","options":{}},{"id":"Ext.chart.series.BoxPlot-0","name":"Ext.chart.series.BoxPlot example #1","href":"#!/api/Ext.chart.series.BoxPlot","code":"Ext.create({\n   xtype: 'cartesian',\n   width: 400,\n   height: 400,\n   renderTo: Ext.getBody(),\n   insetPadding: '20 20 10 10',\n   store: {\n       data: [{\n           category: 'Engineer IV',\n           low: 110, q1: 130, median: 175, q3: 200, high: 225\n       }, {\n           category: 'Market',\n           low: 75, q1: 125, median: 210, q3: 230, high: 255\n       }]\n   },\n   axes: [\n       {\n           type: 'numeric',\n           position: 'left',\n           renderer: function (axis, text) {\n               return '$' + text + ' K'\n           }\n       },\n       {\n           type: 'category',\n           position: 'bottom'\n       }\n   ],\n   series: {\n       type: 'boxplot',\n       xField: 'category',\n       style: {\n           maxBoxWidth: 50,\n           lineWidth: 2\n       }\n   }\n});\n","options":{}},{"id":"Ext.chart.series.CandleStick-0","name":"Ext.chart.series.CandleStick example #1","href":"#!/api/Ext.chart.series.CandleStick","code":"new Ext.chart.CartesianChart({\n    xtype: 'cartesian',\n    renderTo: document.body,\n    width: 700,\n    height: 500,\n    insetPadding: 20,\n    innerPadding: '0 20 0 20',\n\n    store: {\n        data: [\n            {\n                time: new Date('Nov 17 2016'),\n                o: 52.40, h: 52.74, l: 52.18, c: 52.29\n            },\n            {\n                time: new Date('Nov 18 2016'),\n                o: 51.87, h: 52.22, l: 51.51, c: 52.04\n            },\n            {\n                time: new Date('Nov 21 2016'),\n                o: 53.02, h: 53.40, l: 53.02, c: 53.33\n            },\n            {\n                time: new Date('Nov 22 2016'),\n                o: 53.48, h: 53.80, l: 53.13, c: 53.70\n            },\n            {\n                time: new Date('Nov 23 2016'),\n                o: 52.85, h: 53.39, l: 52.76, c: 53.28\n            },\n            {\n                time: new Date('Nov 25 2016'),\n                o: 53.28, h: 53.45, l: 53.20, c: 53.40\n            },\n            {\n                time: new Date('Nov 28 2016'),\n                o: 52.51, h: 52.58, l: 51.96, c: 52.00\n            },\n            {\n                time: new Date('Nov 29 2016'),\n                o: 51.25, h: 51.98, l: 51.10, c: 51.79\n            },\n            {\n                time: new Date('Nov 30 2016'),\n                o: 53.65, h: 54.56, l: 53.60, c: 54.17\n            },\n            {\n                time: new Date('Dec 01 2016'),\n                o: 55.26, h: 55.75, l: 54.94, c: 55.13\n            }\n        ]\n    },\n    axes: [\n        {\n            type: 'numeric',\n            position: 'left'\n        },\n        {\n            type: 'category',\n            position: 'bottom',\n\n            renderer: function (axis, value) {\n                return Ext.Date.format(value, 'M j\\nY');\n            }\n        }\n    ],\n    series: {\n        type: 'candlestick',\n\n        xField: 'time',\n\n        openField: 'o',\n        highField: 'h',\n        lowField: 'l',\n        closeField: 'c',\n\n        style: {\n            barWidth: 10,\n\n            dropStyle: {\n                fill: 'rgb(222, 87, 87)',\n                stroke: 'rgb(222, 87, 87)',\n                lineWidth: 3\n            },\n            raiseStyle: {\n                fill: 'rgb(48, 189, 167)',\n                stroke: 'rgb(48, 189, 167)',\n                lineWidth: 3\n            }\n        }\n    }\n});\n","options":{}},{"id":"Ext.chart.series.Gauge-0","name":"Ext.chart.series.Gauge example #1","href":"#!/api/Ext.chart.series.Gauge","code":"Ext.create({\n   xtype: 'polar', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   store: {\n       fields: ['mph', 'fuel', 'temp', 'rpm'],\n       data: [{\n           mph: 65,\n           fuel: 50,\n           temp: 150,\n           rpm: 6000\n       }]\n   },\n   series: {\n       type: 'gauge',\n       colors: ['#1F6D91', '#90BCC9'],\n       angleField: 'mph',\n       needle: true,\n       donut: 30\n   }\n});\n","options":{}},{"id":"Ext.chart.series.Line-0","name":"Ext.chart.series.Line example #1","href":"#!/api/Ext.chart.series.Line","code":"Ext.create({\n   xtype: 'cartesian', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   insetPadding: 40,\n   store: {\n       fields: ['name', 'data1', 'data2'],\n       data: [{\n           'name': 'metric one',\n           'data1': 10,\n           'data2': 14\n       }, {\n           'name': 'metric two',\n           'data1': 7,\n           'data2': 16\n       }, {\n           'name': 'metric three',\n           'data1': 5,\n           'data2': 14\n       }, {\n           'name': 'metric four',\n           'data1': 2,\n           'data2': 6\n       }, {\n           'name': 'metric five',\n           'data1': 27,\n           'data2': 36\n       }]\n   },\n   axes: [{\n       type: 'numeric',\n       position: 'left',\n       fields: ['data1'],\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       },\n       grid: true,\n       minimum: 0\n   }, {\n       type: 'category',\n       position: 'bottom',\n       fields: ['name'],\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       }\n   }],\n   series: [{\n       type: 'line',\n       style: {\n           stroke: '#30BDA7',\n           lineWidth: 2\n       },\n       xField: 'name',\n       yField: 'data1',\n       marker: {\n           type: 'path',\n           path: ['M', - 4, 0, 0, 4, 4, 0, 0, - 4, 'Z'],\n           stroke: '#30BDA7',\n           lineWidth: 2,\n           fill: 'white'\n       }\n   }, {\n       type: 'line',\n       fill: true,\n       style: {\n           fill: '#96D4C6',\n           fillOpacity: .6,\n           stroke: '#0A3F50',\n           strokeOpacity: .6,\n       },\n       xField: 'name',\n       yField: 'data2',\n       marker: {\n           type: 'circle',\n           radius: 4,\n           lineWidth: 2,\n           fill: 'white'\n       }\n   }]\n});\n","options":{}},{"id":"Ext.chart.series.Pie-0","name":"Ext.chart.series.Pie example #1","href":"#!/api/Ext.chart.series.Pie","code":"Ext.create({\n   xtype: 'polar',\n   renderTo: document.body,\n   width: 400,\n   height: 400,\n   theme: 'green',\n   interactions: ['rotate', 'itemhighlight'],\n   store: {\n       fields: ['name', 'data1'],\n       data: [{\n           name: 'metric one',\n           data1: 14\n       }, {\n           name: 'metric two',\n           data1: 16\n       }, {\n           name: 'metric three',\n           data1: 14\n       }, {\n           name: 'metric four',\n           data1: 6\n       }, {\n           name: 'metric five',\n           data1: 36\n       }]\n   },\n   series: {\n       type: 'pie',\n       highlight: true,\n       angleField: 'data1',\n       label: {\n           field: 'name',\n           display: 'rotate'\n       },\n       donut: 30\n   }\n});\n","options":{}},{"id":"Ext.chart.series.Pie3D-0","name":"Ext.chart.series.Pie3D example #1","href":"#!/api/Ext.chart.series.Pie3D","code":"Ext.create({\n   xtype: 'polar', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   theme: 'green',\n   interactions: 'rotate',\n   store: {\n       fields: ['data3'],\n       data: [{\n           'data3': 14\n       }, {\n           'data3': 16\n       }, {\n           'data3': 14\n       }, {\n           'data3': 6\n       }, {\n           'data3': 36\n       }]\n   },\n   series: {\n       type: 'pie3d',\n       angleField: 'data3',\n       donut: 30\n   }\n});\n","options":{}},{"id":"Ext.chart.series.Radar-0","name":"Ext.chart.series.Radar example #1","href":"#!/api/Ext.chart.series.Radar","code":"Ext.create({\n   xtype: 'polar',\n   renderTo: document.body,\n   width: 500,\n   height: 400,\n   interactions: 'rotate',\n   store: {\n       fields: ['name', 'data1'],\n       data: [{\n           'name': 'metric one',\n           'data1': 8\n       }, {\n           'name': 'metric two',\n           'data1': 10\n       }, {\n           'name': 'metric three',\n           'data1': 12\n       }, {\n           'name': 'metric four',\n           'data1': 1\n       }, {\n           'name': 'metric five',\n           'data1': 13\n       }]\n   },\n   series: {\n       type: 'radar',\n       angleField: 'name',\n       radiusField: 'data1',\n       style: {\n           fillStyle: '#388FAD',\n           fillOpacity: .1,\n           strokeStyle: '#388FAD',\n           strokeOpacity: .8,\n           lineWidth: 1\n       }\n   },\n   axes: [{\n       type: 'numeric',\n       position: 'radial',\n       fields: 'data1',\n       style: {\n           estStepSize: 10\n       },\n       grid: true\n   }, {\n       type: 'category',\n       position: 'angular',\n       fields: 'name',\n       style: {\n           estStepSize: 1\n       },\n       grid: true\n   }]\n});\n","options":{}},{"id":"Ext.chart.series.Scatter-0","name":"Ext.chart.series.Scatter example #1","href":"#!/api/Ext.chart.series.Scatter","code":"Ext.create({\n   xtype: 'cartesian', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   insetPadding: 40,\n   interactions: ['itemhighlight'],\n   store: {\n       fields: ['name', 'data1', 'data2'],\n       data: [{\n           'name': 'metric one',\n           'data1': 10,\n           'data2': 14\n       }, {\n           'name': 'metric two',\n           'data1': 7,\n           'data2': 16\n       }, {\n           'name': 'metric three',\n           'data1': 5,\n           'data2': 14\n       }, {\n           'name': 'metric four',\n           'data1': 2,\n           'data2': 6\n       }, {\n           'name': 'metric five',\n           'data1': 27,\n           'data2': 36\n       }]\n   },\n   axes: [{\n       type: 'numeric',\n       position: 'left',\n       fields: ['data1'],\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       },\n       grid: true,\n       minimum: 0\n   }, {\n       type: 'category',\n       position: 'bottom',\n       fields: ['name'],\n       title: {\n           text: 'Sample Values',\n           fontSize: 15\n       }\n   }],\n   series: {\n       type: 'scatter',\n       highlight: {\n           size: 12,\n           radius: 12,\n           fill: '#96D4C6',\n           stroke: '#30BDA7'\n       },\n       fill: true,\n       xField: 'name',\n       yField: 'data2',\n       marker: {\n           type: 'circle',\n           fill: '#30BDA7',\n           radius: 10,\n           lineWidth: 0\n       }\n   }\n});\n","options":{}},{"id":"Ext.chart.sprite.BoxPlot-0","name":"Ext.chart.sprite.BoxPlot example #1","href":"#!/api/Ext.chart.sprite.BoxPlot","code":"new Ext.draw.Container({\n    width: 100,\n    height: 100,\n    renderTo: Ext.getBody(),\n    sprites: [{\n        type: 'boxplot',\n        translationX: 50,\n        translationY: 50\n    }]\n});\n","options":{}},{"id":"Ext.draw.Container-0","name":"Ext.draw.Container example #1","href":"#!/api/Ext.draw.Container","code":"var drawContainer = Ext.create('Ext.draw.Container', {\n    renderTo: Ext.getBody(),\n    width:200,\n    height:200,\n    sprites: [{\n        type: 'circle',\n        fillStyle: '#79BB3F',\n        r: 100,\n        x: 100,\n        y: 100\n     }]\n});\n\n// Uncomment to trigger a download of the painted circle.\n// drawContainer.download({\n//     filename: 'Circle',\n//     url: 'http://svg.sencha.io' // Default server the image data is sent to.\n// });\n","options":{}},{"id":"Ext.draw.gradient.Linear-0","name":"Ext.draw.gradient.Linear example #1","href":"#!/api/Ext.draw.gradient.Linear","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'circle',\n       cx: 100,\n       cy: 100,\n       r: 100,\n       fillStyle: {\n           type: 'linear',\n           degrees: 180,\n           stops: [{\n               offset: 0,\n               color: '#1F6D91'\n           }, {\n               offset: 1,\n               color: '#90BCC9'\n           }]\n       }\n   }]\n});\n","options":{}},{"id":"Ext.draw.gradient.Radial-0","name":"Ext.draw.gradient.Radial example #1","href":"#!/api/Ext.draw.gradient.Radial","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'circle',\n       cx: 100,\n       cy: 100,\n       r: 100,\n       fillStyle: {\n           type: 'radial',\n           start: {\n               x: 0,\n               y: 0,\n               r: 0\n           },\n           end: {\n               x: 0,\n               y: 0,\n               r: 1\n           },\n           stops: [{\n               offset: 0,\n               color: '#90BCC9'\n           }, {\n               offset: 1,\n               color: '#1F6D91'\n           }]\n       }\n   }]\n});\n","options":{}},{"id":"Ext.draw.Matrix-0","name":"Ext.draw.Matrix example #1","href":"#!/api/Ext.draw.Matrix","code":"var drawContainer = new Ext.draw.Container({\n    renderTo: Ext.getBody(),\n    width: 380,\n    height: 380,\n    sprites: [{\n        type: 'rect',\n        width: 100,\n        height: 100,\n        fillStyle: 'red'\n    }]\n});\n","options":{}},{"id":"Ext.draw.Matrix-1","name":"Ext.draw.Matrix example #2","href":"#!/api/Ext.draw.Matrix","code":"var drawContainer = new Ext.draw.Container({\n    renderTo: Ext.getBody(),\n    width: 380,\n    height: 380,\n    sprites: [{\n        type: 'rect',\n        width: 100,\n        height: 100,\n        fillStyle: 'red'\n    }]\n});\n\nvar main = drawContainer.getSurface();\nvar rect = main.getItems()[0];\n\nvar m = new Ext.draw.Matrix().translate(100, 100).\nrotate(Math.PI).\ntranslate(-100, - 100);\n\nrect.setTransform(m);\nmain.renderFrame();\n","options":{}},{"id":"Ext.draw.Matrix-2","name":"Ext.draw.Matrix example #3","href":"#!/api/Ext.draw.Matrix","code":"var drawContainer = new Ext.draw.Container({\n    renderTo: Ext.getBody(),\n    width: 380,\n    height: 380,\n    sprites: [{\n        type: 'rect',\n        width: 100,\n        height: 100,\n        fillStyle: 'red'\n    }]\n});\n\nvar main = drawContainer.getSurface();\nvar rect = main.getItems()[0];\n\nvar m = new Ext.draw.Matrix().rotate(Math.PI, 100, 100);\n\nrect.setTransform(m);\nmain.renderFrame();\n","options":{}},{"id":"Ext.draw.modifier.Animation-0","name":"Ext.draw.modifier.Animation example #1","href":"#!/api/Ext.draw.modifier.Animation","code":"var drawCt = Ext.create({\n    xtype: 'draw',\n    renderTo: document.body,\n    width: 400,\n    height: 400,\n    sprites: [{\n        type: 'rect',\n        x: 50,\n        y: 50,\n        width: 100,\n        height: 100,\n        fillStyle: '#1F6D91'\n    }]\n});\n\nvar rect = drawCt.getSurface().getItems()[0];\n\nrect.setAnimation({\n    duration: 1000,\n    easing: 'elasticOut'\n});\n\nExt.defer(function () {\n    rect.setAttributes({\n        width: 250\n    });\n}, 500);\n","options":{}},{"id":"Ext.draw.sprite.Arc-0","name":"Ext.draw.sprite.Arc example #1","href":"#!/api/Ext.draw.sprite.Arc","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'arc',\n       cx: 100,\n       cy: 100,\n       r: 80,\n       fillStyle: '#1F6D91',\n       startAngle: 0,\n       endAngle: Math.PI,\n       anticlockwise: true\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Arrow-0","name":"Ext.draw.sprite.Arrow example #1","href":"#!/api/Ext.draw.sprite.Arrow","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'arrow',\n       translationX: 100,\n       translationY: 100,\n       size: 40,\n       fillStyle: '#30BDA7'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Circle-0","name":"Ext.draw.sprite.Circle example #1","href":"#!/api/Ext.draw.sprite.Circle","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'circle',\n       cx: 100,\n       cy: 100,\n       r: 50,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Cross-0","name":"Ext.draw.sprite.Cross example #1","href":"#!/api/Ext.draw.sprite.Cross","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'cross',\n       translationX: 100,\n       translationY: 100,\n       size: 40,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Diamond-0","name":"Ext.draw.sprite.Diamond example #1","href":"#!/api/Ext.draw.sprite.Diamond","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'diamond',\n       translationX: 100,\n       translationY: 100,\n       size: 40,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Ellipse-0","name":"Ext.draw.sprite.Ellipse example #1","href":"#!/api/Ext.draw.sprite.Ellipse","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'ellipse',\n       cx: 100,\n       cy: 100,\n       rx: 80,\n       ry: 50,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.EllipticalArc-0","name":"Ext.draw.sprite.EllipticalArc example #1","href":"#!/api/Ext.draw.sprite.EllipticalArc","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'ellipticalArc',\n       cx: 100,\n       cy: 100,\n       rx: 80,\n       ry: 50,\n       fillStyle: '#1F6D91',\n       startAngle: 0,\n       endAngle: Math.PI,\n       anticlockwise: true\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Line-0","name":"Ext.draw.sprite.Line example #1","href":"#!/api/Ext.draw.sprite.Line","code":"Ext.create({\n   xtype: 'draw',\n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'line',\n       fromX: 20,\n       fromY: 20,\n       toX: 120,\n       toY: 120,\n       strokeStyle: '#1F6D91',\n       lineWidth: 3\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Path-0","name":"Ext.draw.sprite.Path example #1","href":"#!/api/Ext.draw.sprite.Path","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'path',\n       path: 'M20,30 c0,-50 75,50 75,0 c0,-50 -75,50 -75,0',\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Plus-0","name":"Ext.draw.sprite.Plus example #1","href":"#!/api/Ext.draw.sprite.Plus","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'plus',\n       translationX: 100,\n       translationY: 100,\n       size: 40,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Rect-0","name":"Ext.draw.sprite.Rect example #1","href":"#!/api/Ext.draw.sprite.Rect","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'rect',\n       x: 50,\n       y: 50,\n       width: 100,\n       height: 100,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Sector-0","name":"Ext.draw.sprite.Sector example #1","href":"#!/api/Ext.draw.sprite.Sector","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'sector',\n       centerX: 100,\n       centerY: 100,\n       startAngle: -2.355,\n       endAngle: -.785,\n       endRho: 50,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Sprite-0","name":"Ext.draw.sprite.Sprite example #1","href":"#!/api/Ext.draw.sprite.Sprite","code":"Ext.create({\n    xtype: 'draw', \n    renderTo: document.body,\n    width: 400,\n    height: 400,\n    sprites: [{\n        type: 'rect',\n        x: 50,\n        y: 50,\n        width: 100,\n        height: 100,\n        fillStyle: '#1F6D91'\n    }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Sprite-1","name":"Ext.draw.sprite.Sprite example #2","href":"#!/api/Ext.draw.sprite.Sprite","code":"Ext.create({\n    xtype: 'draw', \n    renderTo: document.body,\n    width: 400,\n    height: 400,\n    sprites: [{\n        type: 'rect',\n        surface: 'anim',  // a surface with id \"anim\" will be created automatically\n        x: 50,\n        y: 50,\n        width: 100,\n        height: 100,\n        fillStyle: '#1F6D91'\n    }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Sprite-2","name":"Ext.draw.sprite.Sprite example #3","href":"#!/api/Ext.draw.sprite.Sprite","code":"var drawCt = Ext.create({\n    xtype: 'draw',\n    renderTo: document.body,\n    width: 400,\n    height: 400\n});\n\n// If the surface name is not specified then 'main' will be used\nvar surface = drawCt.getSurface();\n\nsurface.add({\n    type: 'rect',\n    x: 50,\n    y: 50,\n    width: 100,\n    height: 100,\n    fillStyle: '#1F6D91'\n});\n\nsurface.renderFrame();\n","options":{}},{"id":"Ext.draw.sprite.Square-0","name":"Ext.draw.sprite.Square example #1","href":"#!/api/Ext.draw.sprite.Square","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'square',\n       x: 100,\n       y: 100,\n       size: 50,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Text-0","name":"Ext.draw.sprite.Text example #1","href":"#!/api/Ext.draw.sprite.Text","code":"Ext.create({\n   xtype: 'draw',\n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'text',\n       x: 50,\n       y: 50,\n       text: 'Sencha',\n       fontSize: 30,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Tick-0","name":"Ext.draw.sprite.Tick example #1","href":"#!/api/Ext.draw.sprite.Tick","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'tick',\n       x: 20,\n       y: 40,\n       size: 10,\n       strokeStyle: '#388FAD',\n       lineWidth: 2\n   }]\n});\n","options":{}},{"id":"Ext.draw.sprite.Triangle-0","name":"Ext.draw.sprite.Triangle example #1","href":"#!/api/Ext.draw.sprite.Triangle","code":"Ext.create({\n   xtype: 'draw', \n   renderTo: document.body,\n   width: 600,\n   height: 400,\n   sprites: [{\n       type: 'triangle',\n       size: 50,\n       translationX: 100,\n       translationY: 100,\n       fillStyle: '#1F6D91'\n   }]\n});\n","options":{}},{"id":"Ext.draw.Surface-0","name":"Ext.draw.Surface example #1","href":"#!/api/Ext.draw.Surface","code":"Ext.create({\n    xtype: 'draw',\n    renderTo: document.body,\n    width: 400,\n    height: 400,\n    sprites: [{\n        type: 'rect',\n        surface: 'anim',  // a surface with id \"anim\" will be created automatically\n        x: 50,\n        y: 50,\n        width: 100,\n        height: 100,\n        fillStyle: '#1F6D91'\n    }]\n});\n","options":{}},{"id":"Ext.draw.Surface-1","name":"Ext.draw.Surface example #2","href":"#!/api/Ext.draw.Surface","code":"var drawCt = Ext.create({\n    xtype: 'draw',\n    renderTo: document.body,\n    width: 400,\n    height: 400\n});\n\n// If the surface name is not specified then 'main' will be used\nvar surface = drawCt.getSurface();\n\nsurface.add({\n    type: 'rect',\n    x: 50,\n    y: 50,\n    width: 100,\n    height: 100,\n    fillStyle: '#1F6D91'\n});\n\nsurface.renderFrame();\n","options":{}},{"id":"SU.Error-0","name":"SU.Error example #1","href":"#!/api/SU.Error","code":"throw new SU.Error('Something bad happened!');\n","options":{}},{"id":"SU.Error-1","name":"SU.Error example #2","href":"#!/api/SU.Error","code":"Ext.raise('A simple string error message');\n","options":{}},{"id":"SU.Error-2","name":"SU.Error example #3","href":"#!/api/SU.Error","code":"SU.Error.ignore = false;\nSU.Error.handle = function(e){\n    if(e.name === 'ReferenceError'){\n        alert(Ext.String.format('Name: {0},\\nMessage: {1},\\nDescription: {2}', e.name, e.message, e.description));\n        return true;\n    }\n    return SU.Error.ignore;\n}\ntry{\n    err+1;\n} catch(e){\n    Ext.raise(e);\n}\n\nExt.raise('Not handled a simple string  error message');\n","options":{}},{"id":"SU.Error-3","name":"SU.Error example #4","href":"#!/api/SU.Error","code":"Ext.raise({\n    etype: 'Ext.WebSocketError',\n    msg: ['CAN_NOT_CONNECT', 'ws://example.com']\n});\n","options":{}},{"id":"SU.Error-4","name":"SU.Error example #5","href":"#!/api/SU.Error","code":"SU.Error.handle = function(e){\n     alert(\n         e.toString()+\n         '\\n'+\n         e.description+\n         '\\nInstance of Error: '+(e instanceof Error)+                           // TRUE\n         '\\nInstance of SyntaxError: '+(e instanceof SyntaxError)+               // FALSE\n         '\\nInstance of Ext.Base: '+(e instanceof Ext.Base)+                     // FALSE\n         '\\nInstance of Ext.Error: '+(e instanceof Ext.Error)+                   // true\n         '\\nInstance of SU.Error: '+(e instanceof SU.Error)+                     // true\n         '\\nInstance of Ext.WebSocketError: '+(e instanceof Ext.WebSocketError)  // true | false\n     );\n    return true;\n}\n\n try {\n     Ext.raise({\n         etype: 'Ext.WebSocketError',\n         msg: ['CAN_NOT_CONNECT', 'ws://example.com']\n     });\n } catch(e) {\n     Ext.raise(e);\n }\n\n try {\n     eval('for(');\n } catch(e) {\n     Ext.raise(e);\n }\n","options":{}},{"id":"SU.utils.String-0","name":"SU.utils.String example #1","href":"#!/api/SU.utils.String","code":"var wordForms = ['заяц', 'зайца', 'зайцев'];\nconsole.log( 1, Ext.String.declination(1, wordForms) );                 // 1 заяц\nconsole.log( 3, Ext.String.declination(3, wordForms) );                 // 3 зайца\nconsole.log( 11, Ext.String.declination(11, wordForms) );               // 11 зайцев\nconsole.log( Ext.String.declination(NaN, wordForms) || 'Зайцев нет' );  // Зайцев нет\n","options":{}},{"id":"SU.WebSocket-0","name":"SU.WebSocket example #1","href":"#!/api/SU.WebSocket","code":"function addLog(text){\n    Ext.DomHelper.append( Ext.getBody(), {tag: 'div', style: 'margin:0 10px;', html: text});\n};\n\nvar ws = Ext.create('Ext.WebSocket', {\n    url: 'ws://echo.websocket.org/',\n    listeners:{\n        changestate: function( conn, state ){\n            var states = ['INITIALIZE', 'CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\n            addLog( 'Connection state: '+states[state & 0x0F] );\n        },\n        message: function(conn, data){\n            addLog( 'Response message: '+data);\n            ws.disconnect();\n        },\n        send: function(conn, data){\n            addLog( 'Send message: '+data);\n        },\n        connect: function(conn){\n            ws.send( 'WebSocket echo message' );\n        },\n        disconnect: function(conn, e){\n            addLog( 'Close state '+( !!e ? e.code : 0 ) );\n        }\n    }\n});\n\nws.connect();\n","options":{}},{"id":"SU.widgets.Avatar-0","name":"SU.widgets.Avatar example #1","href":"#!/api/SU.widgets.Avatar","code":"Ext.create({ \n    xtype: 'container', \n    fullscreen: true, \n    padding: 10,\n\n    items: [\n        {\n            xtype: 'container',\n            layout: 'hbox',\n            defaults: { style: 'margin: 20px;' },\n            items: [\n                {\n                    xtype: 'avatar',\n                    userName: 'Пупкин Василий Эдмундович'\n                },\n                {\n                    xtype: 'avatar',\n                    ui: 'plain',\n                    userName: 'Иванов Антон'\n                },\n                {\n                    xtype: 'avatar',\n                    userName: 'Вася Пупкин',\n                    image: 'https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50'\n                }\n            ]\n        },\n        {\n            xtype: 'container',\n            layout: 'hbox',\n            defaults: { style: 'margin: 10px;' },\n            items: [\n                {\n                    xtype: 'avatar',\n                    proportions: 80,\n                    userName: 'Петя Васечкин'\n                },\n                {\n                    xtype: 'avatar',\n                    ui: 'plain',\n                    proportions: 80,\n                    userName: 'Иванов Антон'\n                },\n                {\n                    xtype: 'avatar',\n                    proportions: 80,\n                    userName: 'Вася Пупкин',\n                    image: 'https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50'\n                }\n            ]\n        }\n    ], \n    renderTo: Ext.getBody() \n});\n","options":{}},{"id":"SU.form.field.Search-0","name":"SU.form.field.Search example #1","href":"#!/api/SU.form.field.Search","code":"Ext.create('Ext.form.Panel', {\n    renderTo: Ext.getBody(),\n    items: [\n        {\n            xtype: 'searchfield',\n            fieldLabel: 'Query',\n            name: 'query',\n            listeners: {\n                search: function(f, text){\n                    alert('Search text: ' + (text || 'null'));\n                }\n            }\n        }\n    ]\n});\n","options":{}}]);